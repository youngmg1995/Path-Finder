{"version":3,"sources":["components/Dropdown.js","components/SliderDropdown.js","components/ControlPanel.js","utils/utils.js","utils/canvas-tools.js","components/Canvas.js","utils/algorithms.js","utils/animations.js","components/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","state","listOpen","headerTitle","title","options","this","windowState","setState","prevState","event","key","toggleList","document","addEventListener","escapeList","backgroundColor","fontColor","className","onClick","style","color","icon","faAngleUp","size","transform","faAngleDown","map","item","id","callBack","selected","faCheck","React","Component","onClickOutside","SliderDropdown","value","hexSize","target","window","innerWidth","innerHeight","type","orient","min","max","onInput","changeValue","onMouseUp","submitValue","onKeyDown","onTouchEnd","ControlPanel","algorithm","speed","tool","mazes","clear","temp","slice","i","length","toggleSelected","showControls","s","changeHexSize","drawMaze","clearBoard","running","clickEvent","stopSearch","startSearch","faPause","faPlay","DIRECTIONS","j","isSameNode","node1","node2","nodeOnBoard","node","xUnits","yUnits","isValidNode","board","findNeighbors","directions","neighbors","change","neighbor","push","manhattanDistance","hexCoord1","hexCoordinates","hexCoord2","dx","x","dy","y","Math","sign","abs","ceil2","scalarProd","a","v","vectorDiff","v1","v2","vectorSum","vectorAngle","angle","atan","PI","minHeap","lessThan","heap","floor","minValue","shift","unshift","pop","disjointSet","dictionary","hasOwnProperty","parent","xRoot","find","yRoot","shuffleArray","array","arrayCopy","random","getRandomNode","offLimitsSet","randomNode","has","getRandomWallNode","getRandomNeighbor","parseKey","filter","drawLine","startNode","endNode","lineWidth","xOffset","yOffset","canvasRef","canvasUpdates","N","calcHexCenter","startPos","V","line","n","nearestHex","targetNode","Object","assign","fill","object","updateID","moveStart","oldNode","newNode","oldState","moveTarget","drawWeight","pos","sideLength","h","w1","w2","rw","r1","cx","current","getContext","path","beginPath","fillStyle","moveTo","lineTo","closePath","ringCenter","arc","stroke","drawHex","calcHexPath","fillHex","getPointerNode","domNode","rect","getBoundingClientRect","clientX","left","clientY","top","sqrt","J","I","u","theta","cos","sin","calcUnits","canvasWidth","canvasHeight","initializeBoard","offset","initializeCanvas","split","parseInt","Canvas","width","height","updateNode","nextProps","prevProps","clearRect","componentDidMount","startPosition","b","c","oldPos","newPos","drawStartPos","drawNode","drawStart","drawTarget","ref","onMouseDown","downEvent","onTouchStart","startEvent","depthFirst","queue","visitedNodes","Set","searchUpdates","currentPath","currentNode","add","newState","newPath","concat","breadthFirst","hillClimbing","sort","beamSearch","w","bestFirst","path1","path2","distance","insert","pathWeights","branchNBound","bestDistance","Infinity","bestPath","newDistance","aStarSearch","estimatedDistance","randomWalls","mazePath","randomWeights","depthFirstMaze","nodesToAdd","breadthFirstMaze","kruskalsMaze","unVisitedNodes","pathNodes","disjointPaths","roots","rootsSet","makeSet","union","primsMaze","startFound","targetFound","huntAndKill","newRandomWalk","randomDLA","pathNeighbors","brownianNode","wallDLA","searchSpeed","0","1","2","3","4","drawPathSpeed","moveDownPathSpeed","victorySpeed","drawMazeSpeed","pathFinderAnimation","isRunning","pathFinder","hexsPerSecond","lastTime","currentStart","steps","totalHexs","requestAnimationFrame","frame","time","start","boardUpdates","update","updateAnimation","pathUpdates","totalSteps","totalTime","startTime","prevStartNode","prevEndNode","endPos","prevNode","radiansPerSecond","targetPos","startAngle","pos1","pos2","nodeDistance","victoryAnimation","moveDownPathAnimation","drawPathAnimation","searchAnimation","mazeAnimation","mazeID","mazeBuilder","PathFinder","getWindowState","createRef","handleResize","stateUpdate","button","onMove","onMoveType","canvas","origNode","move","moveEvent","buttons","removeEventListener","oldStart","newStart","oldTarget","newTarget","preventDefault","touches","end","endEvent","currentState","includes","lightWeightBaby","doTheJohnWall","faBars","toggleControls","5","6","startPathFinder","stopPathFinder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67b94159.chunk.js","sourcesContent":["import React from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleUp , faAngleDown, faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            options: this.props.options\r\n        }\r\n    }\r\n\r\n    handleClickOutside() {\r\n        if (this.props.windowState === 1) return;\r\n        this.setState({listOpen: false});\r\n    }\r\n\r\n    toggleList() {\r\n        this.setState(prevState => ({\r\n            listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    escapeList(event) {\r\n        if (this.state.listOpen && event.key === 'Escape') this.toggleList();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown',(event) => this.escapeList(event));\r\n    }\r\n\r\n    render() {\r\n        const {listOpen, headerTitle, options} = this.state;\r\n        let backgroundColor, fontColor;\r\n        if (this.props.windowState === 1 || this.props.windowState === 2) {\r\n            if (listOpen) [ backgroundColor , fontColor ] = ['#27af62' , 'white' ];\r\n            else [ backgroundColor , fontColor ] = [ 'white' , 'black' ];\r\n        } else [ backgroundColor , fontColor ] = [ '#191414' , 'white' ];\r\n        return (\r\n            <div className=\"Dropdown\">\r\n                <div className=\"Dropdown-header-wrapper\">\r\n                    <div className=\"Dropdown-header\" onClick={() => this.toggleList()} style = {{backgroundColor: backgroundColor, color:fontColor}}>\r\n                        <div className=\"Dropdown-header-title\">{headerTitle}</div>\r\n                        {listOpen\r\n                            ? <FontAwesomeIcon className=\"angle-up\" icon={faAngleUp} size=\"lg\" transform=\"down-1\"/>\r\n                            : <FontAwesomeIcon className=\"angle-down\" icon={faAngleDown} size=\"lg\" transform=\"down-1\"/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {listOpen && <ul className={headerTitle+\"-Dropdown-list\"}>\r\n                    {options.map((item) => (\r\n                        <li key={item.id} className=\"Dropdown-list-item\" onClick={() => this.props.callBack(item.id,item.key,item.title)}>\r\n                            {item.title}\r\n                            {item.selected && <FontAwesomeIcon className=\"check\" icon={faCheck} size=\"1x\"/>}\r\n                        </li>\r\n                    ))}\r\n                </ul>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default onClickOutside(Dropdown);","import React from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleUp , faAngleDown} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass SliderDropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            value: this.props.hexSize\r\n        }\r\n    }\r\n\r\n    handleClickOutside() {\r\n        if (this.props.windowState === 1) return;\r\n        this.setState({\r\n            listOpen: false\r\n        });\r\n    }\r\n\r\n    toggleList() {\r\n        this.setState(prevState => ({\r\n            listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    changeValue(event) {\r\n        this.setState({value:event.target.value});\r\n    }\r\n\r\n    submitValue(event) {\r\n        this.props.callBack(event.target.value);\r\n    }\r\n\r\n    escapeList(event) {\r\n        if (this.state.listOpen && event.key === 'Escape') this.toggleList();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown',(event) => this.escapeList(event));\r\n    }\r\n\r\n    render() {\r\n        let backgroundColor, fontColor;\r\n        if (window.innerWidth < 481 || window.innerHeight < 481) {\r\n            if (this.state.listOpen) [ backgroundColor , fontColor ] = ['#27af62' , 'white' ];\r\n            else [ backgroundColor , fontColor ] = [ 'white' , 'black' ];\r\n        } else [ backgroundColor , fontColor ] = [ '#191414' , 'white' ];\r\n        return (\r\n            <div className=\"Dropdown\">\r\n                <div className=\"Dropdown-header-wrapper\">\r\n                    <div className=\"Dropdown-header\" onClick={() => this.toggleList()} style = {{backgroundColor: backgroundColor, color:fontColor}}>\r\n                        <div className=\"Dropdown-header-title\">{this.state.headerTitle}</div>\r\n                        {this.state.listOpen\r\n                            ? <FontAwesomeIcon className=\"angle-up\" icon={faAngleUp} size=\"lg\" transform=\"down-1\"/>\r\n                            : <FontAwesomeIcon className=\"angle-down\" icon={faAngleDown} size=\"lg\" transform=\"down-1\"/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {this.state.listOpen && <div className={\"SliderDropdown-list\"}>\r\n                    <div className=\"slider-text\">{this.state.value}</div>\r\n                    <input className=\"slider\" type=\"range\" orient=\"vertical\" min=\"5\" max=\"100\"\r\n                        value={this.state.value}\r\n                        onInput={(event) => this.changeValue(event)}\r\n                        onMouseUp={(event) => this.submitValue(event)}\r\n                        onKeyDown={(event) => {if (event.key === \"Enter\") this.submitValue(event);}}\r\n                        onTouchEnd={(event) => this.submitValue(event)}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default onClickOutside(SliderDropdown);","import React from 'react';\r\nimport Dropdown from './Dropdown';\r\nimport SliderDropdown from './SliderDropdown';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay , faPause } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass ControlPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            algorithm: [\r\n                        {id:0, title:'Depth-First Search', selected:false, key:'algorithm'},\r\n                        {id:1, title:'Breadth-First Search', selected:false, key:'algorithm'},\r\n                        {id:2, title:'Hill Climbing', selected:false, key:'algorithm'},\r\n                        {id:3, title:'Beam Search (\\u03C9=2)', selected:false, key:'algorithm'},\r\n                        {id:4, title:'Best-First Search', selected:false, key:'algorithm'},\r\n                        {id:5, title:'Branch & Bound', selected:true, key:'algorithm'},\r\n                        {id:6, title:'A* Search', selected:false, key:'algorithm'}\r\n            ],\r\n            speed: [\r\n                        {id:0, title:'Slow', selected:false, key:'speed'},\r\n                        {id:1, title:'Medium', selected:false, key:'speed'},\r\n                        {id:2, title:'Fast', selected:true, key:'speed'},\r\n                        {id:3, title:'Ludicrous', selected:false, key:'speed'},\r\n                        {id:4, title:'Instant', selected:false, key:'speed'}\r\n            ],\r\n            tool: [\r\n                        {id:0, title:'Walls', selected:true, key:'tool'},\r\n                        {id:1, title:'Weights', selected:false, key:'tool'},\r\n                        {id:2, title:'Eraser', selected:false, key:'tool'}\r\n            ],\r\n            mazes: [\r\n                        {id:0, title:'Random Walls', selected:false, key:'mazes'},\r\n                        {id:1, title:'Random Weights', selected:false, key:'mazes'},\r\n                        {id:2, title:'Depth-First Maze', selected:false, key:'mazes'},\r\n                        {id:3, title:'Breadth-First Maze', selected:false, key:'mazes'},\r\n                        {id:4, title:\"Hunt & Kill Maze\", selected:false, key:'mazes'},\r\n                        {id:5, title:\"Prim's Maze\", selected:false, key:'mazes'},\r\n                        {id:6, title:\"Kruskal's Maze\", selected:false, key:'mazes'},\r\n                        {id:7, title:\"Random DLA Fractal\", selected:false, key:'mazes'},\r\n                        {id:8, title:\"Wall DLA Fractal\", selected:false, key:'mazes'}\r\n            ],\r\n            clear: [\r\n                        {id:1, title:'Path', selected:false, key:'clear'},\r\n                        {id:2, title:'Walls', selected:false, key:'clear'},\r\n                        {id:3, title:'Weights', selected:false, key:'clear'},\r\n                        {id:0, title:'Board', selected:false, key:'clear'},\r\n                        {id:4, title:'Canvas', selected:false, key:'clear'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    toggleSelected(id,key,title) {\r\n        if (key !== 'clear') {\r\n            let temp = this.state[key].slice();\r\n            for (let i = 0; i < temp.length; i++) {\r\n                temp[i].selected = (id === temp[i].id);\r\n            }\r\n            this.setState({\r\n                [key]:temp\r\n            });\r\n        }\r\n        this.props.toggleSelected(key,id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ControlPanel\">\r\n                {this.props.showControls &&\r\n                    <div className=\"Controls-Wrapper-Background\">\r\n                        <div className=\"Controls-Wrapper\">\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Algorithm-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Algorithm'} \r\n                                    options={this.state.algorithm}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\"> \r\n                                <Dropdown className=\"Speed-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Speed'} \r\n                                    options={this.state.speed}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Tool-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Tool'} \r\n                                    options={this.state.tool}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <SliderDropdown className=\"Hex-Size-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Hex Size'}\r\n                                    hexSize={this.props.hexSize}\r\n                                    callBack = {(s) => this.props.changeHexSize(s)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Mazes-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Mazes'} \r\n                                    options={this.state.mazes}\r\n                                    callBack = {(id,key,title) => this.props.drawMaze(id)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Clear-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Clear'} \r\n                                    options={this.state.clear}\r\n                                    callBack = {(id,key,title) => this.props.clearBoard(id)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <div className=\"Play-Button-Wrapper\">\r\n                    <div className=\"Play-Button\" onClick={this.props.running\r\n                        ? (clickEvent) => this.props.stopSearch()\r\n                        : (clickEvent) => this.props.startSearch()\r\n                    }>\r\n                        {this.props.running\r\n                            ? <FontAwesomeIcon className=\"pause\" icon={faPause}/>\r\n                            : <FontAwesomeIcon className=\"play\" icon={faPlay}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","//=====================================================================================//\r\n// Constants //\r\n\r\nimport { parseKey } from \"./canvas-tools\";\r\n\r\n//=====================================================================================//\r\nconst DIRECTIONS = {\r\n    even: [\r\n            { i:0  , j:1 },\r\n            { i:-1 , j:0 },\r\n            { i:-1 , j:-1 },\r\n            { i:0  , j:-1 },\r\n            { i:1  , j:-1 },\r\n            { i:1  , j:0 }\r\n    ],\r\n    odd: [\r\n            { i:0  , j:1 },\r\n            { i:-1 , j:1 },\r\n            { i:-1 , j:0 },\r\n            { i:0  , j:-1 },\r\n            { i:1  , j:0 },\r\n            { i:1  , j:1 }\r\n    ]\r\n};\r\n\r\n//=====================================================================================//\r\n// Helper Functions //\r\n//=====================================================================================//\r\n\r\n// Node Functions: node = {i:i,j:j}//\r\n//=================================//\r\nfunction isSameNode(node1,node2) {\r\n    return (node1.i === node2.i && node1.j === node2.j);\r\n};\r\n\r\nfunction nodeInPath(node,path) {\r\n    for (let pathNode of path) {\r\n        if (isSameNode(node,pathNode)) return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nfunction addNodes(node1,node2) {\r\n    return { i:(node1.i + node2.i) , j:(node1.j + node2.j) };\r\n};\r\n\r\nfunction nodeOnBoard(node,xUnits,yUnits) {\r\n    return (node.i>=0 && node.j>=0 && node.i<xUnits && node.j<yUnits);\r\n};\r\n\r\nfunction isValidNode(node,board,xUnits,yUnits) {\r\n    let state = board[[node.i,node.j]];\r\n    let onBoard = nodeOnBoard(node,xUnits,yUnits);\r\n    return (onBoard && state.type !== 'wall');\r\n};\r\n\r\nfunction findNeighbors(node) {\r\n    let neighbors = [];\r\n    let directions;\r\n    if (node.i%2 === 0) directions = DIRECTIONS.even;\r\n    else directions = DIRECTIONS.odd;\r\n    for (let change of directions) {\r\n        let neighbor = addNodes(node,change);\r\n        neighbors.push(neighbor);\r\n    }\r\n    return neighbors;\r\n};\r\n\r\nfunction manhattanDistance(node1,node2) {\r\n    const hexCoord1 = hexCoordinates(node1);\r\n    const hexCoord2 = hexCoordinates(node2);\r\n    const dx = hexCoord2.x - hexCoord1.x;\r\n    const dy = hexCoord2.y - hexCoord1.y;\r\n    if (Math.sign(dx) === Math.sign(dy)) {\r\n        return Math.max(Math.abs(dx), Math.abs(dy));\r\n    }\r\n    return Math.abs(dx) + Math.abs(dy);\r\n};\r\n\r\nfunction hexCoordinates(node) {\r\n    return { x: node.j - floor2(node.i) , y: node.j + ceil2(node.i) };\r\n};\r\n\r\nfunction floor2(x) {\r\n    return ((x >= 0) ? (x >> 1) : (x - 1) / 2);\r\n};\r\n\r\nfunction ceil2(x) {\r\n    return ((x >= 0) ? ((x + 1) >> 1) : x / 2);\r\n}\r\n\r\n// Vectors Functions: v = {x:x,y:y} //\r\n//==================================//\r\nfunction dotProduct(v1,v2) {\r\n    return v1.x*v2.x + v1.y*v2.y;\r\n};\r\n\r\nfunction scalarProd(a,v) {\r\n    return {x:a*v.x , y:a*v.y};\r\n};\r\n\r\nfunction vectorDiff(v1,v2) {\r\n    return {x: v1.x - v2.x, y: v1.y - v2.y};\r\n};\r\n\r\nfunction vectorSum(v1,v2) {\r\n    return {x: v1.x + v2.x, y: v1.y + v2.y};\r\n};\r\n\r\nfunction vectorMag(v) {\r\n    return Math.sqrt((v.x)**2 + (v.y)**2);\r\n};\r\n\r\nfunction vectorOrthoMag(v,V) {\r\n    let b = scalarProd(dotProduct(v,V)/(vectorMag(V))**2, V);\r\n    let d =  vectorDiff(v, b);\r\n    return vectorMag(d);\r\n};\r\n\r\nfunction vectorAngle(v) {\r\n    let angle = Math.atan( v.y / v.x );\r\n    if (v.x < 0) angle += Math.PI;\r\n    return angle;\r\n};\r\n\r\n// Data Structures for Algorithms //\r\n//==================================//\r\nclass minHeap {\r\n    constructor(lessThan) {\r\n        this.heap = [];\r\n        this.lessThan = lessThan\r\n    }\r\n\r\n    length() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    getMin() {\r\n        return this.heap[0];\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        let i = this.heap.length-1;\r\n        while (i > 0) {\r\n            if (this.lessThan(this.heap[i] , this.heap[Math.floor((i-1)/2)])) {\r\n                [ this.heap[Math.floor((i-1)/2)] , this.heap[i] ] = [ this.heap[i] , this.heap[Math.floor((i-1)/2)] ];\r\n                i = Math.floor((i-1)/2);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    shift() {\r\n        const minValue = this.heap.shift();\r\n        if (this.heap.length === 0) return minValue;\r\n        this.heap.unshift(this.heap.pop());\r\n        let i = 0;\r\n        while (2*i+2 < this.heap.length) {\r\n            if (this.lessThan(this.heap[2*i+1], this.heap[i]) || this.lessThan(this.heap[2*i+2], this.heap[i])) {\r\n                if (this.lessThan(this.heap[2*i+1], this.heap[2*i+2])) {\r\n                    [ this.heap[2*i+1], this.heap[i] ] = [ this.heap[i] , this.heap[2*i+1] ];\r\n                    i = 2*i + 1;\r\n                } else {\r\n                    [ this.heap[2*i+2], this.heap[i] ] = [ this.heap[i] , this.heap[2*i+2] ];\r\n                    i = 2*i + 2;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return minValue;\r\n    }\r\n};\r\n\r\nclass disjointSet {\r\n    constructor() {\r\n        this.dictionary = {};\r\n    }\r\n\r\n    makeSet(x) {\r\n        if (this.dictionary.hasOwnProperty(x)) return;\r\n        else {\r\n            this.dictionary[x] = {\r\n                parent: x,\r\n                size: 1\r\n            }\r\n        }\r\n    }\r\n\r\n    find(y) {\r\n        // using path splitting to improve performance\r\n        let x = y;\r\n        while (this.dictionary[x].parent !== x) {\r\n            let parent = this.dictionary[x].parent;\r\n            let grandparent = this.dictionary[parent].parent;\r\n            [ x , this.dictionary[x].parent ] = [ parent , grandparent ];\r\n        }\r\n        return x;\r\n    }\r\n\r\n    union(x,y) {\r\n        // using size, again to improve performance\r\n        let xRoot = this.find(x);\r\n        let yRoot = this.find(y);\r\n        if (xRoot === yRoot) return;\r\n        if (this.dictionary[xRoot].size < this.dictionary[yRoot]) {\r\n            [ xRoot , yRoot ] = [ yRoot , xRoot ];\r\n        }\r\n        this.dictionary[yRoot].parent = xRoot;\r\n        this.dictionary[xRoot].size += this.dictionary[yRoot].size;\r\n    }\r\n};\r\n\r\nfunction shuffleArray(array) {\r\n    let arrayCopy = array.slice();\r\n    for (let i = arrayCopy.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arrayCopy[i], arrayCopy[j]] = [arrayCopy[j], arrayCopy[i]];\r\n    }\r\n    return arrayCopy;\r\n};\r\n\r\nfunction getRandomNode(xUnits,yUnits,offLimitsSet) {\r\n    let randomNode;\r\n    do {\r\n        randomNode = Math.floor(Math.random()*xUnits)+','+Math.floor(Math.random()*yUnits);\r\n    } while (offLimitsSet.has(randomNode));\r\n    return randomNode;\r\n};\r\n\r\nfunction getRandomWallNode(xUnits,yUnits,offLimitsSet) {\r\n    let randomNode;\r\n    do {\r\n        if (Math.random() < .5) {\r\n            if (Math.random() < .5) {\r\n                randomNode = 0+','+Math.floor(Math.random()*yUnits);\r\n            } else {\r\n                randomNode = (xUnits-1)+','+Math.floor(Math.random()*yUnits);\r\n            }\r\n        } else {\r\n            if (Math.random() < .5) {\r\n                randomNode = Math.floor(Math.random()*xUnits)+','+0;\r\n            } else {\r\n                randomNode = Math.floor(Math.random()*xUnits)+','+(yUnits-1);\r\n            }\r\n        }\r\n    } while (offLimitsSet.has(randomNode));\r\n    return randomNode;\r\n};\r\n\r\nfunction getRandomNeighbor(node,xUnits,yUnits) {\r\n    let neighbors = findNeighbors(parseKey(node))\r\n                    .filter((node) => nodeOnBoard(node,xUnits,yUnits))\r\n                    .map((node) => (node.i+','+node.j));\r\n    return neighbors[Math.floor(Math.random()*neighbors.length)];\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Exports //\r\n//=====================================================================================//\r\nexport {isSameNode, nodeInPath, addNodes, nodeOnBoard, isValidNode, findNeighbors, manhattanDistance};      // node functions\r\nexport {dotProduct, scalarProd, vectorDiff, vectorSum, vectorMag, vectorOrthoMag, vectorAngle};             // vector functions\r\nexport {minHeap, disjointSet, shuffleArray, getRandomNode, getRandomWallNode, getRandomNeighbor};                              // algorithm data structures\r\n","import {isSameNode, nodeOnBoard, manhattanDistance, scalarProd, vectorSum, vectorDiff} from './utils';\r\n\r\n//=====================================================================================//\r\n// Canvas Mouse and Touch Trackers for Drawing and Manipulating Board //\r\n//=====================================================================================//\r\nfunction onMouseDown(downEvent,state,canvasRef,setState) {\r\n    if (downEvent.button !== 0) return;\r\n    let canvas = canvasRef.current;\r\n    let node = getPointerNode(downEvent,canvas,state.s,state.xOffset,state.yOffset);\r\n    let origNode = node;\r\n    let onMove, onMoveType;\r\n    if (isSameNode(node,state.startNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) =>\r\n        moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 1;\r\n    } else if (isSameNode(node,state.targetNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) => \r\n        moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 2;\r\n    } else {\r\n        drawLine(node,node,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        onMove = (startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) => \r\n        drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits);\r\n        onMoveType = 0;\r\n    }\r\n    let move = (moveEvent) => {\r\n        if (moveEvent.buttons === 0) {\r\n            canvas.removeEventListener(\"mousemove\", move);\r\n            let board = {};\r\n            if (onMoveType === 1) {\r\n                let oldStart = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n                let newStart = {[[node.i,node.j]]: {node:node,type:'start',fill:'white',object:'start'}};\r\n                Object.assign(board, state.board, oldStart, newStart);\r\n                setState({board:board});\r\n            } else if (onMoveType === 2) {\r\n                let oldTarget = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n                let newTarget = {[[node.i,node.j]]: {node:node,type:'target',fill:'white',object:'target'}};\r\n                Object.assign(board, state.board, oldTarget, newTarget);\r\n                setState({board:board});\r\n            }\r\n        } else {\r\n            let newNode = getPointerNode(moveEvent,canvas,state.s,state.xOffset,state.yOffset);\r\n            if (isSameNode(newNode,node)) return;\r\n            if ( \r\n                    (onMoveType !== 0 && !nodeOnBoard(newNode,state.xUnits,state.yUnits))\r\n                ||  (onMoveType === 1 && isSameNode(newNode,state.targetNode))\r\n                ||  (onMoveType === 2 && isSameNode(newNode,state.startNode))\r\n            ) return;\r\n            onMove(node,newNode,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n                (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n            node = newNode;\r\n        }\r\n    };\r\n    canvas.addEventListener(\"mousemove\", move);\r\n};\r\n\r\n\r\nfunction onTouchStart(startEvent,state,canvasRef,setState) {\r\n    let canvas = canvasRef.current;\r\n    let node = getPointerNode(startEvent.touches[0],canvas,state.s,state.xOffset,state.yOffset);\r\n    let origNode = node;\r\n    let onMove, onMoveType;\r\n    if (isSameNode(node,state.startNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) =>\r\n        moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 1;\r\n    } else if (isSameNode(node,state.targetNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) => \r\n        moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 2;\r\n    } else {\r\n        drawLine(node,node,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        onMove = (startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) => \r\n        drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits);\r\n        onMoveType = 0;\r\n    }\r\n    let move = (moveEvent) => {\r\n        let newNode = getPointerNode(moveEvent.touches[0],canvas,state.s,state.xOffset,state.yOffset);\r\n        if (isSameNode(newNode,node)) return;\r\n        if ( \r\n                (onMoveType !== 0 && !nodeOnBoard(newNode,state.xUnits,state.yUnits))\r\n            ||  (onMoveType === 1 && isSameNode(newNode,state.targetNode))\r\n            ||  (onMoveType === 2 && isSameNode(newNode,state.startNode))\r\n        ) return;\r\n        onMove(node,newNode,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        node = newNode;\r\n    };\r\n    let end = (endEvent) => {\r\n        canvas.removeEventListener(\"touchmove\", move);\r\n        canvas.removeEventListener(\"touchend\", end);\r\n        let board = {};\r\n        if (onMoveType === 1) {\r\n            let oldStart = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n            let newStart = {[[node.i,node.j]]: {node:node,type:'start',fill:'white',object:'start'}};\r\n            Object.assign(board, state.board, oldStart, newStart);\r\n            setState({board:board});\r\n        } else if (onMoveType === 2) {\r\n            let oldTarget = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n            let newTarget = {[[node.i,node.j]]: {node:node,type:'target',fill:'white',object:'target'}};\r\n            Object.assign(board, state.board, oldTarget, newTarget);\r\n            setState({board:board});\r\n        }\r\n    }\r\n    canvas.addEventListener(\"touchmove\", move);\r\n    canvas.addEventListener(\"touchend\", end);\r\n};\r\n\r\n//=====================================================================================//\r\n// Canvas Tools //\r\n//=====================================================================================//\r\nfunction drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) {\r\n    // Initialize object for storing updates to the canvas\r\n    let canvasUpdates = {};\r\n    // Get Manhatton Distance from startNode to endNode\r\n    const N = manhattanDistance(startNode,endNode);\r\n    //Get equation of line from startNode to endNode\r\n    const [ startPos , endPos ] = [ calcHexCenter(startNode,s,xOffset,yOffset) , calcHexCenter(endNode,s,xOffset,yOffset) ];\r\n    const V = vectorDiff(endPos,startPos);\r\n    const line = (n) => {\r\n        if (N === 0) return startPos;\r\n        else return vectorSum( scalarProd(n/N,V) , startPos );\r\n    }\r\n    // Sample N+1 points along line and fill in hexs these points lie in; however, break the loop if we go off the board\r\n    // Also don't fill in the node if it is the startNode or targetNode\r\n    for (let n = 0; n <= N; n++) {\r\n        const pos = line(n);\r\n        const node = nearestHex(pos,s,xOffset,yOffset);\r\n        //console.log(n);\r\n        //console.log(pos);\r\n        //console.log(node);\r\n        if (!nodeOnBoard(node,xUnits,yUnits)) break;\r\n        if (isSameNode(node,state.startNode) || isSameNode(node,state.targetNode)) continue;\r\n        // Fill in hex according to selected tool\r\n        if (state.tool === 0 && state.board[[node.i,node.j]].type !== 'wall') {\r\n            Object.assign(canvasUpdates, {[[node.i,node.j]]: {node:node,type:'wall',fill:'#282c34',object:null,angle:null}});\r\n        } else if (state.tool === 1 && state.board[[node.i,node.j]].type !== 'weight') {\r\n            Object.assign(canvasUpdates, {[[node.i,node.j]]: {node:node,type:'weight',fill:'white',object:'weight',angle:null}});\r\n        } else if (state.tool === 2 && state.board[[node.i,node.j]].type !== 'empty') {\r\n            Object.assign(canvasUpdates, {[[node.i,node.j]]: {node:node,type:'empty',fill:'white',object:null,angle:null}});\r\n        }\r\n    }\r\n    // Update state\r\n    setState((prevState) => {\r\n        return {\r\n                    board: Object.assign({},prevState.board,canvasUpdates),\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\n// Old drawLine. Not quite as efficient as new one, or easy to understand\r\n/*\r\nfunction drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) {\r\n    // Setting start of path\r\n    let currentNode = startNode;\r\n    let V = nodeDistance(endNode,startNode,s,xOffset,yOffset);\r\n    // Fill start if not off board and not start/target node\r\n    let canvasUpdates = {};\r\n    if (nodeOnBoard(currentNode,xUnits,yUnits) &&  !isSameNode(currentNode,state.startNode) &&  !isSameNode(currentNode,state.targetNode)\r\n    ) {\r\n        // might be a problem that currentNode changes over time\r\n        if (state.tool === 0) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'wall',fill:'#282c34',object:null}});\r\n        } else if (state.tool === 1) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'weight',fill:'white',object:'weight'}});\r\n        } else if (state.tool === 2) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'empty',fill:'white',object:null}});\r\n        }\r\n    }\r\n    // Looping over path\r\n    while (!isSameNode(currentNode,endNode)) {\r\n        // Reset minDis\r\n        let minDis = Infinity;\r\n        // Find next hex to move to by looping over adjacent hexs\r\n        let neighbors = findNeighbors(currentNode);\r\n        let tempNode = Object.assign({},currentNode);\r\n        for (let neighbor of neighbors) {\r\n            let v = nodeDistance(neighbor,tempNode,s,xOffset,yOffset);\r\n            let dotProd = dotProduct(v,V);\r\n            if (dotProd >= 0) {\r\n                v = nodeDistance(neighbor,startNode,s,xOffset,yOffset);\r\n                let currentDis = vectorOrthoMag(v,V);\r\n                if (currentDis < minDis) {\r\n                    currentNode = neighbor;\r\n                    minDis = currentDis;\r\n                }\r\n            }\r\n        }\r\n        // If next hex off board then end path\r\n        if (!nodeOnBoard(currentNode,xUnits,yUnits)) break;\r\n        // Fill next hex unless it is start or target node\r\n        else if (!isSameNode(currentNode,state.startNode) && !isSameNode(currentNode,state.targetNode)) {\r\n            // might be a problem that currentNode changes over time\r\n            if (state.tool === 0) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'wall',fill:'#282c34',object:null}});\r\n            } else if (state.tool === 1) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'weight',fill:'white',object:'weight'}});\r\n            } else if (state.tool === 2) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'empty',fill:'white',object:null}});\r\n            }\r\n        }\r\n    }\r\n    // Update state\r\n    setState((prevState) => {\r\n        return {\r\n                    board: Object.assign({},prevState.board,canvasUpdates),\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n*/\r\n\r\nfunction moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) {\r\n    let angle = 0;\r\n    if (state.xUnits > state.yUnits) angle = -Math.PI/2;\r\n    let canvasUpdates = {[[newNode.i,newNode.j]]: {node:newNode,type:'start',fill:'white',object:'start',angle:angle}};             \r\n    const oldState = Object.assign({}, state.board[[oldNode.i,oldNode.j]]);\r\n    if (oldState.type === 'start') {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: {node:oldNode,type:'empty',fill:'white',object:null}});\r\n    } else {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: oldState});\r\n    }\r\n    setState((prevState) => {\r\n        return {\r\n                    startNode: newNode,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) {\r\n    let canvasUpdates = {[[newNode.i,newNode.j]]: {node:newNode,type:'target',fill:'white',object:'target'}};             \r\n    const oldState = Object.assign({}, state.board[[oldNode.i,oldNode.j]]);\r\n    if (oldState.type === 'target') {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: {node:oldNode,type:'empty',fill:'white',object:null}});\r\n    } else {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: oldState});\r\n    }\r\n    setState((prevState) => {\r\n        return {\r\n                    targetNode: newNode,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction clearBoard(id,canvasRef,state,setState) {\r\n    if (id === 0) {\r\n        let canvas = canvasRef.current;\r\n        let cx = canvas.getContext('2d');\r\n        cx.clearRect(0,0,canvas.width,canvas.height);\r\n        let [board, startNode, targetNode] = initializeBoard(canvas.width, canvas.height, state.s);\r\n        setState((prevState) => {\r\n            return {\r\n                        board: board, \r\n                        startNode: startNode, \r\n                        targetNode: targetNode, \r\n                        canvasUpdates: board,\r\n                        updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    } else if (id === 4) {\r\n        let canvas = canvasRef.current;\r\n        let cx = canvas.getContext('2d');\r\n        cx.clearRect(0,0,canvas.width,canvas.height);\r\n        let { innerWidth: width, innerHeight: height } = window\r\n        let canvasHeight;\r\n        if (width < 481 || height < 481)  {\r\n            if ( width > height) canvasHeight = height*.85;\r\n            else canvasHeight = height*.8;\r\n        }\r\n        else canvasHeight = height*.9-4;\r\n        let canvasWidth = width;\r\n        let {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset} = initializeCanvas(canvasWidth,canvasHeight,state.s);\r\n        // Setting Initial State\r\n        setState((prevState) => {\r\n            return {\r\n                canvasWidth: canvasWidth,\r\n                canvasHeight: canvasHeight,\r\n                board: board,\r\n                startNode: startNode,\r\n                targetNode: targetNode,\r\n                xUnits: xUnits,\r\n                yUnits: yUnits,\r\n                xOffset: xOffset,\r\n                yOffset: yOffset,\r\n                canvasUpdates: board,\r\n                updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    } else {\r\n        let canvasUpdates = {};\r\n        if (id === 1) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (!['white','#282c34'].includes(currentState.fill)) {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{fill:'white'});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n            Object.assign(canvasUpdates, {[[state.targetNode.i,state.targetNode.j]]: state.board[[state.targetNode.i,state.targetNode.j]]});\r\n        } else if (id === 2) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (currentState.type === 'wall') {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{type:'empty',fill:'white',object:null});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        } else if (id === 3) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (currentState.type === 'weight') {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{type:'empty',fill:'white',object:null});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        board: Object.assign({},prevState.board,canvasUpdates), \r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    }\r\n};\r\n\r\nfunction doTheJohnWall(state,setState) {\r\n    let canvasUpdates = {};\r\n    for (let key in state.board) {\r\n        Object.assign(canvasUpdates, {[key]: {node:parseKey(key), type:'wall', fill:'#282c34'}});\r\n    }\r\n    Object.assign(canvasUpdates, {[[state.startNode.i,state.startNode.j]]: state.board[[state.startNode.i,state.startNode.j]]});\r\n    Object.assign(canvasUpdates, {[[state.targetNode.i,state.targetNode.j]]: state.board[[state.targetNode.i,state.targetNode.j]]});\r\n    setState((prevState) => {\r\n        return {\r\n                    board: canvasUpdates, \r\n                    canvasUpdates: canvasUpdates,\r\n                    updateID: prevState.updateID + 1\r\n        };\r\n    });\r\n};\r\n\r\nfunction lightWeightBaby(state,setState) {\r\n    let canvasUpdates = {};\r\n    for (let key in state.board) {\r\n        Object.assign(canvasUpdates, {[key]: {node:parseKey(key), type:'weight', fill:'white', object:'weight'}});\r\n    }\r\n    Object.assign(canvasUpdates, {[[state.startNode.i,state.startNode.j]]: state.board[[state.startNode.i,state.startNode.j]]});\r\n    Object.assign(canvasUpdates, {[[state.targetNode.i,state.targetNode.j]]: state.board[[state.targetNode.i,state.targetNode.j]]});\r\n    setState((prevState) => {\r\n        return {\r\n                    board: canvasUpdates, \r\n                    canvasUpdates: canvasUpdates,\r\n                    updateID: prevState.updateID + 1\r\n        };\r\n    });\r\n}\r\n\r\n//=====================================================================================//\r\n// Basic Drawing Functions //\r\n//=====================================================================================//\r\nfunction drawSearch(node,s,lineWidth,xOffset,yOffset,canvasRef,board,color) {\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    let state = board[[node.i,node.j]];\r\n    sleep(0).then(() => {\r\n        if (state === 'weight') {\r\n            drawWeight(pos,s,lineWidth,canvasRef,color);\r\n        } else {\r\n            fillHex(pos,s,color,canvasRef);\r\n            drawHex(pos,s,lineWidth,canvasRef)\r\n        }\r\n    });\r\n};\r\n\r\nfunction drawWeight(node,s,lineWidth,xOffset,yOffset,canvasRef){\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    let sideLength = s*.9;\r\n    let h = sideLength;\r\n    let w1 = sideLength;\r\n    let w2 = 1.5*sideLength;\r\n    let rw = sideLength*.18;\r\n    let r1 = sideLength*.33;\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    // draw trapezoid\r\n    let path = [\r\n                    {x:w1/2  , y:-h/2},\r\n                    {x:-w1/2 , y:-h/2},\r\n                    {x:-w2/2 , y:h/2},\r\n                    {x:w2/2  , y:h/2}\r\n    ]\r\n    cx.beginPath();\r\n    cx.fillStyle = 'black';\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i = 1; i < path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n    // draw ring\r\n    cx.beginPath();\r\n    let ringCenter = {x:pos.x, y:pos.y - h/2};\r\n    cx.lineWidth = rw;\r\n    cx.arc(ringCenter.x, ringCenter.y, r1, 0, 7);\r\n    cx.stroke();\r\n};\r\n\r\nfunction drawStart(startNode,s,xOffset,yOffset,canvasRef,angle) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    const r = .85;\r\n    const a = s*Math.sqrt(3)*r/2;\r\n    const b = a/1.3;\r\n    const c = a/2.6;\r\n    let path = [\r\n                { x:a    ,  y:0},\r\n                { x:-2*c ,  y:b},\r\n                { x:-c   ,  y:0},\r\n                { x:-2*c ,  y:-b}\r\n    ];\r\n    if (angle) {\r\n        for (let i=0; i<path.length; i++) {\r\n            let oldPos = path[i];\r\n            let newPos = {\r\n                x: oldPos.x*Math.cos(angle) - oldPos.y*Math.sin(angle),\r\n                y: oldPos.x*Math.sin(angle) + oldPos.y*Math.cos(angle)\r\n            }\r\n            path[i] = newPos;\r\n        }\r\n    }\r\n    let pos = calcHexCenter(startNode,s,xOffset,yOffset);\r\n    cx.fillStyle = 'black';\r\n    cx.beginPath();\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction drawStartPos(pos,s,canvasRef,angle) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    const r = .85;\r\n    const a = s*Math.sqrt(3)*r/2;\r\n    const b = a/1.3;\r\n    const c = a/2.6;\r\n    let path = [\r\n                { x:a    ,  y:0},\r\n                { x:-2*c ,  y:b},\r\n                { x:-c   ,  y:0},\r\n                { x:-2*c ,  y:-b}\r\n    ];\r\n    if (angle) {\r\n        for (let i=0; i<path.length; i++) {\r\n            let oldPos = path[i];\r\n            let newPos = {\r\n                x: oldPos.x*Math.cos(angle) - oldPos.y*Math.sin(angle),\r\n                y: oldPos.x*Math.sin(angle) + oldPos.y*Math.cos(angle)\r\n            }\r\n            path[i] = newPos;\r\n        }\r\n    }\r\n    cx.fillStyle = 'black';\r\n    cx.beginPath();\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction drawTarget(targetNode,s,lineWidth,xOffset,yOffset,canvasRef) {\r\n    const sideLength = s;\r\n    let pos = calcHexCenter(targetNode,s,xOffset,yOffset);\r\n    // Outer Ring\r\n    fillHex(pos,sideLength,'#b22222',canvasRef);\r\n    // White Fill\r\n    fillHex(pos,sideLength*2/3 - lineWidth/2,'white',canvasRef);\r\n    // Inner Ring\r\n    fillHex(pos,sideLength/3,'#b22222',canvasRef);\r\n    // Remake Border\r\n    drawHex(pos,sideLength,lineWidth,canvasRef);\r\n};\r\n\r\nfunction drawNode(node,s,lineWidth,xOffset,yOffset,color,canvasRef) {\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    fillHex(pos,s,color,canvasRef);\r\n    drawHex(pos,s,lineWidth,canvasRef);\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Helper Functions //\r\n//=====================================================================================//\r\n\r\n// Helpers for Canvas Tools//\r\n//========================================//\r\nfunction drawHex(pos,s,lineWidth,canvasRef) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    let path = calcHexPath(pos,s);\r\n    cx.lineWidth = lineWidth;\r\n    cx.beginPath();\r\n    cx.moveTo(path[0].x,path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(path[i].x,path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.stroke();\r\n};\r\n\r\nfunction fillHex(pos,s,color,canvasRef) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    cx.fillStyle = color;\r\n    let path = calcHexPath(pos,s);\r\n    cx.beginPath();\r\n    cx.moveTo(path[0].x, path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(path[i].x,path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nfunction getPointerNode(event,domNode,s,xOffset,yOffset) {\r\n    let rect = domNode.getBoundingClientRect();\r\n    let x = event.clientX - rect.left;\r\n    let y = event.clientY - rect.top;\r\n    return nearestHex({x:x,y:y},s,xOffset,yOffset);\r\n};\r\n\r\n// Functions That Peform Grid Calculations//\r\n//========================================//\r\nfunction calcHexCenter(node,s,xOffset,yOffset) {\r\n    const x = xOffset + (node.j + 1 - ((node.i+1)%2)/2)*s*Math.sqrt(3);\r\n    const y = yOffset + (1.5*node.i + 1)*s\r\n    return {x:x, y:y};\r\n};\r\n\r\nfunction nodeDistance(node1,node2,s,xOffset,yOffset) {\r\n    let pos1 = calcHexCenter(node1,s,xOffset,yOffset);\r\n    let pos2 = calcHexCenter(node2,s,xOffset,yOffset);\r\n    return {x:(pos1.x - pos2.x) , y:(pos1.y - pos2.y)};\r\n};\r\n\r\nfunction nearestHex(pos,s,xOffset,yOffset) {\r\n    const J = Math.floor((pos.x - xOffset)/(s*Math.sqrt(3)));\r\n    const I = Math.floor((pos.y - yOffset)/(1.5*s));\r\n    const u = (pos.x - xOffset)/(s*Math.sqrt(3)) - J;\r\n    const v = 1 - ((pos.y - yOffset)/(1.5*s) - I);\r\n    let i, j;\r\n    if (I%2 === 0) {\r\n        if (u < .5) {\r\n            if (v > (2/3*u + 2/3)) {\r\n                [ i , j ] = [ I-1 , J-1 ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        } else {\r\n            if (v > (-2/3*u + 4/3)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        }\r\n    } else {\r\n        if (u < .5) {\r\n            if (v > (-2/3*u + 1)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J-1 ];\r\n            }\r\n        } else {\r\n            if (v > (2/3*u + 1/3)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        }\r\n    }\r\n    return {i:i,j:j};\r\n};\r\n\r\nfunction calcHexPath(pos, s) {\r\n    let path = [];\r\n    for (let theta = Math.PI/6; theta < 2*Math.PI; theta += Math.PI/3) {\r\n        const x = pos.x + s*Math.cos(theta);\r\n        const y = pos.y + s*Math.sin(theta);\r\n        path.push({x:x, y:y});\r\n    }\r\n    return path;\r\n};\r\n\r\nfunction calcUnits(canvasWidth, canvasHeight, s) {\r\n    /*\r\n    const xUnits = Math.floor(canvasHeight/(1.5*s) - .5);\r\n    const yUnits = Math.floor(canvasWidth/(s*Math.sqrt(3)) - .5);\r\n    const xOffset = (canvasWidth - (yUnits + .5)*s*Math.sqrt(3))/2;\r\n    const yOffset = (canvasHeight - (xUnits*1.5 + .5)*s)/2;\r\n    */\r\n    const xUnits = Math.max(Math.floor((canvasHeight - s/2)/(1.5*s)),1);\r\n    let yUnits, xOffset, yOffset;\r\n    if (xUnits === 1) {\r\n        yUnits = Math.floor(canvasWidth/(s*Math.sqrt(3)));\r\n        xOffset = (canvasWidth - yUnits*s*Math.sqrt(3))/2;\r\n        yOffset = (canvasHeight - xUnits*2*s)/2;\r\n    } else {\r\n        yUnits = Math.floor(canvasWidth/(s*Math.sqrt(3)) - .5);\r\n        xOffset = (canvasWidth - (yUnits + .5)*s*Math.sqrt(3))/2;\r\n        yOffset = (canvasHeight - (xUnits*1.5 + .5)*s)/2;\r\n    }    \r\n    return [xUnits,yUnits,xOffset,yOffset];\r\n};\r\n\r\nfunction initializeBoard(canvasWidth, canvasHeight, s) {   \r\n    let [xUnits,yUnits] = calcUnits(canvasWidth, canvasHeight, s);\r\n    let board = {};\r\n    for (let i = 0; i < xUnits; i++) {\r\n        for (let j = 0; j < yUnits; j++) {\r\n            Object.assign(board, {[[i,j]]: {node:{i:i,j:j}, type:'empty', fill:'white', object:null}})\r\n        }\r\n    }\r\n    let startNode, targetNode, offset;\r\n    if (xUnits > yUnits) {\r\n        offset = Math.floor(xUnits*.25);\r\n        startNode = {i: xUnits-1-offset, j: Math.floor(yUnits/2)};\r\n        targetNode = {i: offset, j: Math.floor(yUnits/2)};\r\n    } else {\r\n        offset = Math.floor(yUnits*.25);\r\n        startNode = {i: Math.floor(xUnits/2), j: offset};\r\n        targetNode = {i: Math.floor(xUnits/2), j: yUnits-1-offset};\r\n    }\r\n    let angle = 0;\r\n    if (xUnits > yUnits) angle = -Math.PI/2;\r\n    Object.assign(board[[startNode.i,startNode.j]], {type: 'start', object:'start', angle:angle});\r\n    Object.assign(board[[targetNode.i,targetNode.j]], {type: 'target', object:'target'});\r\n    return [board, startNode, targetNode];\r\n};\r\n\r\nfunction initializeCanvas(canvasWidth,canvasHeight,s) {\r\n    let [xUnits,yUnits,xOffset,yOffset] = calcUnits(canvasWidth, canvasHeight, s);\r\n    let [board, startNode, targetNode] = initializeBoard(canvasWidth, canvasHeight, s);\r\n    let lineWidth = s/10;\r\n    return {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset,lineWidth};\r\n}\r\n\r\nfunction parseKey(key) {\r\n    let [i,j] = key.split(',').map((item) => parseInt(item));\r\n    return {i:i,j:j};\r\n};\r\n\r\n//=====================================================================================//\r\n// Exports //\r\n//=====================================================================================//\r\nexport {getPointerNode, onMouseDown, onTouchStart}\r\nexport {drawSearch, drawLine, moveStart, moveTarget, clearBoard, doTheJohnWall, lightWeightBaby}\r\nexport {drawWeight, drawStart, drawStartPos, drawTarget, drawNode, drawHex, fillHex};\r\nexport {sleep, calcHexCenter, nodeDistance, nearestHex, calcHexPath, calcUnits, initializeBoard, initializeCanvas, parseKey};","import React from 'react';\r\nimport {initializeBoard, drawWeight, drawStart, drawStartPos, drawTarget, drawNode} from '../utils/canvas-tools';\r\n\r\n/*\r\n// To Do //\r\n//========================================================================================//\r\n-- Make new drawWeight function that takes node as imput instead of pos\r\n\r\n//========================================================================================//\r\n*/\r\n\r\n\r\nclass Canvas extends React.Component {\r\n    componentDidMount() {\r\n        let [board] = initializeBoard(this.props.width, this.props.height, this.props.s);\r\n        for (let key in board) {\r\n            let {node, fill, object, angle} = board[key];\r\n            this.updateNode(node, fill, object, angle);\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        if (nextProps.updateID === this.props.updateID) return false;\r\n        else return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.s !== prevProps.s) {\r\n            let canvas = this.props.canvasRef.current;\r\n            let cx = canvas.getContext('2d');\r\n            cx.clearRect(0,0,this.props.width,this.props.height);\r\n            this.componentDidMount();\r\n        } else {\r\n            for (let key in this.props.canvasUpdates) {\r\n                let {node, fill, object, angle} = this.props.canvasUpdates[key];\r\n                this.updateNode(node, fill, object, angle);\r\n            }\r\n            if (this.props.startPosition) {\r\n                let {pos,angle} = this.props.startPosition;\r\n                drawStartPos(pos,this.props.s,this.props.canvasRef,angle);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateNode(node,fill,object,angle) {\r\n        if (fill) {\r\n            drawNode(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, fill, this.props.canvasRef);\r\n        }\r\n        if (object) {\r\n            if (object === 'weight') {\r\n                drawWeight(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, this.props.canvasRef);\r\n            } else if (object === 'start') {\r\n                drawStart(node, this.props.s, this.props.xOffset, this.props.yOffset, this.props.canvasRef,angle);\r\n            } else if (object === 'target') {\r\n                drawTarget(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, this.props.canvasRef);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas\r\n                ref = {this.props.canvasRef}\r\n                width = {this.props.width}\r\n                height = {this.props.height}\r\n                onMouseDown={this.props.running ? null : (downEvent) => this.props.onMouseDown(downEvent)}\r\n                onTouchStart={this.props.running ? null : (startEvent) => this.props.onTouchStart(startEvent)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;","import {\r\n    isSameNode, nodeOnBoard, isValidNode, findNeighbors, manhattanDistance, minHeap, shuffleArray, getRandomNode,\r\n    getRandomWallNode, getRandomNeighbor, disjointSet\r\n} from './utils';\r\nimport { parseKey } from './canvas-tools';\r\n\r\n\r\n//=================================================================================================================================//\r\n// Path-Finding Algorithms //\r\n//=================================================================================================================================//\r\n\r\n\r\n// Unweighted Algorithms //\r\n//=======================//\r\nfunction depthFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.unshift(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction breadthFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.push(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction hillClimbing(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // sort nodes according to distance to target node (descending)\r\n        neighbors.sort((node1,node2) => manhattanDistance(node2,targetNode) - manhattanDistance(node1,targetNode));\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.unshift(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction beamSearch(startNode,targetNode,xUnits,yUnits,board, w = 2) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // sort nodes according to distance to target node (descending)\r\n        neighbors.sort((node1,node2) => manhattanDistance(node2,targetNode) - manhattanDistance(node1,targetNode));\r\n        // filter to valid nodes and keep only the first w number of them\r\n        neighbors = neighbors.filter(\r\n            (node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j))\r\n        ).slice(-w);\r\n        for (let newNode of neighbors) {\r\n            let newPath = currentPath.concat([newNode]);\r\n            // if we found target return the completed path and updates, else add path extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.push(newPath);\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction bestFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:manhattanDistance(startNode,targetNode) , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = path.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.insert({distance:manhattanDistance(newNode,targetNode) , path:newPath});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\n\r\n// Weighted Algorithms //\r\n//=====================//\r\n// Dictionary below determines relative weight moving from one node to another.\r\n// Essentially moving through a weight is 10 times as difficult as an empty node.\r\nconst pathWeights = {'empty':1, 'weight':10, 'target':1};\r\n\r\nfunction branchNBound(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    let bestDistance = Infinity;\r\n    let bestPath = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if newDistance is not less than the bestDistance to the target so far, then drop the path from the queue\r\n            if (newDistance >= bestDistance) {\r\n                if (!isSameNode(newNode,targetNode)) {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                }\r\n                continue;\r\n            };\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                [bestPath, bestDistance] = [newPath, newDistance];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({distance:newDistance , path:newPath});\r\n            }\r\n        }\r\n    }\r\n    // Return best path (which could be empty if no path found) and searchUpdates for animation\r\n    return [bestPath, searchUpdates];\r\n};\r\n\r\nfunction aStarSearch(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.estimatedDistance < path2.estimatedDistance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({estimatedDistance:manhattanDistance(startNode,targetNode), distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                // extend other paths to be sure they aren't actually closer to the target (not sure about this part)\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({\r\n                    estimatedDistance: newDistance + manhattanDistance(newNode,targetNode), \r\n                    distance:newDistance, \r\n                    path:newPath\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\n\r\n//=================================================================================================================================//\r\n// Maze Building Algorithms //\r\n//=================================================================================================================================//\r\nfunction randomWalls(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iterate over whole board and randomly generate walls (with P(wall) = .50)\r\n    for (let key in board) {\r\n        let node = parseKey(key);\r\n        if (isSameNode(node,startNode) || isSameNode(node,targetNode)) continue;\r\n        if (Math.random() < .45) {\r\n            mazePath.push({node:node, type:'wall', fill:'#282c34'})\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction randomWeights(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iterate over whole board and randomly generate walls (with P(wall) = .50)\r\n    for (let key in board) {\r\n        let node = parseKey(key);\r\n        if (isSameNode(node,startNode) || isSameNode(node,targetNode)) continue;\r\n        if (Math.random() < .45) {\r\n            mazePath.push({node:node, type:'weight', fill:'white', object:'weight'})\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction depthFirstMaze(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize dictionary of nodes that keeps track of how many times each one was visited\r\n    // each time we check the node, add 1, and if we extend the node set to Infinity\r\n    let visitedNodes = {};\r\n    for (let node in board) {\r\n        visitedNodes[node] = 0;\r\n    }\r\n    // pick starting point at random\r\n    let start = {i: Math.floor(Math.random()*xUnits) , j: Math.floor(Math.random()*yUnits)};\r\n    // initialize queue as array\r\n    let queue = [start];\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iteratively extend path until no more paths are left in the queue\r\n    while (queue.length > 0) {\r\n        // move to next node on the queue\r\n        const currentNode = queue.shift();\r\n        // if the node has already been extended or checked twice, then remove from queue and continue\r\n        // else we extend the node and update visitedNodes and mazePath\r\n        if (visitedNodes[[currentNode.i,currentNode.j]] >= 2) continue;\r\n        visitedNodes[[currentNode.i,currentNode.j]] = Infinity;\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) mazePath.push({node:currentNode, type:'empty', fill:'white'});\r\n        // find the node's neighbors\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to nodes on the board that have not already been extended or checked twice\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(node,xUnits,yUnits) && (visitedNodes[[node.i,node.j]] < 2)));\r\n        // shuffle array to randomize order\r\n        neighbors = shuffleArray(neighbors);\r\n        // initialize array for adding the new nodes to queue (this lets us control the order in case the start or target node are encountered\r\n        // since we want to immediately extend these nodes to ensure a perfect path)\r\n        let nodesToAdd = [];\r\n        for (let node of neighbors) {\r\n            visitedNodes[[node.i,node.j]]++\r\n            if (isSameNode(node,startNode) || isSameNode(node,targetNode)) nodesToAdd.unshift(node);\r\n            else nodesToAdd.push(node);\r\n        }\r\n        queue = nodesToAdd.concat(queue);\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction breadthFirstMaze(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize dictionary of nodes that keeps track of how many times each one was visited\r\n    // each time we check the node, add 1, and if we extend the node set to Infinity\r\n    let visitedNodes = {};\r\n    for (let node in board) {\r\n        visitedNodes[node] = 0;\r\n    }\r\n    // pick starting point at random\r\n    let start = {i: Math.floor(Math.random()*xUnits) , j: Math.floor(Math.random()*yUnits)};\r\n    // initialize queue as array\r\n    let queue = [start];\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iteratively extend path until no more paths are left in the queue\r\n    while (queue.length > 0) {\r\n        // move to next node on the queue\r\n        const currentNode = queue.shift();\r\n        // if the node has already been extended or checked twice, then remove from queue and continue\r\n        // else we extend the node and update visitedNodes and mazePath\r\n        if (visitedNodes[[currentNode.i,currentNode.j]] >= 2) continue;\r\n        visitedNodes[[currentNode.i,currentNode.j]] = Infinity;\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) mazePath.push({node:currentNode, type:'empty', fill:'white'});\r\n        // find the node's neighbors\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to nodes on the board that have not already been extended or checked twice\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(node,xUnits,yUnits) && (visitedNodes[[node.i,node.j]] < 2)));\r\n        // shuffle array to randomize order\r\n        neighbors = shuffleArray(neighbors);\r\n        // add new nodes to queue, putting them at the end unless they are the start or target node (this ensures the start and target always get\r\n        // extended immediately which preserves the perfect maze condition)\r\n        for (let node of neighbors) {\r\n            visitedNodes[[node.i,node.j]]++\r\n            if (isSameNode(node,startNode) || isSameNode(node,targetNode)) queue.unshift(node);\r\n            else queue.push(node);\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction kruskalsMaze(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize list of unvisited nodes which we will visit in a randomized order; however, start and target nodes will be placed at the front to ensure\r\n    // a perfect maze is generated\r\n    let unVisitedNodes = [];\r\n    for (let key in board) {\r\n        if (!isSameNode(parseKey(key),startNode) && !isSameNode(parseKey(key),targetNode)) unVisitedNodes.push(key);\r\n    }\r\n    unVisitedNodes = shuffleArray(unVisitedNodes);\r\n    unVisitedNodes.unshift(startNode.i+','+startNode.j);\r\n    unVisitedNodes.unshift(targetNode.i+','+targetNode.j);\r\n    // initialize set to keep track of nodes added to the path\r\n    let pathNodes = new Set();\r\n    // initialize disjoint set to keep track of the disjoint paths\r\n    let disjointPaths = new disjointSet();\r\n    // lastly initialize array for storing mazePath updates for animation\r\n    let mazePath = [];\r\n    // iteratively look at each node in unVisited nodes, checking to see if it can be added to the path\r\n    for (let currentNode of unVisitedNodes) {\r\n        // get neighboring nodes and convert node to string\r\n        let neighbors = findNeighbors(parseKey(currentNode)).map((node) => (node.i+','+node.j));\r\n        // filter to neighbors that are on the board and are part of a path\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(parseKey(node),xUnits,yUnits) && pathNodes.has(node)));\r\n        // get the roots of each of these neighbors\r\n        let roots = neighbors.map((node) => disjointPaths.find(node));\r\n        // get the unique roots\r\n        let rootsSet = new Set(roots);\r\n        // Condition below guarantees perfect maze, but would not guarantee all paths are joined (and thus not guarantee that there is a path from start to target)\r\n        //if (roots.length !== rootsSet.size) continue;\r\n        // Condition below guarantees all paths are joined, but does not guarantee a perfect maze\r\n        if (roots.length > 1 && rootsSet.size < 2) continue;\r\n        // else we make current node part of the pathNodes and union all the roots\r\n        pathNodes.add(currentNode);\r\n        if (!isSameNode(parseKey(currentNode),startNode) && !isSameNode(parseKey(currentNode),targetNode)) {\r\n            mazePath.push({node:parseKey(currentNode), type:'empty', fill:'white'});\r\n        }\r\n        disjointPaths.makeSet(currentNode);\r\n        for (let node of roots) {\r\n            disjointPaths.union(currentNode,node);\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n}\r\n\r\nfunction primsMaze(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize dictionary of nodes that keeps track of how many times each one was visited\r\n    // each time we check the node, add 1, and if we extend the node set to Infinity\r\n    let visitedNodes = {};\r\n    for (let node in board) {\r\n        visitedNodes[node] = 0;\r\n    }\r\n    // pick starting point at random\r\n    let start = {i: Math.floor(Math.random()*xUnits) , j: Math.floor(Math.random()*yUnits)};\r\n    // initialize queue as array and initialize values for keeping track of start and target nodes\r\n    let queue = [start];\r\n    let [ startFound , targetFound ] = [ false , false ];\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iteratively extend path until no more paths are left in the queue\r\n    while (queue.length > 0) {\r\n        // move to random node on the queue, unless we have encountered the start or target node, in which case move to this node\r\n        // doing so ensures a perfect maze\r\n        let currentNode;\r\n        if (startFound) {\r\n            currentNode = queue.shift();\r\n            startFound = false;\r\n        }\r\n        else if (targetFound) {\r\n            currentNode = queue.shift();\r\n            targetFound = false;\r\n        } else {\r\n            const i = Math.floor(Math.random() * queue.length);\r\n            currentNode = queue[i];\r\n            queue = queue.slice(0,i).concat(queue.slice(i+1));\r\n        }\r\n        // if the node has already been extended or checked twice, then remove from queue and continue\r\n        // else we extend the node and update visitedNodes and mazePath\r\n        if (visitedNodes[[currentNode.i,currentNode.j]] >= 2) continue;\r\n        visitedNodes[[currentNode.i,currentNode.j]] = Infinity;\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) mazePath.push({node:currentNode, type:'empty', fill:'white'});\r\n        // find the node's neighbors\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to nodes on the board that have not already been extended or checked twice\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(node,xUnits,yUnits) && (visitedNodes[[node.i,node.j]] < 2)));\r\n        // add new nodes to queue, putting them at the end unless they are the start or target node (this ensures the start and target always get\r\n        // extended immediately which preserves the perfect maze condition)\r\n        for (let node of neighbors) {\r\n            visitedNodes[[node.i,node.j]]++\r\n            if (isSameNode(node,startNode)) {\r\n                queue.unshift(node);\r\n                startFound = true;\r\n            } else if (isSameNode(node,targetNode)) {\r\n                queue.unshift(node);\r\n                targetFound = true;\r\n            }\r\n            else queue.push(node);\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction huntAndKill(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize dictionary of nodes that keeps track of how many times each one was visited\r\n    // each time we check the node, add 1, and if we extend the node set to Infinity\r\n    let visitedNodes = {};\r\n    for (let node in board) {\r\n        visitedNodes[node] = 0;\r\n    }\r\n    // pick starting point at random\r\n    let start = {i: Math.floor(Math.random()*xUnits) , j: Math.floor(Math.random()*yUnits)};\r\n    // initialize queue as array and initialize variable to determine when to choose new random walk point\r\n    let queue = [start];\r\n    let newRandomWalk = false;\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iteratively extend path until no more paths are left in the queue\r\n    while (queue.length > 0) {\r\n        // move to next node on the queue, unless we determined current path cannot be exteneded, in which case pick random node\r\n        let currentNode;\r\n        if (newRandomWalk) {\r\n            const i = Math.floor(Math.random() * queue.length);\r\n            currentNode = queue[i];\r\n            queue = queue.slice(0,i).concat(queue.slice(i+1));\r\n            newRandomWalk = false;\r\n        } else {\r\n            currentNode = queue.shift();\r\n        }\r\n        // if the node has already been extended or checked twice, then remove from queue and continue\r\n        // else we extend the node and update visitedNodes and mazePath\r\n        if (visitedNodes[[currentNode.i,currentNode.j]] >= 2) continue;\r\n        visitedNodes[[currentNode.i,currentNode.j]] = Infinity;\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) mazePath.push({node:currentNode, type:'empty', fill:'white'});\r\n        // find the node's neighbors\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to nodes on the board that have not already been extended or checked twice\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(node,xUnits,yUnits) && (visitedNodes[[node.i,node.j]] < 2)));\r\n        // shuffle array to randomize order\r\n        neighbors = shuffleArray(neighbors);\r\n        // initialize array for adding the new nodes to queue (this lets us control the order in case the start or target node are encountered\r\n        // since we want to immediately extend these nodes to ensure a perfect path)\r\n        let nodesToAdd = [];\r\n        for (let node of neighbors) {\r\n            visitedNodes[[node.i,node.j]]++\r\n            if (isSameNode(node,startNode) || isSameNode(node,targetNode)) nodesToAdd.unshift(node);\r\n            else nodesToAdd.push(node);\r\n        }\r\n        queue = nodesToAdd.concat(queue);\r\n        if (nodesToAdd.length === 0) newRandomWalk = true;\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction randomDLA(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize sets for keeping track of nodes in the path and neighboring nodes to the path\r\n    let [ pathNodes , pathNeighbors ] = [ new Set() , new Set() ];\r\n    // initialize array for keeping track of canvas updates\r\n    let mazePath = [];\r\n    // initialize brownianNode that randomly drifts around the board, add it to pathNeighbors to esure it is the first node added to th path\r\n    let brownianNode = getRandomNode(xUnits,yUnits,pathNodes);\r\n    pathNeighbors.add(brownianNode);\r\n    // run loop that lets the brownianNode walk randomly around the board\r\n    while (pathNodes.size < (xUnits*yUnits)/8) {\r\n        // updates for when brownianNode comes into contact with path\r\n        if (pathNeighbors.has(brownianNode)) {\r\n            // add node to pathNodes and add neighbors to pathNeighbors\r\n            pathNodes.add(brownianNode);\r\n            let neighbors = findNeighbors(parseKey(brownianNode)).filter((node) => nodeOnBoard(node,xUnits,yUnits));\r\n            for (let neighbor of neighbors) {\r\n                pathNeighbors.add(neighbor.i+','+neighbor.j);\r\n            }\r\n            // add to canvas updates if it is not the start or target node\r\n            if (!isSameNode(parseKey(brownianNode),startNode) && !isSameNode(parseKey(brownianNode),targetNode)) {\r\n                mazePath.push({node:parseKey(brownianNode), type:'empty', fill:'white', object:null});\r\n            }\r\n            // set brownianNode to new random position\r\n            brownianNode = getRandomNode(xUnits,yUnits,pathNodes);\r\n        } else {\r\n            // let brownianNode walk to new neighbor at random\r\n            brownianNode = getRandomNeighbor(brownianNode,xUnits,yUnits);\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\nfunction wallDLA(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize sets for keeping track of nodes in the path and neighboring nodes to the path\r\n    let [ pathNodes , pathNeighbors ] = [ new Set() , new Set() ];\r\n    // initialize array for keeping track of canvas updates\r\n    let mazePath = [];\r\n    // initialize brownianNode that randomly drifts around the board, add it to pathNeighbors to esure it is the first node added to th path\r\n    let brownianNode = getRandomWallNode(xUnits,yUnits,pathNodes);\r\n    pathNeighbors.add(brownianNode);\r\n    // run loop that lets the brownianNode walk randomly around the board\r\n    while (pathNodes.size < (xUnits*yUnits)/6) {\r\n        // updates for when brownianNode comes into contact with path\r\n        if (pathNeighbors.has(brownianNode)) {\r\n            // add node to pathNodes and add neighbors to pathNeighbors\r\n            pathNodes.add(brownianNode);\r\n            let neighbors = findNeighbors(parseKey(brownianNode)).filter((node) => nodeOnBoard(node,xUnits,yUnits));\r\n            for (let neighbor of neighbors) {\r\n                pathNeighbors.add(neighbor.i+','+neighbor.j);\r\n            }\r\n            // add to canvas updates if it is not the start or target node\r\n            if (!isSameNode(parseKey(brownianNode),startNode) && !isSameNode(parseKey(brownianNode),targetNode)) {\r\n                mazePath.push({node:parseKey(brownianNode), type:'empty', fill:'white', object:null});\r\n            }\r\n            // set brownianNode to new random position\r\n            brownianNode = getRandomWallNode(xUnits,yUnits,pathNodes);\r\n        } else {\r\n            // let brownianNode walk to new neighbor at random\r\n            brownianNode = getRandomNeighbor(brownianNode,xUnits,yUnits);\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\n\r\nexport {depthFirst, breadthFirst, hillClimbing, beamSearch, bestFirst, branchNBound, aStarSearch};\r\nexport {randomWalls, randomWeights, depthFirstMaze, breadthFirstMaze, kruskalsMaze, primsMaze, huntAndKill, randomDLA, wallDLA}","import {\r\n    depthFirst, breadthFirst, hillClimbing, beamSearch, bestFirst, branchNBound, aStarSearch,\r\n    randomWalls, randomWeights, depthFirstMaze, breadthFirstMaze, kruskalsMaze, primsMaze, huntAndKill, randomDLA, wallDLA\r\n} from './algorithms';\r\nimport { calcHexCenter, nodeDistance } from './canvas-tools';\r\nimport { scalarProd, vectorSum, vectorDiff, vectorAngle } from './utils';\r\n\r\n\r\n\r\n//=================================================================================================================================//\r\n// Constants //\r\n//=================================================================================================================================//\r\n// mappings for speeds when animating search, drawPath, moveDownPath, victory, and drawMaze\r\nconst searchSpeed = {\r\n    0: 10,\r\n    1: 100,\r\n    2: 1000,\r\n    3: 10000,\r\n    4: Infinity\r\n};\r\nconst drawPathSpeed = {\r\n    0: 5,\r\n    1: 5**2,\r\n    2: 5**3,\r\n    3: 5**4,\r\n    4: Infinity\r\n};\r\nconst moveDownPathSpeed = {\r\n    0: 3,\r\n    1: 3**2,\r\n    2: 3**3,\r\n    3: 3**4,\r\n    4: Infinity\r\n};\r\nconst victorySpeed = {\r\n    0: 1.5*Math.PI,\r\n    1: 2*Math.PI,\r\n    2: 3*Math.PI,\r\n    3: 6*Math.PI,\r\n    4: Infinity\r\n};\r\nconst drawMazeSpeed = {\r\n    0: 6,\r\n    1: 6**2,\r\n    2: 6**3,\r\n    3: 6**4,\r\n    4: Infinity\r\n};\r\n\r\n\r\n//=================================================================================================================================//\r\n// Path-Finding Animations //\r\n//=================================================================================================================================//\r\nfunction pathFinderAnimation(state,canvasRef,setState,isRunning) {\r\n    // Set state to running so user can't interfere with pathFinder \r\n    setState((prevState) => ({\r\n        running: true, \r\n        updateID: prevState.updateID + 1\r\n    }));\r\n    let pathFinder;\r\n    switch (state.algorithm) {\r\n        case 0: pathFinder = depthFirst; break;\r\n        case 1: pathFinder = breadthFirst; break;\r\n        case 2: pathFinder = hillClimbing; break;\r\n        case 3: pathFinder = beamSearch; break;\r\n        case 4: pathFinder = bestFirst; break;\r\n        case 5: pathFinder = branchNBound; break;\r\n        case 6: pathFinder = aStarSearch; break;\r\n        default: pathFinder = breadthFirst;\r\n    };\r\n    let [path, searchUpdates] = pathFinder(state.startNode,state.targetNode,state.xUnits,state.yUnits,state.board);\r\n    searchAnimation(path,searchUpdates,state.s,state.xOffset,state.yOffset,state.speed,state.board,setState,isRunning);\r\n};\r\n\r\nfunction searchAnimation(path,searchUpdates,s,xOffset,yOffset,speed,board,setState,isRunning) {\r\n    let hexsPerSecond = searchSpeed[speed];\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = searchUpdates.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = searchUpdates.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                if (path.length > 0) drawPathAnimation(path,s,xOffset,yOffset,speed,board,setState,isRunning);\r\n                else {\r\n                    setState((prevState) => ({\r\n                        running: false,\r\n                        updateID: prevState.updateID + 1,\r\n                        canvasUpdates: [],\r\n                        startPosition: false\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction drawPathAnimation(path,s,xOffset,yOffset,speed,board,setState,isRunning) {\r\n    let hexsPerSecond = drawPathSpeed[speed];\r\n    let pathUpdates = [];\r\n    for (let node of path.slice(1,-1)) {\r\n        pathUpdates.push(Object.assign({},board[[node.i,node.j]],{fill:'#b1fc40'}));\r\n    }\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = pathUpdates.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = pathUpdates.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                moveDownPathAnimation(path,s,xOffset,yOffset,speed,setState,isRunning);\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction moveDownPathAnimation(path,s,xOffset,yOffset,speed,setState,isRunning) {\r\n    let hexsPerSecond = moveDownPathSpeed[speed];\r\n    const totalSteps = path.length - 1;\r\n    const totalTime = totalSteps / hexsPerSecond * 1000;\r\n    let startTime = null;\r\n    let i = 0;\r\n    function updateAnimation(time) {\r\n        let [ prevStartNode , prevEndNode ] = [ path[i] , path[i+1] ];\r\n        i = Math.floor((time - startTime) / totalTime * totalSteps);\r\n        let pos, angle;\r\n        if (i < totalSteps) {\r\n            let [ startNode , endNode ] = [ path[i] , path[i+1] ];\r\n            let [ startPos , endPos ] = [ calcHexCenter(startNode,s,xOffset,yOffset) , calcHexCenter(endNode,s,xOffset,yOffset) ]\r\n            let V = vectorDiff(endPos,startPos);\r\n            let v = scalarProd((time - startTime) / totalTime * totalSteps - i, V);\r\n            pos = vectorSum(startPos, v);\r\n            angle = vectorAngle(V);\r\n        } else {\r\n            let [ startNode , endNode ] = [ path[path.length-2] , path[path.length-1] ];\r\n            let [ startPos , endPos ] = [ calcHexCenter(startNode,s,xOffset,yOffset) , calcHexCenter(endNode,s,xOffset,yOffset) ]\r\n            let V = vectorDiff(endPos,startPos);\r\n            pos = calcHexCenter(endPos);\r\n            angle = vectorAngle(V);\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        canvasUpdates: [\r\n                            Object.assign({}, prevState.board[[prevStartNode.i,prevStartNode.j]]),\r\n                            Object.assign({},  prevState.board[[prevEndNode.i,prevEndNode.j]])\r\n                        ],\r\n                        startPosition: Object.assign({},{pos:pos,angle:angle}),\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (startTime != null) {\r\n                updateAnimation(time);\r\n            } else {\r\n                startTime = time;\r\n            }\r\n            if ((time - startTime) < totalTime) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                victoryAnimation(path[path.length-1],path[path.length-2],speed,s,xOffset,yOffset,setState,isRunning);\r\n            }\r\n        } else {\r\n            let [ prevStartNode , prevEndNode ] = [ path[i] , path[i+1] ];\r\n            setState((prevState) => {\r\n                return {\r\n                            canvasUpdates: [\r\n                                Object.assign({}, prevState.board[[prevStartNode.i,prevStartNode.j]]),\r\n                                Object.assign({},  prevState.board[[prevEndNode.i,prevEndNode.j]])\r\n                            ],\r\n                            startPosition: false,\r\n                            updateID: prevState.updateID +1\r\n                };\r\n            });\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction victoryAnimation(targetNode,prevNode,speed,s,xOffset,yOffset,setState,isRunning) {\r\n    const radiansPerSecond = victorySpeed[speed];\r\n    const targetPos = calcHexCenter(targetNode,s,xOffset,yOffset);\r\n    const startAngle = vectorAngle(nodeDistance(targetNode,prevNode,s,xOffset,yOffset));\r\n    const totalTime = 6*Math.PI / radiansPerSecond * 1000;\r\n    let startTime = null;\r\n    function updateAnimation(time) {\r\n        let angle;\r\n        if ((time - startTime) < totalTime) {\r\n            angle = startAngle + (time - startTime)/totalTime*6*Math.PI;\r\n        } else {\r\n            angle = startAngle + 6*Math.PI;\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        canvasUpdates: [ Object.assign({}, prevState.board[[targetNode.i,targetNode.j]]) ],\r\n                        startPosition: Object.assign({},{pos:targetPos,angle:angle}),\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (startTime != null) {\r\n                updateAnimation(time);\r\n            } else {\r\n                startTime = time;\r\n            }\r\n            if ((time - startTime) < totalTime) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                setState((prevState) => ({\r\n                    running: false,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: [],\r\n                    startPosition: false\r\n                }));\r\n            }\r\n        } else {\r\n            setState((prevState) => {\r\n                return {\r\n                            canvasUpdates: [ Object.assign({}, prevState.board[[targetNode.i,targetNode.j]]) ],\r\n                            startPosition: false,\r\n                            updateID: prevState.updateID +1\r\n                };\r\n            });\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\n\r\n//=================================================================================================================================//\r\n// Maze-Drawing Animations //\r\n//=================================================================================================================================//\r\nfunction mazeAnimation(mazeID,state,setState,isRunning) {\r\n    // Set state to running so user can't interfere with pathFinder \r\n    setState((prevState) => ({\r\n        running: true, \r\n        updateID: prevState.updateID + 1\r\n    }));\r\n    // Get path array of nodes to fill in for maze\r\n    let mazeBuilder;\r\n    switch (mazeID) {\r\n        case 0: mazeBuilder = randomWalls; break;\r\n        case 1: mazeBuilder = randomWeights; break;\r\n        case 2: mazeBuilder = depthFirstMaze; break;\r\n        case 3: mazeBuilder = breadthFirstMaze; break;\r\n        case 4: mazeBuilder = huntAndKill; break;\r\n        case 5: mazeBuilder = primsMaze; break;\r\n        case 6: mazeBuilder = kruskalsMaze; break;\r\n        case 7: mazeBuilder = randomDLA; break;\r\n        case 8: mazeBuilder = wallDLA; break;\r\n        default: mazeBuilder = depthFirstMaze;\r\n    };\r\n    let mazePath = mazeBuilder(state.startNode,state.targetNode,state.xUnits,state.yUnits,state.board);\r\n    // Set up parameters for animation\r\n    let hexsPerSecond = drawMazeSpeed[state.speed];\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = mazePath.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = mazePath.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                setState((prevState) => ({\r\n                    running: false,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: [],\r\n                    startPosition: false\r\n                }));\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nexport {pathFinderAnimation, mazeAnimation};","import React from 'react';\r\nimport ControlPanel from './ControlPanel';\r\nimport Canvas from './Canvas';\r\nimport {onMouseDown, onTouchStart, clearBoard, doTheJohnWall, lightWeightBaby, initializeCanvas} from '../utils/canvas-tools';\r\nimport {pathFinderAnimation, mazeAnimation} from '../utils/animations';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass PathFinder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let { innerWidth: width, innerHeight: height } = window\r\n        // Set Up Control Panel\r\n        let windowState = this.getWindowState();\r\n        let showControls = {1:false,2:false,3:true}[windowState]\r\n        // Setting Up Canvas\r\n        let canvasHeight;\r\n        if (windowState === 1) canvasHeight = height*.8;\r\n        else if (windowState === 2) canvasHeight = height*.85;\r\n        else canvasHeight = height*.9-4;\r\n        let canvasWidth = width;\r\n        this.canvasRef = React.createRef();\r\n        let s = 15;\r\n        let {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset,lineWidth} = initializeCanvas(canvasWidth,canvasHeight,s);\r\n        // Setting Initial State\r\n        this.state = {\r\n            windowState: this.getWindowState(),\r\n            showControls: showControls,\r\n            algorithm: 5,\r\n            speed: 2,\r\n            tool: 0,\r\n            canvasWidth: canvasWidth,\r\n            canvasHeight: canvasHeight,\r\n            s: s,\r\n            lineWidth: lineWidth,\r\n            board: board,\r\n            startNode: startNode,\r\n            targetNode: targetNode,\r\n            xUnits: xUnits,\r\n            yUnits: yUnits,\r\n            xOffset: xOffset,\r\n            yOffset: yOffset,\r\n            running: false,\r\n            canvasUpdates: [],\r\n            startPosition: false,\r\n            updateID: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', (event) => this.handleResize());\r\n    }\r\n\r\n    handleResize() {\r\n        let windowState = this.getWindowState();\r\n        if (windowState !== this.state.windowState) {\r\n            if ((windowState === 1 || windowState === 2) && (this.state.windowState === 3)) {\r\n                this.setState({windowState:windowState, showControls:false});\r\n            } else if ((windowState === 3) && (this.state.windowState === 1 || this.state.windowState === 2)) {\r\n                this.setState({windowState:windowState, showControls:true});\r\n            } else this.setState({windowState:windowState});\r\n        }\r\n    }\r\n\r\n    getWindowState() {\r\n        let { innerWidth: width, innerHeight: height } = window;\r\n        if (width < 481 || height < 481)  {\r\n            if ( width > height) return 2;\r\n            else return 1;\r\n        } else return 3;\r\n    }\r\n\r\n    toggleSelected(key,id) {\r\n        if (key !== 'clear') {\r\n            this.setState({\r\n                [key]:id\r\n            })\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    toggleControls() {\r\n        this.setState((prevState) => ({showControls: !prevState.showControls}));\r\n    }\r\n\r\n    startPathFinder() {\r\n        // Check to make sure not already running\r\n        if (this.state.running) return;\r\n        const setState = (stateUpdate) => this.setState(stateUpdate);\r\n        const isRunning = () => {return this.state.running;};\r\n        this.clearBoard(1);\r\n        pathFinderAnimation(this.state,this.canvasRef,setState,isRunning);\r\n    }\r\n\r\n    stopPathFinder() {\r\n        this.setState((prevState) => ({running:false, updateID:prevState.updateID+1}));\r\n    }\r\n\r\n    onMouseDown(downEvent) {\r\n        onMouseDown(downEvent,this.state,this.canvasRef,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    onTouchStart(startEvent) {\r\n        // This isn't working in Chrome. Chrome automatically sets scroll event to passive which dissallows preventDefault\r\n        // I could find a way to set event to active, so instead just disabling scroll for canvas in CSS.\r\n        // This however is leading to a bug where scroll gets re-enabled after user uses pinch zoom. No soultion found yet. \r\n        startEvent.preventDefault();\r\n        onTouchStart(startEvent,this.state,this.canvasRef,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    clearBoard(id) {\r\n        if (this.state.running) return;\r\n        clearBoard(id,this.canvasRef,this.state,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    changeHexSize(s) {\r\n        if (this.state.running || s === this.state.s) return;\r\n        this.setState((prevState) => {\r\n            // check that s is not too large\r\n            let hexSize;\r\n            if (prevState.canvasWidth < prevState.canvasHeight) {\r\n                if (prevState.canvasWidth > 1.5*Math.sqrt(3)*s && prevState.canvasHeight > 3.5*s) hexSize = s;\r\n                else hexSize = Math.min(prevState.canvasWidth/(1.5*Math.sqrt(3)),prevState.canvasHeight/(3.5));\r\n            } else {\r\n                if (prevState.canvasWidth > 2*Math.sqrt(3)*s && prevState.canvasHeight > 2*s) hexSize = s;\r\n                else hexSize = Math.min(prevState.canvasWidth/(2*Math.sqrt(3)),prevState.canvasHeight/(2));\r\n            }\r\n            return Object.assign(\r\n                {}, \r\n                initializeCanvas(prevState.canvasWidth,prevState.canvasHeight,hexSize),\r\n                {updateID: prevState.updateID + 1, canvasUpdates: [], s:hexSize}\r\n            );\r\n        });\r\n    }\r\n\r\n    drawMaze(id) {\r\n        if (this.state.running) return;\r\n        const setState = (stateUpdate) => this.setState(stateUpdate);\r\n        const isRunning = () => {return this.state.running;};\r\n        if (id === 0 || id === 1) this.clearBoard(0);\r\n        else if (id === 7 || id === 8) lightWeightBaby(this.state,setState);\r\n        else doTheJohnWall(this.state,setState);\r\n        mazeAnimation(id,this.state,setState,isRunning);\r\n    }\r\n\r\n    render() {\r\n        const algorithmMap = {\r\n            0: \"Depth-First Search\",\r\n            1: \"Breadth-First Search\",\r\n            2: \"Hill Climbing\",\r\n            3: \"Beam Search (\\u03C9=2)\",\r\n            4: \"Best-First Search\",\r\n            5: \"Branch & Bound\",\r\n            6: \"A* Search\"\r\n        };\r\n        return (\r\n            <div className=\"PathFinder\">\r\n                <div className=\"Bars-Wrapper\">\r\n                    <FontAwesomeIcon className=\"bars\" icon={faBars} onClick={(event) => this.toggleControls()}/>\r\n                    <div className=\"Algorithm-Text\">{algorithmMap[this.state.algorithm]}</div>\r\n                </div>\r\n                <ControlPanel\r\n                    windowState={this.state.windowState}\r\n                    showControls={this.state.showControls}\r\n                    running={this.state.running}\r\n                    hexSize={this.state.s}\r\n                    toggleSelected={(key,id) => this.toggleSelected(key,id)}\r\n                    clearBoard={(id) => this.clearBoard(id)}\r\n                    changeHexSize={(s) => this.changeHexSize(s)}\r\n                    drawMaze={(id) => this.drawMaze(id)}\r\n                    startSearch={() => this.startPathFinder()}\r\n                    stopSearch={() => this.stopPathFinder()}\r\n                />\r\n                <Canvas\r\n                    className=\"canvas\"\r\n                    canvasRef={this.canvasRef}\r\n                    width={this.state.canvasWidth}\r\n                    height={this.state.canvasHeight}\r\n                    s={this.state.s}\r\n                    lineWidth={this.state.lineWidth}\r\n                    xOffset={this.state.xOffset}\r\n                    yOffset={this.state.yOffset}\r\n                    canvasUpdates={this.state.canvasUpdates}\r\n                    startPosition={this.state.startPosition}\r\n                    updateID={this.state.updateID}\r\n                    running={this.state.running}\r\n                    onMouseDown={(downEvent) => this.onMouseDown(downEvent)}\r\n                    onTouchStart={(startEvent) => this.onTouchStart(startEvent)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathFinder;","import React from 'react';\nimport PathFinder from './components/PathFinder';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}