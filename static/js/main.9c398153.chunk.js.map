{"version":3,"sources":["components/Dropdown.js","components/SliderDropdown.js","components/ControlPanel.js","utils/utils.js","utils/canvas-tools.js","components/Canvas.js","utils/algorithms.js","utils/animations.js","components/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","state","listOpen","headerTitle","title","options","this","setState","prevState","event","key","toggleList","document","addEventListener","escapeList","backgroundColor","fontColor","windowState","className","onClick","style","color","icon","faAngleUp","size","transform","faAngleDown","map","item","id","callBack","selected","faCheck","React","Component","onClickOutside","SliderDropdown","value","hexSize","target","window","innerWidth","innerHeight","type","orient","min","max","onInput","changeValue","onMouseUp","submitValue","onKeyDown","onTouchEnd","ControlPanel","algorithm","speed","tool","clear","temp","slice","i","length","toggleSelected","showControls","disableOnClickOutside","s","changeHexSize","clearBoard","running","clickEvent","stopSearch","startSearch","faPause","faPlay","DIRECTIONS","j","isSameNode","node1","node2","nodeOnBoard","node","xUnits","yUnits","isValidNode","board","findNeighbors","directions","neighbors","change","neighbor","push","manhattanDistance","hexCoord1","hexCoordinates","hexCoord2","dx","x","dy","y","Math","sign","abs","ceil2","dotProduct","v1","v2","scalarProd","a","v","vectorDiff","vectorMag","sqrt","vectorOrthoMag","V","b","vectorAngle","angle","atan","PI","minHeap","lessThan","heap","floor","minValue","shift","unshift","pop","drawLine","startNode","endNode","lineWidth","xOffset","yOffset","canvasRef","currentNode","nodeDistance","canvasUpdates","targetNode","Object","assign","fill","object","minDis","Infinity","tempNode","currentDis","updateID","moveStart","oldNode","newNode","oldState","moveTarget","drawWeight","pos","calcHexCenter","sideLength","h","w1","w2","rw","r1","cx","current","getContext","path","beginPath","fillStyle","moveTo","lineTo","closePath","ringCenter","arc","stroke","drawHex","calcHexPath","fillHex","getPointerNode","domNode","rect","getBoundingClientRect","J","I","u","nearestHex","clientX","left","clientY","top","pos1","pos2","theta","cos","sin","calcUnits","canvasWidth","canvasHeight","initializeBoard","offset","initializeCanvas","parseKey","split","parseInt","Canvas","width","height","updateNode","nextProps","prevProps","clearRect","componentDidMount","startPosition","c","oldPos","newPos","drawStartPos","drawNode","drawStart","drawTarget","ref","onMouseDown","downEvent","onTouchStart","startEvent","depthFirst","queue","visitedNodes","Set","searchUpdates","currentPath","has","add","newState","newPath","concat","breadthFirst","hillClimbing","sort","beamSearch","w","filter","bestFirst","path1","path2","distance","insert","pathWeights","branchNBound","bestDistance","bestPath","newDistance","aStarSearch","estimatedDistance","searchSpeed","0","1","2","3","4","drawPathSpeed","moveDownPathSpeed","victorySpeed","pathFinderAnimation","isRunning","pathFinder","hexsPerSecond","lastTime","currentStart","steps","totalHexs","requestAnimationFrame","frame","time","start","boardUpdates","update","updateAnimation","pathUpdates","totalSteps","totalTime","startTime","prevStartNode","prevEndNode","startPos","endPos","prevNode","console","log","radiansPerSecond","targetPos","startAngle","victoryAnimation","moveDownPathAnimation","drawPathAnimation","searchAnimation","PathFinder","getWindowState","createRef","handleResize","stateUpdate","button","onMove","onMoveType","canvas","origNode","move","moveEvent","buttons","removeEventListener","oldStart","newStart","oldTarget","newTarget","preventDefault","touches","end","endEvent","currentState","includes","faBars","toggleControls","5","6","startPathFinder","stopPathFinder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c398153.chunk.js","sourcesContent":["import React from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleUp , faAngleDown, faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            options: this.props.options\r\n        }\r\n    }\r\n\r\n    handleClickOutside() {\r\n        this.setState({listOpen: false});\r\n    }\r\n\r\n    toggleList() {\r\n        this.setState(prevState => ({\r\n            listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    escapeList(event) {\r\n        if (this.state.listOpen && event.key === 'Escape') this.toggleList();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown',(event) => this.escapeList(event));\r\n    }\r\n\r\n    render() {\r\n        const {listOpen, headerTitle, options} = this.state;\r\n        let backgroundColor, fontColor;\r\n        if (this.props.windowState === 1 || this.props.windowState === 2) {\r\n            if (listOpen) [ backgroundColor , fontColor ] = ['#27af62' , 'white' ];\r\n            else [ backgroundColor , fontColor ] = [ 'white' , 'black' ];\r\n        } else [ backgroundColor , fontColor ] = [ '#191414' , 'white' ];\r\n        return (\r\n            <div className=\"Dropdown\">\r\n                <div className=\"Dropdown-header-wrapper\">\r\n                    <div className=\"Dropdown-header\" onClick={() => this.toggleList()} style = {{backgroundColor: backgroundColor, color:fontColor}}>\r\n                        <div className=\"Dropdown-header-title\">{headerTitle}</div>\r\n                        {listOpen\r\n                            ? <FontAwesomeIcon className=\"angle-up\" icon={faAngleUp} size=\"lg\" transform=\"down-1\"/>\r\n                            : <FontAwesomeIcon className=\"angle-down\" icon={faAngleDown} size=\"lg\" transform=\"down-1\"/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {listOpen && <ul className={headerTitle+\"-Dropdown-list\"}>\r\n                    {options.map((item) => (\r\n                        <li key={item.id} className=\"Dropdown-list-item\" onClick={() => this.props.callBack(item.id,item.key,item.title)}>\r\n                            {item.title}\r\n                            {item.selected && <FontAwesomeIcon className=\"check\" icon={faCheck} size=\"1x\"/>}\r\n                        </li>\r\n                    ))}\r\n                </ul>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default onClickOutside(Dropdown);","import React from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleUp , faAngleDown} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass SliderDropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            value: this.props.hexSize\r\n        }\r\n    }\r\n\r\n    handleClickOutside() {\r\n        this.setState({\r\n            listOpen: false\r\n        });\r\n    }\r\n\r\n    toggleList() {\r\n        this.setState(prevState => ({\r\n            listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    changeValue(event) {\r\n        this.setState({value:event.target.value});\r\n    }\r\n\r\n    submitValue(event) {\r\n        this.props.callBack(event.target.value);\r\n    }\r\n\r\n    escapeList(event) {\r\n        if (this.state.listOpen && event.key === 'Escape') this.toggleList();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown',(event) => this.escapeList(event));\r\n    }\r\n\r\n    render() {\r\n        let backgroundColor, fontColor;\r\n        if (window.innerWidth < 481 || window.innerHeight < 481) {\r\n            if (this.state.listOpen) [ backgroundColor , fontColor ] = ['#27af62' , 'white' ];\r\n            else [ backgroundColor , fontColor ] = [ 'white' , 'black' ];\r\n        } else [ backgroundColor , fontColor ] = [ '#191414' , 'white' ];\r\n        return (\r\n            <div className=\"Dropdown\">\r\n                <div className=\"Dropdown-header-wrapper\">\r\n                    <div className=\"Dropdown-header\" onClick={() => this.toggleList()} style = {{backgroundColor: backgroundColor, color:fontColor}}>\r\n                        <div className=\"Dropdown-header-title\">{this.state.headerTitle}</div>\r\n                        {this.state.listOpen\r\n                            ? <FontAwesomeIcon className=\"angle-up\" icon={faAngleUp} size=\"lg\" transform=\"down-1\"/>\r\n                            : <FontAwesomeIcon className=\"angle-down\" icon={faAngleDown} size=\"lg\" transform=\"down-1\"/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {this.state.listOpen && <div className={\"SliderDropdown-list\"}>\r\n                    <div className=\"slider-text\">{this.state.value}</div>\r\n                    <input className=\"slider\" type=\"range\" orient=\"vertical\" min=\"5\" max=\"100\"\r\n                        value={this.state.value}\r\n                        onInput={(event) => this.changeValue(event)}\r\n                        onMouseUp={(event) => this.submitValue(event)}\r\n                        onKeyDown={(event) => {if (event.key === \"Enter\") this.submitValue(event);}}\r\n                        onTouchEnd={(event) => this.submitValue(event)}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default onClickOutside(SliderDropdown);","import React from 'react';\r\nimport Dropdown from './Dropdown';\r\nimport SliderDropdown from './SliderDropdown';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay , faPause } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass ControlPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            algorithm: [\r\n                        {id:0, title:'Depth-First Search', selected:false, key:'algorithm'},\r\n                        {id:1, title:'Breadth-First Search', selected:false, key:'algorithm'},\r\n                        {id:2, title:'Hill Climbing', selected:false, key:'algorithm'},\r\n                        {id:3, title:'Beam Search (\\u03C9=2)', selected:false, key:'algorithm'},\r\n                        {id:4, title:'Best-First Search', selected:false, key:'algorithm'},\r\n                        {id:5, title:'Branch & Bound', selected:true, key:'algorithm'},\r\n                        {id:6, title:'A* Search', selected:false, key:'algorithm'}\r\n            ],\r\n            speed: [\r\n                        {id:0, title:'Slow', selected:false, key:'speed'},\r\n                        {id:1, title:'Medium', selected:false, key:'speed'},\r\n                        {id:2, title:'Fast', selected:true, key:'speed'},\r\n                        {id:3, title:'Ludicrous', selected:false, key:'speed'},\r\n                        {id:4, title:'Instant', selected:false, key:'speed'}\r\n            ],\r\n            tool: [\r\n                        {id:0, title:'Walls', selected:true, key:'tool'},\r\n                        {id:1, title:'Weights', selected:false, key:'tool'},\r\n                        {id:2, title:'Eraser', selected:false, key:'tool'}\r\n            ],\r\n            clear: [\r\n                        {id:1, title:'Path', selected:false, key:'clear'},\r\n                        {id:2, title:'Walls', selected:false, key:'clear'},\r\n                        {id:3, title:'Weights', selected:false, key:'clear'},\r\n                        {id:0, title:'Board', selected:false, key:'clear'},\r\n                        {id:4, title:'Canvas', selected:false, key:'clear'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    toggleSelected(id,key,title) {\r\n        if (key !== 'clear') {\r\n            let temp = this.state[key].slice();\r\n            for (let i = 0; i < temp.length; i++) {\r\n                temp[i].selected = (id === temp[i].id);\r\n            }\r\n            this.setState({\r\n                [key]:temp\r\n            });\r\n        }\r\n        this.props.toggleSelected(key,id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ControlPanel\">\r\n                {this.props.showControls &&\r\n                    <div className=\"Controls-Wrapper-Background\">\r\n                        <div className=\"Controls-Wrapper\">\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Algorithm-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Algorithm'} \r\n                                    options={this.state.algorithm}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\"> \r\n                                <Dropdown className=\"Speed-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Speed'} \r\n                                    options={this.state.speed}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Tool-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Tool'} \r\n                                    options={this.state.tool}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <SliderDropdown className=\"Hex-Size-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Hex Size'}\r\n                                    hexSize={this.props.hexSize}\r\n                                    callBack = {(s) => this.props.changeHexSize(s)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Clear-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Clear'} \r\n                                    options={this.state.clear}\r\n                                    callBack = {(id,key,title) => this.props.clearBoard(id)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <div className=\"Play-Button-Wrapper\">\r\n                    <div className=\"Play-Button\" onClick={this.props.running\r\n                        ? (clickEvent) => this.props.stopSearch()\r\n                        : (clickEvent) => this.props.startSearch()\r\n                    }>\r\n                        {this.props.running\r\n                            ? <FontAwesomeIcon className=\"pause\" icon={faPause}/>\r\n                            : <FontAwesomeIcon className=\"play\" icon={faPlay}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","//=====================================================================================//\r\n// Constants //\r\n//=====================================================================================//\r\nconst DIRECTIONS = {\r\n    even: [\r\n            { i:0  , j:1 },\r\n            { i:-1 , j:0 },\r\n            { i:-1 , j:-1 },\r\n            { i:0  , j:-1 },\r\n            { i:1  , j:-1 },\r\n            { i:1  , j:0 }\r\n    ],\r\n    odd: [\r\n            { i:0  , j:1 },\r\n            { i:-1 , j:1 },\r\n            { i:-1 , j:0 },\r\n            { i:0  , j:-1 },\r\n            { i:1  , j:0 },\r\n            { i:1  , j:1 }\r\n    ]\r\n};\r\n\r\n//=====================================================================================//\r\n// Helper Functions //\r\n//=====================================================================================//\r\n\r\n// Node Functions: node = {i:i,j:j}//\r\n//=================================//\r\nfunction isSameNode(node1,node2) {\r\n    return (node1.i === node2.i && node1.j === node2.j);\r\n};\r\n\r\nfunction nodeInPath(node,path) {\r\n    for (let pathNode of path) {\r\n        if (isSameNode(node,pathNode)) return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nfunction addNodes(node1,node2) {\r\n    return { i:(node1.i + node2.i) , j:(node1.j + node2.j) };\r\n};\r\n\r\nfunction nodeOnBoard(node,xUnits,yUnits) {\r\n    return (node.i>=0 && node.j>=0 && node.i<xUnits && node.j<yUnits);\r\n};\r\n\r\nfunction isValidNode(node,board,xUnits,yUnits) {\r\n    let state = board[[node.i,node.j]];\r\n    let onBoard = nodeOnBoard(node,xUnits,yUnits);\r\n    return (onBoard && state.type !== 'wall');\r\n};\r\n\r\nfunction findNeighbors(node) {\r\n    let neighbors = [];\r\n    let directions;\r\n    if (node.i%2 === 0) directions = DIRECTIONS.even;\r\n    else directions = DIRECTIONS.odd;\r\n    for (let change of directions) {\r\n        let neighbor = addNodes(node,change);\r\n        neighbors.push(neighbor);\r\n    }\r\n    return neighbors;\r\n};\r\n\r\nfunction manhattanDistance(node1,node2) {\r\n    const hexCoord1 = hexCoordinates(node1);\r\n    const hexCoord2 = hexCoordinates(node2);\r\n    const dx = hexCoord2.x - hexCoord1.x;\r\n    const dy = hexCoord2.y - hexCoord1.y;\r\n    if (Math.sign(dx) === Math.sign(dy)) {\r\n        return Math.max(Math.abs(dx), Math.abs(dy));\r\n    }\r\n    return Math.abs(dx) + Math.abs(dy);\r\n};\r\n\r\nfunction hexCoordinates(node) {\r\n    return { x: node.j - floor2(node.i) , y: node.j + ceil2(node.i) };\r\n};\r\n\r\nfunction floor2(x) {\r\n    return ((x >= 0) ? (x >> 1) : (x - 1) / 2);\r\n};\r\n\r\nfunction ceil2(x) {\r\n    return ((x >= 0) ? ((x + 1) >> 1) : x / 2);\r\n}\r\n\r\n// Vectors Functions: v = {x:x,y:y} //\r\n//==================================//\r\nfunction dotProduct(v1,v2) {\r\n    return v1.x*v2.x + v1.y*v2.y;\r\n};\r\n\r\nfunction scalarProd(a,v) {\r\n    return {x:a*v.x , y:a*v.y};\r\n};\r\n\r\nfunction vectorDiff(v1,v2) {\r\n    return {x: v1.x - v2.x, y: v1.y - v2.y};\r\n};\r\n\r\nfunction vectorSum(v1,v2) {\r\n    return {x: v1.x + v2.x, y: v1.y + v2.y};\r\n};\r\n\r\nfunction vectorMag(v) {\r\n    return Math.sqrt((v.x)**2 + (v.y)**2);\r\n};\r\n\r\nfunction vectorOrthoMag(v,V) {\r\n    let b = scalarProd(dotProduct(v,V)/(vectorMag(V))**2, V);\r\n    let d =  vectorDiff(v, b);\r\n    return vectorMag(d);\r\n};\r\n\r\nfunction vectorAngle(v) {\r\n    let angle = Math.atan( v.y / v.x );\r\n    if (v.x < 0) angle += Math.PI;\r\n    return angle;\r\n};\r\n\r\n// Data Structures for Algorithms //\r\n//==================================//\r\nclass minHeap {\r\n    constructor(lessThan) {\r\n        this.heap = [];\r\n        this.lessThan = lessThan\r\n    }\r\n\r\n    length() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    getMin() {\r\n        return this.heap[0];\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        let i = this.heap.length-1;\r\n        while (i > 0) {\r\n            if (this.lessThan(this.heap[i] , this.heap[Math.floor((i-1)/2)])) {\r\n                [ this.heap[Math.floor((i-1)/2)] , this.heap[i] ] = [ this.heap[i] , this.heap[Math.floor((i-1)/2)] ];\r\n                i = Math.floor((i-1)/2);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    shift() {\r\n        const minValue = this.heap.shift();\r\n        if (this.heap.length === 0) return minValue;\r\n        this.heap.unshift(this.heap.pop());\r\n        let i = 0;\r\n        while (2*i+2 < this.heap.length) {\r\n            if (this.lessThan(this.heap[2*i+1], this.heap[i]) || this.lessThan(this.heap[2*i+2], this.heap[i])) {\r\n                if (this.lessThan(this.heap[2*i+1], this.heap[2*i+2])) {\r\n                    [ this.heap[2*i+1], this.heap[i] ] = [ this.heap[i] , this.heap[2*i+1] ];\r\n                    i = 2*i + 1;\r\n                } else {\r\n                    [ this.heap[2*i+2], this.heap[i] ] = [ this.heap[i] , this.heap[2*i+2] ];\r\n                    i = 2*i + 2;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return minValue;\r\n    }\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Exports //\r\n//=====================================================================================//\r\nexport {isSameNode, nodeInPath, addNodes, nodeOnBoard, isValidNode, findNeighbors, manhattanDistance};      // node functions\r\nexport {dotProduct, scalarProd, vectorDiff, vectorSum, vectorMag, vectorOrthoMag, vectorAngle};                          // vector functions\r\nexport {minHeap};                                                                                           // algorithm data structures\r\n","import {isSameNode, nodeOnBoard, findNeighbors, dotProduct, vectorOrthoMag} from './utils';\r\n\r\n//=====================================================================================//\r\n// Canvas Mouse and Touch Trackers for Drawing and Manipulating Board //\r\n//=====================================================================================//\r\nfunction onMouseDown(downEvent,state,canvasRef,setState) {\r\n    if (downEvent.button !== 0) return;\r\n    let canvas = canvasRef.current;\r\n    let node = getPointerNode(downEvent,canvas,state.s,state.xOffset,state.yOffset);\r\n    let origNode = node;\r\n    let onMove, onMoveType;\r\n    if (isSameNode(node,state.startNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) =>\r\n        moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 1;\r\n    } else if (isSameNode(node,state.targetNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) => \r\n        moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 2;\r\n    } else {\r\n        drawLine(node,node,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        onMove = (startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) => \r\n        drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits);\r\n        onMoveType = 0;\r\n    }\r\n    let move = (moveEvent) => {\r\n        if (moveEvent.buttons === 0) {\r\n            canvas.removeEventListener(\"mousemove\", move);\r\n            let board = {};\r\n            if (onMoveType === 1) {\r\n                let oldStart = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n                let newStart = {[[node.i,node.j]]: {node:node,type:'start',fill:'white',object:'start'}};\r\n                Object.assign(board, state.board, oldStart, newStart);\r\n                setState({board:board});\r\n            } else if (onMoveType === 2) {\r\n                let oldTarget = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n                let newTarget = {[[node.i,node.j]]: {node:node,type:'target',fill:'white',object:'target'}};\r\n                Object.assign(board, state.board, oldTarget, newTarget);\r\n                setState({board:board});\r\n            }\r\n        } else {\r\n            let newNode = getPointerNode(moveEvent,canvas,state.s,state.xOffset,state.yOffset);\r\n            if (isSameNode(newNode,node)) return;\r\n            if ( \r\n                    (onMoveType !== 0 && !nodeOnBoard(newNode,state.xUnits,state.yUnits))\r\n                ||  (onMoveType === 1 && isSameNode(newNode,state.targetNode))\r\n                ||  (onMoveType === 2 && isSameNode(newNode,state.startNode))\r\n            ) return;\r\n            onMove(node,newNode,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n                (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n            node = newNode;\r\n        }\r\n    };\r\n    canvas.addEventListener(\"mousemove\", move);\r\n};\r\n\r\n\r\nfunction onTouchStart(startEvent,state,canvasRef,setState) {\r\n    // scrolling prevented using CSS instead because I could not find a way to make event listener active\r\n    // startEvent.preventDefault();\r\n    let canvas = canvasRef.current;\r\n    let node = getPointerNode(startEvent.touches[0],canvas,state.s,state.xOffset,state.yOffset);\r\n    let origNode = node;\r\n    let onMove, onMoveType;\r\n    if (isSameNode(node,state.startNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) =>\r\n        moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 1;\r\n    } else if (isSameNode(node,state.targetNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) => \r\n        moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 2;\r\n    } else {\r\n        drawLine(node,node,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        onMove = (startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) => \r\n        drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits);\r\n        onMoveType = 0;\r\n    }\r\n    let move = (moveEvent) => {\r\n        let newNode = getPointerNode(moveEvent.touches[0],canvas,state.s,state.xOffset,state.yOffset);\r\n        if (isSameNode(newNode,node)) return;\r\n        if ( \r\n                (onMoveType !== 0 && !nodeOnBoard(newNode,state.xUnits,state.yUnits))\r\n            ||  (onMoveType === 1 && isSameNode(newNode,state.targetNode))\r\n            ||  (onMoveType === 2 && isSameNode(newNode,state.startNode))\r\n        ) return;\r\n        onMove(node,newNode,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        node = newNode;\r\n    };\r\n    let end = (endEvent) => {\r\n        canvas.removeEventListener(\"touchmove\", move);\r\n        canvas.removeEventListener(\"touchend\", end);\r\n        let board = {};\r\n        if (onMoveType === 1) {\r\n            let oldStart = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n            let newStart = {[[node.i,node.j]]: {node:node,type:'start',fill:'white',object:'start'}};\r\n            Object.assign(board, state.board, oldStart, newStart);\r\n            setState({board:board});\r\n        } else if (onMoveType === 2) {\r\n            let oldTarget = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n            let newTarget = {[[node.i,node.j]]: {node:node,type:'target',fill:'white',object:'target'}};\r\n            Object.assign(board, state.board, oldTarget, newTarget);\r\n            setState({board:board});\r\n        }\r\n    }\r\n    canvas.addEventListener(\"touchmove\", move);\r\n    canvas.addEventListener(\"touchend\", end);\r\n};\r\n\r\n//=====================================================================================//\r\n// Canvas Tools //\r\n//=====================================================================================//\r\nfunction drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) {\r\n    // Setting start of path\r\n    let currentNode = startNode;\r\n    let V = nodeDistance(endNode,startNode,s,xOffset,yOffset);\r\n    // Fill start if not off board and not start/target node\r\n    let canvasUpdates = {};\r\n    if (nodeOnBoard(currentNode,xUnits,yUnits) &&  !isSameNode(currentNode,state.startNode) &&  !isSameNode(currentNode,state.targetNode)\r\n    ) {\r\n        // might be a problem that currentNode changes over time\r\n        if (state.tool === 0) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'wall',fill:'#282c34',object:null}});\r\n        } else if (state.tool === 1) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'weight',fill:'white',object:'weight'}});\r\n        } else if (state.tool === 2) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'empty',fill:'white',object:null}});\r\n        }\r\n    }\r\n    // Looping over path\r\n    while (!isSameNode(currentNode,endNode)) {\r\n        // Reset minDis\r\n        let minDis = Infinity;\r\n        // Find next hex to move to by looping over adjacent hexs\r\n        let neighbors = findNeighbors(currentNode);\r\n        let tempNode = Object.assign({},currentNode);\r\n        for (let neighbor of neighbors) {\r\n            let v = nodeDistance(neighbor,tempNode,s,xOffset,yOffset);\r\n            let dotProd = dotProduct(v,V);\r\n            if (dotProd >= 0) {\r\n                v = nodeDistance(neighbor,startNode,s,xOffset,yOffset);\r\n                let currentDis = vectorOrthoMag(v,V);\r\n                if (currentDis < minDis) {\r\n                    currentNode = neighbor;\r\n                    minDis = currentDis;\r\n                }\r\n            }\r\n        }\r\n        // If next hex off board then end path\r\n        if (!nodeOnBoard(currentNode,xUnits,yUnits)) break;\r\n        // Fill next hex unless it is start or target node\r\n        else if (!isSameNode(currentNode,state.startNode) && !isSameNode(currentNode,state.targetNode)) {\r\n            // might be a problem that currentNode changes over time\r\n            if (state.tool === 0) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'wall',fill:'#282c34',object:null}});\r\n            } else if (state.tool === 1) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'weight',fill:'white',object:'weight'}});\r\n            } else if (state.tool === 2) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'empty',fill:'white',object:null}});\r\n            }\r\n        }\r\n    }\r\n    // Update state\r\n    setState((prevState) => {\r\n        return {\r\n                    board: Object.assign({},prevState.board,canvasUpdates),\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) {\r\n    let angle = 0;\r\n    if (state.xUnits > state.yUnits) angle = -Math.PI/2;\r\n    let canvasUpdates = {[[newNode.i,newNode.j]]: {node:newNode,type:'start',fill:'white',object:'start',angle:angle}};             \r\n    const oldState = Object.assign({}, state.board[[oldNode.i,oldNode.j]]);\r\n    if (oldState.type === 'start') {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: {node:oldNode,type:'empty',fill:'white',object:null}});\r\n    } else {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: oldState});\r\n    }\r\n    setState((prevState) => {\r\n        return {\r\n                    startNode: newNode,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) {\r\n    let canvasUpdates = {[[newNode.i,newNode.j]]: {node:newNode,type:'target',fill:'white',object:'target'}};             \r\n    const oldState = Object.assign({}, state.board[[oldNode.i,oldNode.j]]);\r\n    if (oldState.type === 'target') {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: {node:oldNode,type:'empty',fill:'white',object:null}});\r\n    } else {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: oldState});\r\n    }\r\n    setState((prevState) => {\r\n        return {\r\n                    targetNode: newNode,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction clearBoard(id,canvasRef,state,setState) {\r\n    if (id === 0) {\r\n        let canvas = canvasRef.current;\r\n        let cx = canvas.getContext('2d');\r\n        cx.clearRect(0,0,canvas.width,canvas.height);\r\n        let [board, startNode, targetNode] = initializeBoard(canvas.width, canvas.height, state.s);\r\n        setState((prevState) => {\r\n            return {\r\n                        board: board, \r\n                        startNode: startNode, \r\n                        targetNode: targetNode, \r\n                        canvasUpdates: board,\r\n                        updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    } else if (id === 4) {\r\n        let canvas = canvasRef.current;\r\n        let cx = canvas.getContext('2d');\r\n        cx.clearRect(0,0,canvas.width,canvas.height);\r\n        let { innerWidth: width, innerHeight: height } = window\r\n        let canvasHeight;\r\n        if (width < 481 || height < 481)  {\r\n            if ( width > height) canvasHeight = height*.85;\r\n            else canvasHeight = height*.8;\r\n        }\r\n        else canvasHeight = height*.9-4;\r\n        let canvasWidth = width;\r\n        let {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset} = initializeCanvas(canvasWidth,canvasHeight,state.s);\r\n        // Setting Initial State\r\n        setState((prevState) => {\r\n            return {\r\n                canvasWidth: canvasWidth,\r\n                canvasHeight: canvasHeight,\r\n                board: board,\r\n                startNode: startNode,\r\n                targetNode: targetNode,\r\n                xUnits: xUnits,\r\n                yUnits: yUnits,\r\n                xOffset: xOffset,\r\n                yOffset: yOffset,\r\n                canvasUpdates: board,\r\n                updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    } else {\r\n        let canvasUpdates = {};\r\n        if (id === 1) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (!['white','#282c34'].includes(currentState.fill)) {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{fill:'white'});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n            Object.assign(canvasUpdates, {[[state.targetNode.i,state.targetNode.j]]: state.board[[state.targetNode.i,state.targetNode.j]]});\r\n        } else if (id === 2) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (currentState.type === 'wall') {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{type:'empty',fill:'white',object:null});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        } else if (id === 3) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (currentState.type === 'weight') {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{type:'empty',fill:'white',object:null});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        board: Object.assign({},prevState.board,canvasUpdates), \r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    }\r\n};\r\n\r\n//=====================================================================================//\r\n// Basic Drawing Functions //\r\n//=====================================================================================//\r\nfunction drawSearch(node,s,lineWidth,xOffset,yOffset,canvasRef,board,color) {\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    let state = board[[node.i,node.j]];\r\n    sleep(0).then(() => {\r\n        if (state === 'weight') {\r\n            drawWeight(pos,s,lineWidth,canvasRef,color);\r\n        } else {\r\n            fillHex(pos,s,color,canvasRef);\r\n            drawHex(pos,s,lineWidth,canvasRef)\r\n        }\r\n    });\r\n};\r\n\r\nfunction drawWeight(node,s,lineWidth,xOffset,yOffset,canvasRef){\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    let sideLength = s*.9;\r\n    let h = sideLength;\r\n    let w1 = sideLength;\r\n    let w2 = 1.5*sideLength;\r\n    let rw = sideLength*.18;\r\n    let r1 = sideLength*.33;\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    // draw trapezoid\r\n    let path = [\r\n                    {x:w1/2  , y:-h/2},\r\n                    {x:-w1/2 , y:-h/2},\r\n                    {x:-w2/2 , y:h/2},\r\n                    {x:w2/2  , y:h/2}\r\n    ]\r\n    cx.beginPath();\r\n    cx.fillStyle = 'black';\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i = 1; i < path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n    // draw ring\r\n    cx.beginPath();\r\n    let ringCenter = {x:pos.x, y:pos.y - h/2};\r\n    cx.lineWidth = rw;\r\n    cx.arc(ringCenter.x, ringCenter.y, r1, 0, 7);\r\n    cx.stroke();\r\n};\r\n\r\nfunction drawStart(startNode,s,xOffset,yOffset,canvasRef,angle) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    const r = .85;\r\n    const a = s*Math.sqrt(3)*r/2;\r\n    const b = a/1.3;\r\n    const c = a/2.6;\r\n    let path = [\r\n                { x:a    ,  y:0},\r\n                { x:-2*c ,  y:b},\r\n                { x:-c   ,  y:0},\r\n                { x:-2*c ,  y:-b}\r\n    ];\r\n    if (angle) {\r\n        for (let i=0; i<path.length; i++) {\r\n            let oldPos = path[i];\r\n            let newPos = {\r\n                x: oldPos.x*Math.cos(angle) - oldPos.y*Math.sin(angle),\r\n                y: oldPos.x*Math.sin(angle) + oldPos.y*Math.cos(angle)\r\n            }\r\n            path[i] = newPos;\r\n        }\r\n    }\r\n    let pos = calcHexCenter(startNode,s,xOffset,yOffset);\r\n    cx.fillStyle = 'black';\r\n    cx.beginPath();\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction drawStartPos(pos,s,canvasRef,angle) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    const r = .85;\r\n    const a = s*Math.sqrt(3)*r/2;\r\n    const b = a/1.3;\r\n    const c = a/2.6;\r\n    let path = [\r\n                { x:a    ,  y:0},\r\n                { x:-2*c ,  y:b},\r\n                { x:-c   ,  y:0},\r\n                { x:-2*c ,  y:-b}\r\n    ];\r\n    if (angle) {\r\n        for (let i=0; i<path.length; i++) {\r\n            let oldPos = path[i];\r\n            let newPos = {\r\n                x: oldPos.x*Math.cos(angle) - oldPos.y*Math.sin(angle),\r\n                y: oldPos.x*Math.sin(angle) + oldPos.y*Math.cos(angle)\r\n            }\r\n            path[i] = newPos;\r\n        }\r\n    }\r\n    cx.fillStyle = 'black';\r\n    cx.beginPath();\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction drawTarget(targetNode,s,lineWidth,xOffset,yOffset,canvasRef) {\r\n    const sideLength = s;\r\n    let pos = calcHexCenter(targetNode,s,xOffset,yOffset);\r\n    // Outer Ring\r\n    fillHex(pos,sideLength,'#b22222',canvasRef);\r\n    // White Fill\r\n    fillHex(pos,sideLength*2/3 - lineWidth/2,'white',canvasRef);\r\n    // Inner Ring\r\n    fillHex(pos,sideLength/3,'#b22222',canvasRef);\r\n    // Remake Border\r\n    drawHex(pos,sideLength,lineWidth,canvasRef);\r\n};\r\n\r\nfunction drawNode(node,s,lineWidth,xOffset,yOffset,color,canvasRef) {\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    fillHex(pos,s,color,canvasRef);\r\n    drawHex(pos,s,lineWidth,canvasRef);\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Helper Functions //\r\n//=====================================================================================//\r\n\r\n// Helpers for Canvas Tools//\r\n//========================================//\r\nfunction drawHex(pos,s,lineWidth,canvasRef) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    let path = calcHexPath(pos,s);\r\n    cx.lineWidth = lineWidth;\r\n    cx.beginPath();\r\n    cx.moveTo(path[0].x,path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(path[i].x,path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.stroke();\r\n};\r\n\r\nfunction fillHex(pos,s,color,canvasRef) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    cx.fillStyle = color;\r\n    let path = calcHexPath(pos,s);\r\n    cx.beginPath();\r\n    cx.moveTo(path[0].x, path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(path[i].x,path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nfunction getPointerNode(event,domNode,s,xOffset,yOffset) {\r\n    let rect = domNode.getBoundingClientRect();\r\n    let x = event.clientX - rect.left;\r\n    let y = event.clientY - rect.top;\r\n    return nearestHex({x:x,y:y},s,xOffset,yOffset);\r\n};\r\n\r\n// Functions That Peform Grid Calculations//\r\n//========================================//\r\nfunction calcHexCenter(node,s,xOffset,yOffset) {\r\n    const x = xOffset + (node.j + 1 - ((node.i+1)%2)/2)*s*Math.sqrt(3);\r\n    const y = yOffset + (1.5*node.i + 1)*s\r\n    return {x:x, y:y};\r\n};\r\n\r\nfunction nodeDistance(node1,node2,s,xOffset,yOffset) {\r\n    let pos1 = calcHexCenter(node1,s,xOffset,yOffset);\r\n    let pos2 = calcHexCenter(node2,s,xOffset,yOffset);\r\n    return {x:(pos1.x - pos2.x) , y:(pos1.y - pos2.y)};\r\n};\r\n\r\nfunction nearestHex(pos,s,xOffset,yOffset) {\r\n    const J = Math.floor((pos.x - xOffset)/(s*Math.sqrt(3)));\r\n    const I = Math.floor((pos.y - yOffset)/(1.5*s));\r\n    const u = (pos.x - xOffset)/(s*Math.sqrt(3)) - J;\r\n    const v = 1 - ((pos.y - yOffset)/(1.5*s) - I);\r\n    let i, j;\r\n    if (I%2 === 0) {\r\n        if (u < .5) {\r\n            if (v > (2/3*u + 2/3)) {\r\n                [ i , j ] = [ I-1 , J-1 ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        } else {\r\n            if (v > (-2/3*u + 4/3)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        }\r\n    } else {\r\n        if (u < .5) {\r\n            if (v > (-2/3*u + 1)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J-1 ];\r\n            }\r\n        } else {\r\n            if (v > (2/3*u + 1/3)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        }\r\n    }\r\n    return {i:i,j:j};\r\n};\r\n\r\nfunction calcHexPath(pos, s) {\r\n    let path = [];\r\n    for (let theta = Math.PI/6; theta < 2*Math.PI; theta += Math.PI/3) {\r\n        const x = pos.x + s*Math.cos(theta);\r\n        const y = pos.y + s*Math.sin(theta);\r\n        path.push({x:x, y:y});\r\n    }\r\n    return path;\r\n};\r\n\r\nfunction calcUnits(canvasWidth, canvasHeight, s) {\r\n    const xUnits = Math.floor(canvasHeight/(1.5*s) - .5);\r\n    const yUnits = Math.floor(canvasWidth/(s*Math.sqrt(3)) - .5);\r\n    const xOffset = (canvasWidth - (yUnits + .5)*s*Math.sqrt(3))/2;\r\n    const yOffset = (canvasHeight - (xUnits*1.5 + .5)*s)/2;\r\n    return [xUnits,yUnits,xOffset,yOffset];\r\n};\r\n\r\nfunction initializeBoard(canvasWidth, canvasHeight, s) {   \r\n    let [xUnits,yUnits] = calcUnits(canvasWidth, canvasHeight, s);\r\n    let board = {};\r\n    for (let i = 0; i < xUnits; i++) {\r\n        for (let j = 0; j < yUnits; j++) {\r\n            Object.assign(board, {[[i,j]]: {node:{i:i,j:j}, type:'empty', fill:'white', object:null}})\r\n        }\r\n    }\r\n    let startNode, targetNode, offset;\r\n    if (xUnits > yUnits) {\r\n        offset = Math.floor(xUnits*.25);\r\n        startNode = {i: xUnits-1-offset, j: Math.floor(yUnits/2)};\r\n        targetNode = {i: offset, j: Math.floor(yUnits/2)};\r\n    } else {\r\n        offset = Math.floor(yUnits*.25);\r\n        startNode = {i: Math.floor(xUnits/2), j: offset};\r\n        targetNode = {i: Math.floor(xUnits/2), j: yUnits-1-offset};\r\n    }\r\n    let angle = 0;\r\n    if (xUnits > yUnits) angle = -Math.PI/2;\r\n    Object.assign(board[[startNode.i,startNode.j]], {type: 'start', object:'start', angle:angle});\r\n    Object.assign(board[[targetNode.i,targetNode.j]], {type: 'target', object:'target'});\r\n    return [board, startNode, targetNode];\r\n};\r\n\r\nfunction initializeCanvas(canvasWidth,canvasHeight,s) {\r\n    let [xUnits,yUnits,xOffset,yOffset] = calcUnits(canvasWidth, canvasHeight, s);\r\n    let [board, startNode, targetNode] = initializeBoard(canvasWidth, canvasHeight, s);\r\n    let lineWidth = s/10;\r\n    return {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset,lineWidth};\r\n}\r\n\r\nfunction parseKey(key) {\r\n    let [i,j] = key.split(',').map((item) => parseInt(item));\r\n    return {i:i,j:j};\r\n};\r\n\r\n//=====================================================================================//\r\n// Exports //\r\n//=====================================================================================//\r\nexport {getPointerNode, onMouseDown, onTouchStart}\r\nexport {drawSearch, drawLine, moveStart, moveTarget, clearBoard}\r\nexport {drawWeight, drawStart, drawStartPos, drawTarget, drawNode, drawHex, fillHex};\r\nexport {sleep, calcHexCenter, nodeDistance, nearestHex, calcHexPath, calcUnits, initializeBoard, initializeCanvas, parseKey};","import React from 'react';\r\nimport {initializeBoard, drawWeight, drawStart, drawStartPos, drawTarget, drawNode} from '../utils/canvas-tools';\r\n\r\n/*\r\n// To Do //\r\n//========================================================================================//\r\n-- Make new drawWeight function that takes node as imput instead of pos\r\n\r\n//========================================================================================//\r\n*/\r\n\r\n\r\nclass Canvas extends React.Component {\r\n    componentDidMount() {\r\n        let [board] = initializeBoard(this.props.width, this.props.height, this.props.s);\r\n        for (let key in board) {\r\n            let {node, fill, object, angle} = board[key];\r\n            this.updateNode(node, fill, object, angle);\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        if (nextProps.updateID === this.props.updateID) return false;\r\n        else return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.s !== prevProps.s) {\r\n            let canvas = this.props.canvasRef.current;\r\n            let cx = canvas.getContext('2d');\r\n            cx.clearRect(0,0,this.props.width,this.props.height);\r\n            this.componentDidMount();\r\n        } else {\r\n            for (let key in this.props.canvasUpdates) {\r\n                let {node, fill, object, angle} = this.props.canvasUpdates[key];\r\n                this.updateNode(node, fill, object, angle);\r\n            }\r\n            if (this.props.startPosition) {\r\n                let {pos,angle} = this.props.startPosition;\r\n                drawStartPos(pos,this.props.s,this.props.canvasRef,angle);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateNode(node,fill,object,angle) {\r\n        if (fill) {\r\n            drawNode(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, fill, this.props.canvasRef);\r\n        }\r\n        if (object) {\r\n            if (object === 'weight') {\r\n                drawWeight(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, this.props.canvasRef);\r\n            } else if (object === 'start') {\r\n                //console.log(angle);\r\n                drawStart(node, this.props.s, this.props.xOffset, this.props.yOffset, this.props.canvasRef,angle);\r\n            } else if (object === 'target') {\r\n                drawTarget(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, this.props.canvasRef);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas\r\n                ref = {this.props.canvasRef}\r\n                width = {this.props.width}\r\n                height = {this.props.height}\r\n                onMouseDown={this.props.running ? null : (downEvent) => this.props.onMouseDown(downEvent)}\r\n                onTouchStart={this.props.running ? null : (startEvent) => this.props.onTouchStart(startEvent)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;","import {isSameNode, isValidNode, findNeighbors, manhattanDistance, minHeap} from './utils';\r\n\r\n//=====================================================================================//\r\n// Unweighted Algorithms //\r\n//=====================================================================================//\r\nfunction depthFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.unshift(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction breadthFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.push(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction hillClimbing(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // sort nodes according to distance to target node (descending)\r\n        neighbors.sort((node1,node2) => manhattanDistance(node2,targetNode) - manhattanDistance(node1,targetNode));\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.unshift(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction beamSearch(startNode,targetNode,xUnits,yUnits,board, w = 2) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // sort nodes according to distance to target node (descending)\r\n        neighbors.sort((node1,node2) => manhattanDistance(node2,targetNode) - manhattanDistance(node1,targetNode));\r\n        // filter to valid nodes and keep only the first w number of them\r\n        neighbors = neighbors.filter(\r\n            (node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j))\r\n        ).slice(-w);\r\n        for (let newNode of neighbors) {\r\n            let newPath = currentPath.concat([newNode]);\r\n            // if we found target return the completed path and updates, else add path extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.push(newPath);\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction bestFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:manhattanDistance(startNode,targetNode) , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = path.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.insert({distance:manhattanDistance(newNode,targetNode) , path:newPath});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Weighted Algorithms //\r\n//=====================================================================================//\r\n// Dictionary below determines relative weight moving from one node to another.\r\n// Essentially moving through a weight is 10 times as difficult as an empty node.\r\nconst pathWeights = {'empty':1, 'weight':10, 'target':1};\r\n\r\nfunction branchNBound(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    let bestDistance = Infinity;\r\n    let bestPath = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if newDistance is not less than the bestDistance to the target so far, then drop the path from the queue\r\n            if (newDistance >= bestDistance) {\r\n                if (!isSameNode(newNode,targetNode)) {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                }\r\n                continue;\r\n            };\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                [bestPath, bestDistance] = [newPath, newDistance];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({distance:newDistance , path:newPath});\r\n            }\r\n        }\r\n    }\r\n    // Return best path (which could be empty if no path found) and searchUpdates for animation\r\n    return [bestPath, searchUpdates];\r\n};\r\n\r\nfunction aStarSearch(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.estimatedDistance < path2.estimatedDistance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({estimatedDistance:manhattanDistance(startNode,targetNode), distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                // extend other paths to be sure they aren't actually closer to the target (not sure about this part)\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({\r\n                    estimatedDistance: newDistance + manhattanDistance(newNode,targetNode), \r\n                    distance:newDistance, \r\n                    path:newPath\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\n\r\n\r\n// This is an old version of branch and bound algorithm. It doesn't have employ the check at the end\r\n// once the target node is found, but I'm keeping it around because it's structure is much simpler\r\n// and might be useful later.\r\n/*\r\nfunction branchNBound(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        // sort nodes according to weighted distance from currentNode (descending)\r\n        neighbors.sort((node1,node2) => pathWeights[board[[node2.i,node2.j]].type] - pathWeights[board[[node1.i,node1.j]].type]);\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                // extend other paths to be sure they aren't actually closer to the target (not sure about this part)\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({distance:newDistance , path:newPath});\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n*/\r\n\r\n// Similar to above, this is an old version of the A* search algorithm. However, this old method does in fact run\r\n// a check after finding the target, but I now realize that this check is uneccessary. The heuristic distance is\r\n// always a lower bound which means there is no possibility of finding a shorter path once we have reached the target.\r\n/*\r\nfunction aStarSearch(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.estimatedDistance < path2.estimatedDistance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({estimatedDistance:manhattanDistance(startNode,targetNode), distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    let bestDistance = Infinity;\r\n    let bestPath = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        // sort nodes according to weighted distance from currentNode (descending) (this actually might not be necessary)\r\n        //neighbors.sort((node1,node2) => pathWeights[board[[node2.i,node2.j]].type] - pathWeights[board[[node1.i,node1.j]].type]);\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            let estimatedDistance = newDistance + manhattanDistance(newNode,targetNode);\r\n            // if newDistance is not less than the bestDistance to the target so far, then drop the path from the queue\r\n            if (estimatedDistance >= bestDistance) {\r\n                if (!isSameNode(newNode,targetNode)) {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                }\r\n                continue;\r\n            };\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                [bestPath, bestDistance] = [newPath, newDistance];\r\n                console.log(`bestDistance:${bestDistance}`);\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({\r\n                    estimatedDistance: estimatedDistance, \r\n                    distance:newDistance, \r\n                    path:newPath\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [bestPath, searchUpdates];\r\n};\r\n*/\r\n\r\nexport {depthFirst, breadthFirst, hillClimbing, beamSearch, bestFirst, branchNBound, aStarSearch};","import {depthFirst, breadthFirst, hillClimbing, beamSearch, bestFirst, branchNBound, aStarSearch} from './algorithms';\r\nimport { calcHexCenter, nodeDistance } from './canvas-tools';\r\nimport { scalarProd, vectorSum, vectorDiff, vectorAngle, isSameNode } from './utils';\r\n\r\n// Constant mappings for speeds when animating search, drawPath, moveDownPath, and victory\r\nconst searchSpeed = {\r\n    0: 10,\r\n    1: 100,\r\n    2: 1000,\r\n    3: 10000,\r\n    4: Infinity\r\n};\r\nconst drawPathSpeed = {\r\n    0: 5,\r\n    1: 5**2,\r\n    2: 5**3,\r\n    3: 5**4,\r\n    4: Infinity\r\n};\r\nconst moveDownPathSpeed = {\r\n    0: 3,\r\n    1: 3**2,\r\n    2: 3**3,\r\n    3: 3**4,\r\n    4: Infinity\r\n};\r\nconst victorySpeed = {\r\n    0: 2*Math.PI,\r\n    1: 2*Math.PI,\r\n    2: 6*Math.PI,\r\n    3: 6*Math.PI,\r\n    4: Infinity\r\n};\r\n\r\n\r\nfunction pathFinderAnimation(state,canvasRef,setState,isRunning) {\r\n    // Set state to running so user can't interfere with pathFinder \r\n    setState((prevState) => ({\r\n        running: true, \r\n        updateID: prevState.updateID + 1\r\n    }));\r\n    let pathFinder;\r\n    switch (state.algorithm) {\r\n        case 0: pathFinder = depthFirst; break;\r\n        case 1: pathFinder = breadthFirst; break;\r\n        case 2: pathFinder = hillClimbing; break;\r\n        case 3: pathFinder = beamSearch; break;\r\n        case 4: pathFinder = bestFirst; break;\r\n        case 5: pathFinder = branchNBound; break;\r\n        case 6: pathFinder = aStarSearch; break;\r\n        default: pathFinder = breadthFirst;\r\n    };\r\n    let [path, searchUpdates] = pathFinder(state.startNode,state.targetNode,state.xUnits,state.yUnits,state.board);\r\n    searchAnimation(path,searchUpdates,state.s,state.xOffset,state.yOffset,state.speed,state.board,setState,isRunning);\r\n};\r\n\r\nfunction searchAnimation(path,searchUpdates,s,xOffset,yOffset,speed,board,setState,isRunning) {\r\n    let hexsPerSecond = searchSpeed[speed];\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = searchUpdates.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = searchUpdates.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                drawPathAnimation(path,s,xOffset,yOffset,speed,board,setState,isRunning);\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction drawPathAnimation(path,s,xOffset,yOffset,speed,board,setState,isRunning) {\r\n    let hexsPerSecond = drawPathSpeed[speed];\r\n    let pathUpdates = [];\r\n    for (let node of path.slice(1,-1)) {\r\n        pathUpdates.push(Object.assign({},board[[node.i,node.j]],{fill:'#b1fc40'}));\r\n    }\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = pathUpdates.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = pathUpdates.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                moveDownPathAnimation(path,s,xOffset,yOffset,speed,setState,isRunning);\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction moveDownPathAnimation(path,s,xOffset,yOffset,speed,setState,isRunning) {\r\n    let hexsPerSecond = moveDownPathSpeed[speed];\r\n    const totalSteps = path.length - 1;\r\n    const totalTime = totalSteps / hexsPerSecond * 1000;\r\n    let startTime = null;\r\n    let i = 0;\r\n    function updateAnimation(time) {\r\n        let [ prevStartNode , prevEndNode ] = [ path[i] , path[i+1] ];\r\n        i = Math.floor((time - startTime) / totalTime * totalSteps);\r\n        let pos, angle;\r\n        if (i < totalSteps) {\r\n            let [ startNode , endNode ] = [ path[i] , path[i+1] ];\r\n            let [ startPos , endPos ] = [ calcHexCenter(startNode,s,xOffset,yOffset) , calcHexCenter(endNode,s,xOffset,yOffset) ]\r\n            let V = vectorDiff(endPos,startPos);\r\n            let v = scalarProd((time - startTime) / totalTime * totalSteps - i, V);\r\n            pos = vectorSum(startPos, v);\r\n            angle = vectorAngle(V);\r\n        } else {\r\n            let [ startNode , endNode ] = [ path[path.length-2] , path[path.length-1] ];\r\n            let [ startPos , endPos ] = [ calcHexCenter(startNode,s,xOffset,yOffset) , calcHexCenter(endNode,s,xOffset,yOffset) ]\r\n            let V = vectorDiff(endPos,startPos);\r\n            pos = calcHexCenter(endPos);\r\n            angle = vectorAngle(V);\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        canvasUpdates: [\r\n                            Object.assign({}, prevState.board[[prevStartNode.i,prevStartNode.j]]),\r\n                            Object.assign({},  prevState.board[[prevEndNode.i,prevEndNode.j]])\r\n                        ],\r\n                        startPosition: Object.assign({},{pos:pos,angle:angle}),\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (startTime != null) {\r\n                updateAnimation(time);\r\n            } else {\r\n                startTime = time;\r\n            }\r\n            if ((time - startTime) < totalTime) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                victoryAnimation(path[path.length-1],path[path.length-2],speed,s,xOffset,yOffset,setState,isRunning);\r\n            }\r\n        } else {\r\n            let [ prevStartNode , prevEndNode ] = [ path[i] , path[i+1] ];\r\n            setState((prevState) => {\r\n                return {\r\n                            canvasUpdates: [\r\n                                Object.assign({}, prevState.board[[prevStartNode.i,prevStartNode.j]]),\r\n                                Object.assign({},  prevState.board[[prevEndNode.i,prevEndNode.j]])\r\n                            ],\r\n                            startPosition: false,\r\n                            updateID: prevState.updateID +1\r\n                };\r\n            });\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction victoryAnimation(targetNode,prevNode,speed,s,xOffset,yOffset,setState,isRunning) {\r\n    console.log('got to victory animation')\r\n    const radiansPerSecond = victorySpeed[speed];\r\n    const targetPos = calcHexCenter(targetNode,s,xOffset,yOffset);\r\n    const startAngle = vectorAngle(nodeDistance(targetNode,prevNode,s,xOffset,yOffset));\r\n    const totalTime = 6*Math.PI / radiansPerSecond * 1000;\r\n    let startTime = null;\r\n    function updateAnimation(time) {\r\n        let angle;\r\n        if ((time - startTime) < totalTime) {\r\n            angle = startAngle + (time - startTime)/totalTime*6*Math.PI;\r\n        } else {\r\n            angle = startAngle + 6*Math.PI;\r\n        }\r\n        //console.log(targetPos);\r\n        //console.log(angle);\r\n        setState((prevState) => {\r\n            return {\r\n                        canvasUpdates: [ Object.assign({}, prevState.board[[targetNode.i,targetNode.j]]) ],\r\n                        startPosition: Object.assign({},{pos:targetPos,angle:angle}),\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (startTime != null) {\r\n                updateAnimation(time);\r\n            } else {\r\n                startTime = time;\r\n            }\r\n            if ((time - startTime) < totalTime) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                setState((prevState) => ({\r\n                    running: false,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: [],\r\n                    startPosition: false\r\n                }));\r\n            }\r\n        } else {\r\n            setState((prevState) => {\r\n                return {\r\n                            canvasUpdates: [ Object.assign({}, prevState.board[[targetNode.i,targetNode.j]]) ],\r\n                            startPosition: false,\r\n                            updateID: prevState.updateID +1\r\n                };\r\n            });\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nexport {pathFinderAnimation};","import React from 'react';\r\nimport ControlPanel from './ControlPanel';\r\nimport Canvas from './Canvas';\r\nimport {onMouseDown, onTouchStart, clearBoard, initializeCanvas} from '../utils/canvas-tools';\r\nimport {pathFinderAnimation} from '../utils/animations';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass PathFinder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let { innerWidth: width, innerHeight: height } = window\r\n        // Set Up Control Panel\r\n        let windowState = this.getWindowState();\r\n        let showControls = {1:false,2:false,3:true}[windowState]\r\n        // Setting Up Canvas\r\n        let canvasHeight;\r\n        if (windowState === 1) canvasHeight = height*.8;\r\n        else if (windowState === 2) canvasHeight = height*.85;\r\n        else canvasHeight = height*.9-4;\r\n        let canvasWidth = width;\r\n        this.canvasRef = React.createRef();\r\n        let s = 15;\r\n        let {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset,lineWidth} = initializeCanvas(canvasWidth,canvasHeight,s);\r\n        // Setting Initial State\r\n        this.state = {\r\n            windowState: this.getWindowState(),\r\n            showControls: showControls,\r\n            algorithm: 5,\r\n            speed: 2,\r\n            tool: 0,\r\n            canvasWidth: canvasWidth,\r\n            canvasHeight: canvasHeight,\r\n            s: s,\r\n            lineWidth: lineWidth,\r\n            board: board,\r\n            startNode: startNode,\r\n            targetNode: targetNode,\r\n            xUnits: xUnits,\r\n            yUnits: yUnits,\r\n            xOffset: xOffset,\r\n            yOffset: yOffset,\r\n            running: false,\r\n            canvasUpdates: [],\r\n            startPosition: false,\r\n            updateID: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', (event) => this.handleResize());\r\n    }\r\n\r\n    handleResize() {\r\n        let windowState = this.getWindowState();\r\n        if (windowState !== this.state.windowState) {\r\n            if ((windowState === 1 || windowState === 2) && (this.state.windowState === 3)) {\r\n                this.setState({windowState:windowState, showControls:false});\r\n            } else if ((windowState === 3) && (this.state.windowState === 1 || this.state.windowState === 2)) {\r\n                this.setState({windowState:windowState, showControls:true});\r\n            } else this.setState({windowState:windowState});\r\n        }\r\n    }\r\n\r\n    getWindowState() {\r\n        let { innerWidth: width, innerHeight: height } = window;\r\n        if (width < 481 || height < 481)  {\r\n            if ( width > height) return 2;\r\n            else return 1;\r\n        } else return 3;\r\n    }\r\n\r\n    toggleSelected(key,id) {\r\n        if (key !== 'clear') {\r\n            this.setState({\r\n                [key]:id\r\n            })\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    toggleControls() {\r\n        this.setState((prevState) => ({showControls: !prevState.showControls}));\r\n    }\r\n\r\n    startPathFinder() {\r\n        // Check to make sure not already running\r\n        if (this.state.running) return;\r\n        const setState = (stateUpdate) => this.setState(stateUpdate);\r\n        const isRunning = () => {return this.state.running;};\r\n        this.clearBoard(1);\r\n        pathFinderAnimation(this.state,this.canvasRef,setState,isRunning);\r\n    }\r\n\r\n    stopPathFinder() {\r\n        this.setState((prevState) => ({running:false, updateID:prevState.updateID+1}));\r\n    }\r\n\r\n    onMouseDown(downEvent) {\r\n        onMouseDown(downEvent,this.state,this.canvasRef,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    onTouchStart(startEvent) {\r\n        // This isn't working in Chrome. Chrome automatically sets scroll event to passive which dissallows preventDefault\r\n        // I could find a way to set event to active, so instead just disabling scroll for canvas in CSS.\r\n        // This however is leading to a bug where scroll gets re-enabled after user uses pinch zoom. No soultion found yet. \r\n        startEvent.preventDefault();\r\n        onTouchStart(startEvent,this.state,this.canvasRef,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    clearBoard(id) {\r\n        if (this.state.running) return;\r\n        clearBoard(id,this.canvasRef,this.state,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    changeHexSize(s) {\r\n        if (this.state.running || s === this.state.s) return;\r\n        this.setState((prevState) => {\r\n            return Object.assign(\r\n                {}, \r\n                initializeCanvas(prevState.canvasWidth,prevState.canvasHeight,s),\r\n                {updateID: prevState.updateID + 1, canvasUpdates: [], s:s}\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const algorithmMap = {\r\n            0: \"Depth-First Search\",\r\n            1: \"Breadth-First Search\",\r\n            2: \"Hill Climbing\",\r\n            3: \"Beam Search (\\u03C9=2)\",\r\n            4: \"Best-First Search\",\r\n            5: \"Branch & Bound\",\r\n            6: \"A* Search\"\r\n        };\r\n        return (\r\n            <div className=\"PathFinder\">\r\n                <div className=\"Bars-Wrapper\">\r\n                    <FontAwesomeIcon className=\"bars\" icon={faBars} onClick={(event) => this.toggleControls()}/>\r\n                    <div className=\"Algorithm-Text\">{algorithmMap[this.state.algorithm]}</div>\r\n                </div>\r\n                <ControlPanel\r\n                    windowState={this.state.windowState}\r\n                    showControls={this.state.showControls}\r\n                    running={this.state.running}\r\n                    hexSize={this.state.s}\r\n                    toggleSelected={(key,id) => this.toggleSelected(key,id)}\r\n                    clearBoard={(id) => this.clearBoard(id)}\r\n                    changeHexSize={(s) => this.changeHexSize(s)}\r\n                    startSearch={() => this.startPathFinder()}\r\n                    stopSearch={() => this.stopPathFinder()}\r\n                />\r\n                <Canvas\r\n                    className=\"canvas\"\r\n                    canvasRef={this.canvasRef}\r\n                    width={this.state.canvasWidth}\r\n                    height={this.state.canvasHeight}\r\n                    s={this.state.s}\r\n                    lineWidth={this.state.lineWidth}\r\n                    xOffset={this.state.xOffset}\r\n                    yOffset={this.state.yOffset}\r\n                    canvasUpdates={this.state.canvasUpdates}\r\n                    startPosition={this.state.startPosition}\r\n                    updateID={this.state.updateID}\r\n                    running={this.state.running}\r\n                    onMouseDown={(downEvent) => this.onMouseDown(downEvent)}\r\n                    onTouchStart={(startEvent) => this.onTouchStart(startEvent)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathFinder;","import React from 'react';\nimport PathFinder from './components/PathFinder';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}