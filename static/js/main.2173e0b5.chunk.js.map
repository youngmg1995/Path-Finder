{"version":3,"sources":["components/Dropdown.js","components/SliderDropdown.js","components/ControlPanel.js","utils/utils.js","utils/canvas-tools.js","components/Canvas.js","utils/algorithms.js","utils/animations.js","components/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","state","listOpen","headerTitle","title","options","this","setState","prevState","event","key","toggleList","document","addEventListener","escapeList","className","onClick","icon","faAngleUp","size","transform","faAngleDown","map","item","id","callBack","selected","faCheck","React","Component","onClickOutside","SliderDropdown","value","target","type","orient","min","max","onInput","changeValue","onMouseUp","submitValue","onKeyDown","onTouchEnd","ControlPanel","algorithm","speed","tool","clear","temp","slice","i","length","toggleSelected","s","changeHexSize","clearBoard","clickEvent","startSearch","stopSearch","DIRECTIONS","j","isSameNode","node1","node2","nodeOnBoard","node","xUnits","yUnits","isValidNode","board","findNeighbors","directions","neighbors","change","neighbor","push","manhattanDistance","hexCoord1","hexCoordinates","hexCoord2","dx","x","dy","y","Math","sign","abs","ceil2","dotProduct","v1","v2","vectorMag","v","sqrt","vectorOrthoMag","V","b","a","scalarProd","minHeap","lessThan","heap","floor","minValue","shift","unshift","pop","drawLine","startNode","endNode","lineWidth","xOffset","yOffset","canvasRef","currentNode","nodeDistance","canvasUpdates","targetNode","Object","assign","fill","object","minDis","Infinity","tempNode","currentDis","updateID","moveStart","oldNode","newNode","angle","PI","oldState","moveTarget","drawWeight","pos","calcHexCenter","sideLength","h","w1","w2","rw","r1","cx","current","getContext","path","beginPath","fillStyle","moveTo","lineTo","closePath","ringCenter","arc","stroke","drawHex","calcHexPath","fillHex","color","getPointerNode","domNode","rect","getBoundingClientRect","J","I","u","nearestHex","clientX","left","clientY","top","pos1","pos2","theta","cos","sin","calcUnits","canvasWidth","canvasHeight","initializeBoard","offset","initializeCanvas","parseKey","split","parseInt","Canvas","width","height","updateNode","nextProps","prevProps","clearRect","componentDidMount","drawNode","c","oldPos","newPos","drawStart","drawTarget","ref","onMouseDown","running","downEvent","onTouchStart","startEvent","depthFirst","queue","visitedNodes","Set","searchUpdates","currentPath","has","add","newState","newPath","concat","breadthFirst","hillClimbing","sort","beamSearch","w","filter","bestFirst","path1","path2","distance","insert","pathWeights","branchNBound","bestDistance","bestPath","newDistance","aStarSearch","estimatedDistance","pathFinderAnimation","isRunning","pathFinder","hexsPerSecond","lastTime","currentStart","steps","totalHexs","requestAnimationFrame","frame","time","start","boardUpdates","update","updateAnimation","pathUpdates","pathAnimation","ceil","searchAnimation","PathFinder","window","innerWidth","innerHeight","createRef","stateUpdate","button","onMove","onMoveType","canvas","origNode","move","moveEvent","buttons","removeEventListener","oldStart","newStart","oldTarget","newTarget","touches","end","endEvent","currentState","includes","startPathFinder","stopPathFinder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2173e0b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleUp , faAngleDown, faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            options: this.props.options\r\n        }\r\n    }\r\n\r\n    handleClickOutside() {\r\n        this.setState({listOpen: false});\r\n    }\r\n\r\n    toggleList() {\r\n        this.setState(prevState => ({\r\n            listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    escapeList(event) {\r\n        if (this.state.listOpen && event.key === 'Escape') this.toggleList();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown',(event) => this.escapeList(event));\r\n    }\r\n\r\n    render() {\r\n        const {listOpen, headerTitle, options} = this.state;\r\n        return (\r\n            <div className=\"Dropdown\">\r\n                <div className=\"Dropdown-header\" onClick={() => this.toggleList()}>\r\n                    <div className=\"Dropdown-header-title\">{headerTitle}</div>\r\n                    {listOpen\r\n                        ? <FontAwesomeIcon className=\"angle-up\" icon={faAngleUp} size=\"lg\" transform=\"right-8 down-1\"/>\r\n                        : <FontAwesomeIcon className=\"angle-down\" icon={faAngleDown} size=\"lg\" transform=\"right-8 down-1\"/>\r\n                    }\r\n                </div>\r\n                {listOpen && <ul className={headerTitle+\"-Dropdown-list\"}>\r\n                    {options.map((item) => (\r\n                        <li key={item.id} className=\"Dropdown-list-item\" onClick={() => this.props.callBack(item.id,item.key,item.title)}>\r\n                            {item.title}\r\n                            {item.selected && <FontAwesomeIcon className=\"check\" icon={faCheck} size=\"1x\"/>}\r\n                        </li>\r\n                    ))}\r\n                </ul>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default onClickOutside(Dropdown);","import React from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleUp , faAngleDown} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass SliderDropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            value: 15\r\n        }\r\n    }\r\n\r\n    handleClickOutside() {\r\n        this.setState({\r\n            listOpen: false\r\n        });\r\n    }\r\n\r\n    toggleList() {\r\n        this.setState(prevState => ({\r\n            listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    changeValue(event) {\r\n        this.setState({value:event.target.value});\r\n    }\r\n\r\n    submitValue(event) {\r\n        this.props.callBack(event.target.value);\r\n    }\r\n\r\n    escapeList(event) {\r\n        if (this.state.listOpen && event.key === 'Escape') this.toggleList();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown',(event) => this.escapeList(event));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Dropdown\">\r\n                <div className=\"Dropdown-header\" onClick={() => this.toggleList()}>\r\n                    <div className=\"Dropdown-header-title\">{this.state.headerTitle}</div>\r\n                    {this.state.listOpen\r\n                        ? <FontAwesomeIcon className=\"angle-up\" icon={faAngleUp} size=\"lg\" transform=\"right-8 down-1\"/>\r\n                        : <FontAwesomeIcon className=\"angle-down\" icon={faAngleDown} size=\"lg\" transform=\"right-8 down-1\"/>\r\n                    }\r\n                </div>\r\n                {this.state.listOpen && <div className={\"SliderDropdown-list\"}>\r\n                    <div className=\"slider-text\">{this.state.value}</div>\r\n                    <input className=\"slider\" type=\"range\" orient=\"vertical\" min=\"5\" max=\"100\"\r\n                        value={this.state.value}\r\n                        onInput={(event) => this.changeValue(event)}\r\n                        onMouseUp={(event) => this.submitValue(event)}\r\n                        onKeyDown={(event) => {if (event.key === \"Enter\") this.submitValue(event);}}\r\n                        onTouchEnd={(event) => this.submitValue(event)}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default onClickOutside(SliderDropdown);","import React from 'react';\r\nimport Dropdown from './Dropdown';\r\nimport SliderDropdown from './SliderDropdown';\r\n\r\nclass ControlPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            algorithm: [\r\n                        {id:0, title:'Depth-First Search', selected:false, key:'algorithm'},\r\n                        {id:1, title:'Breadth-First Search', selected:false, key:'algorithm'},\r\n                        {id:2, title:'Hill Climbing', selected:false, key:'algorithm'},\r\n                        {id:3, title:'Beam Search (\\u03C9=2)', selected:false, key:'algorithm'},\r\n                        {id:4, title:'Best-First Search', selected:false, key:'algorithm'},\r\n                        {id:5, title:'Branch & Bound', selected:true, key:'algorithm'},\r\n                        {id:6, title:'A* Search', selected:false, key:'algorithm'}\r\n            ],\r\n            speed: [\r\n                        {id:0, title:'Slow', selected:false, key:'speed'},\r\n                        {id:1, title:'Medium', selected:false, key:'speed'},\r\n                        {id:2, title:'Fast', selected:true, key:'speed'},\r\n                        {id:3, title:'Ludicrous', selected:false, key:'speed'},\r\n                        {id:4, title:'Instant', selected:false, key:'speed'}\r\n            ],\r\n            tool: [\r\n                        {id:0, title:'Walls', selected:true, key:'tool'},\r\n                        {id:1, title:'Weights', selected:false, key:'tool'},\r\n                        {id:2, title:'Eraser', selected:false, key:'tool'}\r\n            ],\r\n            clear: [\r\n                        {id:1, title:'Path', selected:false, key:'clear'},\r\n                        {id:2, title:'Walls', selected:false, key:'clear'},\r\n                        {id:3, title:'Weights', selected:false, key:'clear'},\r\n                        {id:0, title:'Board', selected:false, key:'clear'},\r\n                        {id:4, title:'Canvas', selected:false, key:'clear'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    toggleSelected(id,key,title) {\r\n        if (key !== 'clear') {\r\n            let temp = this.state[key].slice();\r\n            for (let i = 0; i < temp.length; i++) {\r\n                temp[i].selected = (id === temp[i].id);\r\n            }\r\n            this.setState({\r\n                [key]:temp\r\n            });\r\n        }\r\n        this.props.toggleSelected(key,id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ControlPanel\">\r\n                <div className=\"ControlPanel-column\">\r\n                    <Dropdown className=\"Algorithm-Dropdown\"\r\n                        title={'Algorithm'} \r\n                        options={this.state.algorithm}\r\n                        callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                    />\r\n                </div>\r\n                <div className=\"ControlPanel-column\"> \r\n                    <Dropdown className=\"Speed-Dropdown\"\r\n                        title={'Speed'} \r\n                        options={this.state.speed}\r\n                        callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                    />\r\n                </div>\r\n                <div className=\"ControlPanel-column\">\r\n                    <Dropdown className=\"Tool-Dropdown\"\r\n                        title={'Tool'} \r\n                        options={this.state.tool}\r\n                        callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                    />\r\n                </div>\r\n                <div className=\"ControlPanel-column\">\r\n                    <SliderDropdown className=\"Hex-Size-Dropdown\"\r\n                        title={'Hex Size'} \r\n                        callBack = {(s) => this.props.changeHexSize(s)}\r\n                    />\r\n                </div>\r\n                <div className=\"ControlPanel-column\">\r\n                    <Dropdown className=\"Clear-Dropdown\"\r\n                        title={'Clear'} \r\n                        options={this.state.clear}\r\n                        callBack = {(id,key,title) => this.props.clearBoard(id)}\r\n                    />\r\n                </div>\r\n                <div className=\"ControlPanel-column\">\r\n                    <button className=\"Start-Button\" onClick={(clickEvent) => this.props.startSearch()}>\r\n                        Start\r\n                    </button>\r\n                </div>\r\n                <div className=\"ControlPanel-column\">\r\n                    <button className=\"Stop-Button\" onClick={(clickEvent) => this.props.stopSearch()}>\r\n                        Stop\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","//=====================================================================================//\r\n// Constants //\r\n//=====================================================================================//\r\nconst DIRECTIONS = {\r\n    even: [\r\n            { i:0  , j:1 },\r\n            { i:-1 , j:0 },\r\n            { i:-1 , j:-1 },\r\n            { i:0  , j:-1 },\r\n            { i:1  , j:-1 },\r\n            { i:1  , j:0 }\r\n    ],\r\n    odd: [\r\n            { i:0  , j:1 },\r\n            { i:-1 , j:1 },\r\n            { i:-1 , j:0 },\r\n            { i:0  , j:-1 },\r\n            { i:1  , j:0 },\r\n            { i:1  , j:1 }\r\n    ]\r\n};\r\n\r\n//=====================================================================================//\r\n// Helper Functions //\r\n//=====================================================================================//\r\n\r\n// Node Functions: node = {i:i,j:j}//\r\n//=================================//\r\nfunction isSameNode(node1,node2) {\r\n    return (node1.i === node2.i && node1.j === node2.j);\r\n};\r\n\r\nfunction nodeInPath(node,path) {\r\n    for (let pathNode of path) {\r\n        if (isSameNode(node,pathNode)) return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nfunction addNodes(node1,node2) {\r\n    return { i:(node1.i + node2.i) , j:(node1.j + node2.j) };\r\n};\r\n\r\nfunction nodeOnBoard(node,xUnits,yUnits) {\r\n    return (node.i>=0 && node.j>=0 && node.i<xUnits && node.j<yUnits);\r\n};\r\n\r\nfunction isValidNode(node,board,xUnits,yUnits) {\r\n    let state = board[[node.i,node.j]];\r\n    let onBoard = nodeOnBoard(node,xUnits,yUnits);\r\n    return (onBoard && state.type !== 'wall');\r\n};\r\n\r\nfunction findNeighbors(node) {\r\n    let neighbors = [];\r\n    let directions;\r\n    if (node.i%2 === 0) directions = DIRECTIONS.even;\r\n    else directions = DIRECTIONS.odd;\r\n    for (let change of directions) {\r\n        let neighbor = addNodes(node,change);\r\n        neighbors.push(neighbor);\r\n    }\r\n    return neighbors;\r\n};\r\n\r\nfunction manhattanDistance(node1,node2) {\r\n    const hexCoord1 = hexCoordinates(node1);\r\n    const hexCoord2 = hexCoordinates(node2);\r\n    const dx = hexCoord2.x - hexCoord1.x;\r\n    const dy = hexCoord2.y - hexCoord1.y;\r\n    if (Math.sign(dx) === Math.sign(dy)) {\r\n        return Math.max(Math.abs(dx), Math.abs(dy));\r\n    }\r\n    return Math.abs(dx) + Math.abs(dy);\r\n};\r\n\r\nfunction hexCoordinates(node) {\r\n    return { x: node.j - floor2(node.i) , y: node.j + ceil2(node.i) };\r\n};\r\n\r\nfunction floor2(x) {\r\n    return ((x >= 0) ? (x >> 1) : (x - 1) / 2);\r\n};\r\n\r\nfunction ceil2(x) {\r\n    return ((x >= 0) ? ((x + 1) >> 1) : x / 2);\r\n}\r\n\r\n// Vectors Functions: v = {x:x,y:y} //\r\n//==================================//\r\nfunction dotProduct(v1,v2) {\r\n    return v1.x*v2.x + v1.y*v2.y;\r\n};\r\n\r\nfunction scalarProd(a,v) {\r\n    return {x:a*v.x , y:a*v.y};\r\n};\r\n\r\nfunction vectorDiff(v1,v2) {\r\n    return {x: v1.x - v2.x, y: v1.y - v2.y};\r\n};\r\n\r\nfunction vectorSum(v1,v2) {\r\n    return {x: v1.x + v2.x, y: v1.y + v2.y};\r\n};\r\n\r\nfunction vectorMag(v) {\r\n    return Math.sqrt((v.x)**2 + (v.y)**2);\r\n};\r\n\r\nfunction vectorOrthoMag(v,V) {\r\n    let b = scalarProd(dotProduct(v,V)/(vectorMag(V))**2, V);\r\n    let d =  vectorDiff(v, b);\r\n    return vectorMag(d);\r\n};\r\n\r\n\r\n// Data Structures for Algorithms //\r\n//==================================//\r\nclass minHeap {\r\n    constructor(lessThan) {\r\n        this.heap = [];\r\n        this.lessThan = lessThan\r\n    }\r\n\r\n    length() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    getMin() {\r\n        return this.heap[0];\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        let i = this.heap.length-1;\r\n        while (i > 0) {\r\n            if (this.lessThan(this.heap[i] , this.heap[Math.floor((i-1)/2)])) {\r\n                [ this.heap[Math.floor((i-1)/2)] , this.heap[i] ] = [ this.heap[i] , this.heap[Math.floor((i-1)/2)] ];\r\n                i = Math.floor((i-1)/2);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    shift() {\r\n        const minValue = this.heap.shift();\r\n        if (this.heap.length === 0) return minValue;\r\n        this.heap.unshift(this.heap.pop());\r\n        let i = 0;\r\n        while (2*i+2 < this.heap.length) {\r\n            if (this.lessThan(this.heap[2*i+1], this.heap[i]) || this.lessThan(this.heap[2*i+2], this.heap[i])) {\r\n                if (this.lessThan(this.heap[2*i+1], this.heap[2*i+2])) {\r\n                    [ this.heap[2*i+1], this.heap[i] ] = [ this.heap[i] , this.heap[2*i+1] ];\r\n                    i = 2*i + 1;\r\n                } else {\r\n                    [ this.heap[2*i+2], this.heap[i] ] = [ this.heap[i] , this.heap[2*i+2] ];\r\n                    i = 2*i + 2;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return minValue;\r\n    }\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Exports //\r\n//=====================================================================================//\r\nexport {isSameNode, nodeInPath, addNodes, nodeOnBoard, isValidNode, findNeighbors, manhattanDistance};      // node functions\r\nexport {dotProduct, scalarProd, vectorDiff, vectorSum, vectorMag, vectorOrthoMag};                          // vector functions\r\nexport {minHeap};                                                                                           // algorithm data structures\r\n","import {isSameNode, nodeOnBoard, findNeighbors, dotProduct, vectorOrthoMag} from './utils';\r\n\r\n//=====================================================================================//\r\n// Canvas Mouse and Touch Trackers for Drawing and Manipulating Board //\r\n//=====================================================================================//\r\nfunction onMouseDown(downEvent,state,canvasRef,setState) {\r\n    if (downEvent.button !== 0) return;\r\n    let canvas = canvasRef.current;\r\n    let node = getPointerNode(downEvent,canvas,state.s,state.xOffset,state.yOffset);\r\n    let origNode = node;\r\n    let onMove, onMoveType;\r\n    if (isSameNode(node,state.startNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) =>\r\n        moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 1;\r\n    } else if (isSameNode(node,state.targetNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) => \r\n        moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 2;\r\n    } else {\r\n        drawLine(node,node,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        onMove = (startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) => \r\n        drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits);\r\n        onMoveType = 0;\r\n    }\r\n    let move = (moveEvent) => {\r\n        if (moveEvent.buttons === 0) {\r\n            canvas.removeEventListener(\"mousemove\", move);\r\n            let board = {};\r\n            if (onMoveType === 1) {\r\n                let oldStart = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n                let newStart = {[[node.i,node.j]]: {node:node,type:'start',fill:'white',object:'start'}};\r\n                Object.assign(board, state.board, oldStart, newStart);\r\n                setState({board:board});\r\n            } else if (onMoveType === 2) {\r\n                let oldTarget = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n                let newTarget = {[[node.i,node.j]]: {node:node,type:'target',fill:'white',object:'target'}};\r\n                Object.assign(board, state.board, oldTarget, newTarget);\r\n                setState({board:board});\r\n            }\r\n        } else {\r\n            let newNode = getPointerNode(moveEvent,canvas,state.s,state.xOffset,state.yOffset);\r\n            if (isSameNode(newNode,node)) return;\r\n            if ( \r\n                    (onMoveType !== 0 && !nodeOnBoard(newNode,state.xUnits,state.yUnits))\r\n                ||  (onMoveType === 1 && isSameNode(newNode,state.targetNode))\r\n                ||  (onMoveType === 2 && isSameNode(newNode,state.startNode))\r\n            ) return;\r\n            onMove(node,newNode,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n                (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n            node = newNode;\r\n        }\r\n    };\r\n    canvas.addEventListener(\"mousemove\", move);\r\n};\r\n\r\n\r\nfunction onTouchStart(startEvent,state,canvasRef,setState) {\r\n    // scrolling prevented using CSS instead because I could not find a way to make event listener active\r\n    // startEvent.preventDefault();\r\n    let canvas = canvasRef.current;\r\n    let node = getPointerNode(startEvent.touches[0],canvas,state.s,state.xOffset,state.yOffset);\r\n    let origNode = node;\r\n    let onMove, onMoveType;\r\n    if (isSameNode(node,state.startNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) =>\r\n        moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 1;\r\n    } else if (isSameNode(node,state.targetNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) => \r\n        moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 2;\r\n    } else {\r\n        drawLine(node,node,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        onMove = (startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) => \r\n        drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits);\r\n        onMoveType = 0;\r\n    }\r\n    let move = (moveEvent) => {\r\n        let newNode = getPointerNode(moveEvent.touches[0],canvas,state.s,state.xOffset,state.yOffset);\r\n        if (isSameNode(newNode,node)) return;\r\n        if ( \r\n                (onMoveType !== 0 && !nodeOnBoard(newNode,state.xUnits,state.yUnits))\r\n            ||  (onMoveType === 1 && isSameNode(newNode,state.targetNode))\r\n            ||  (onMoveType === 2 && isSameNode(newNode,state.startNode))\r\n        ) return;\r\n        onMove(node,newNode,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        node = newNode;\r\n    };\r\n    let end = (endEvent) => {\r\n        canvas.removeEventListener(\"touchmove\", move);\r\n        canvas.removeEventListener(\"touchend\", end);\r\n        let board = {};\r\n        if (onMoveType === 1) {\r\n            let oldStart = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n            let newStart = {[[node.i,node.j]]: {node:node,type:'start',fill:'white',object:'start'}};\r\n            Object.assign(board, state.board, oldStart, newStart);\r\n            setState({board:board});\r\n        } else if (onMoveType === 2) {\r\n            let oldTarget = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n            let newTarget = {[[node.i,node.j]]: {node:node,type:'target',fill:'white',object:'target'}};\r\n            Object.assign(board, state.board, oldTarget, newTarget);\r\n            setState({board:board});\r\n        }\r\n    }\r\n    canvas.addEventListener(\"touchmove\", move);\r\n    canvas.addEventListener(\"touchend\", end);\r\n};\r\n\r\n//=====================================================================================//\r\n// Canvas Tools //\r\n//=====================================================================================//\r\nfunction drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) {\r\n    // Setting start of path\r\n    let currentNode = startNode;\r\n    let V = nodeDistance(endNode,startNode,s,xOffset,yOffset);\r\n    // Fill start if not off board and not start/target node\r\n    let canvasUpdates = {};\r\n    if (nodeOnBoard(currentNode,xUnits,yUnits) &&  !isSameNode(currentNode,state.startNode) &&  !isSameNode(currentNode,state.targetNode)\r\n    ) {\r\n        // might be a problem that currentNode changes over time\r\n        if (state.tool === 0) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'wall',fill:'#282c34',object:null}});\r\n        } else if (state.tool === 1) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'weight',fill:'white',object:'weight'}});\r\n        } else if (state.tool === 2) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'empty',fill:'white',object:null}});\r\n        }\r\n    }\r\n    // Looping over path\r\n    while (!isSameNode(currentNode,endNode)) {\r\n        // Reset minDis\r\n        let minDis = Infinity;\r\n        // Find next hex to move to by looping over adjacent hexs\r\n        let neighbors = findNeighbors(currentNode);\r\n        let tempNode = Object.assign({},currentNode);\r\n        for (let neighbor of neighbors) {\r\n            let v = nodeDistance(neighbor,tempNode,s,xOffset,yOffset);\r\n            let dotProd = dotProduct(v,V);\r\n            if (dotProd >= 0) {\r\n                v = nodeDistance(neighbor,startNode,s,xOffset,yOffset);\r\n                let currentDis = vectorOrthoMag(v,V);\r\n                if (currentDis < minDis) {\r\n                    currentNode = neighbor;\r\n                    minDis = currentDis;\r\n                }\r\n            }\r\n        }\r\n        // If next hex off board then end path\r\n        if (!nodeOnBoard(currentNode,xUnits,yUnits)) break;\r\n        // Fill next hex unless it is start or target node\r\n        else if (!isSameNode(currentNode,state.startNode) && !isSameNode(currentNode,state.targetNode)) {\r\n            // might be a problem that currentNode changes over time\r\n            if (state.tool === 0) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'wall',fill:'#282c34',object:null}});\r\n            } else if (state.tool === 1) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'weight',fill:'white',object:'weight'}});\r\n            } else if (state.tool === 2) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'empty',fill:'white',object:null}});\r\n            }\r\n        }\r\n    }\r\n    // Update state\r\n    setState((prevState) => {\r\n        return {\r\n                    board: Object.assign({},prevState.board,canvasUpdates),\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) {\r\n    let angle = 0;\r\n    if (state.xUnits > state.yUnits) angle = -Math.PI/2;\r\n    let canvasUpdates = {[[newNode.i,newNode.j]]: {node:newNode,type:'start',fill:'white',object:'start',angle:angle}};             \r\n    const oldState = Object.assign({}, state.board[[oldNode.i,oldNode.j]]);\r\n    if (oldState.type === 'start') {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: {node:oldNode,type:'empty',fill:'white',object:null}});\r\n    } else {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: oldState});\r\n    }\r\n    setState((prevState) => {\r\n        return {\r\n                    startNode: newNode,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) {\r\n    let canvasUpdates = {[[newNode.i,newNode.j]]: {node:newNode,type:'target',fill:'white',object:'target'}};             \r\n    const oldState = Object.assign({}, state.board[[oldNode.i,oldNode.j]]);\r\n    if (oldState.type === 'target') {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: {node:oldNode,type:'empty',fill:'white',object:null}});\r\n    } else {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: oldState});\r\n    }\r\n    setState((prevState) => {\r\n        return {\r\n                    targetNode: newNode,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction clearBoard(id,canvasRef,state,setState) {\r\n    if (id === 0) {\r\n        let canvas = canvasRef.current;\r\n        let cx = canvas.getContext('2d');\r\n        cx.clearRect(0,0,canvas.width,canvas.height);\r\n        let [board, startNode, targetNode] = initializeBoard(canvas.width, canvas.height, state.s);\r\n        setState((prevState) => {\r\n            return {\r\n                        board: board, \r\n                        startNode: startNode, \r\n                        targetNode: targetNode, \r\n                        canvasUpdates: board,\r\n                        updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    } else if (id === 4) {\r\n        let canvas = canvasRef.current;\r\n        let cx = canvas.getContext('2d');\r\n        cx.clearRect(0,0,canvas.width,canvas.height);\r\n        let { innerWidth: width, innerHeight: height } = window\r\n        let canvasHeight = height*.9-4;\r\n        let canvasWidth = width;\r\n        //let [board, startNode, targetNode] = initializeBoard(canvasWidth, canvasHeight, state.s);\r\n        let {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset} = initializeCanvas(canvasWidth,canvasHeight,state.s);\r\n        // Setting Initial State\r\n        setState((prevState) => {\r\n            return {\r\n                canvasWidth: canvasWidth,\r\n                canvasHeight: canvasHeight,\r\n                board: board,\r\n                startNode: startNode,\r\n                targetNode: targetNode,\r\n                xUnits: xUnits,\r\n                yUnits: yUnits,\r\n                xOffset: xOffset,\r\n                yOffset: yOffset,\r\n                canvasUpdates: board,\r\n                updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    } else {\r\n        let canvasUpdates = {};\r\n        if (id === 1) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (!['white','#282c34'].includes(currentState.fill)) {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{fill:'white'});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        } else if (id === 2) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (currentState.type === 'wall') {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{type:'empty',fill:'white',object:null});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        } else if (id === 3) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (currentState.type === 'weight') {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{type:'empty',fill:'white',object:null});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        board: Object.assign({},prevState.board,canvasUpdates), \r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    }\r\n};\r\n\r\n//=====================================================================================//\r\n// Basic Drawing Functions //\r\n//=====================================================================================//\r\nfunction drawSearch(node,s,lineWidth,xOffset,yOffset,canvasRef,board,color) {\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    let state = board[[node.i,node.j]];\r\n    sleep(0).then(() => {\r\n        if (state === 'weight') {\r\n            drawWeight(pos,s,lineWidth,canvasRef,color);\r\n        } else {\r\n            fillHex(pos,s,color,canvasRef);\r\n            drawHex(pos,s,lineWidth,canvasRef)\r\n        }\r\n    });\r\n};\r\n\r\nfunction drawWeight(node,s,lineWidth,xOffset,yOffset,canvasRef){\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    let sideLength = s*.9;\r\n    let h = sideLength;\r\n    let w1 = sideLength;\r\n    let w2 = 1.5*sideLength;\r\n    let rw = sideLength*.18;\r\n    let r1 = sideLength*.33;\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    // draw trapezoid\r\n    let path = [\r\n                    {x:w1/2  , y:-h/2},\r\n                    {x:-w1/2 , y:-h/2},\r\n                    {x:-w2/2 , y:h/2},\r\n                    {x:w2/2  , y:h/2}\r\n    ]\r\n    cx.beginPath();\r\n    cx.fillStyle = 'black';\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i = 1; i < path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n    // draw ring\r\n    cx.beginPath();\r\n    let ringCenter = {x:pos.x, y:pos.y - h/2};\r\n    cx.lineWidth = rw;\r\n    cx.arc(ringCenter.x, ringCenter.y, r1, 0, 7);\r\n    cx.stroke();\r\n}\r\n\r\nfunction drawStart(startNode,s,xOffset,yOffset,canvasRef,angle) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    const r = .85;\r\n    const a = s*Math.sqrt(3)*r/2;\r\n    const b = a/1.3;\r\n    const c = a/2.6;\r\n    let path = [\r\n                { x:a    ,  y:0},\r\n                { x:-2*c ,  y:b},\r\n                { x:-c   ,  y:0},\r\n                { x:-2*c ,  y:-b}\r\n    ];\r\n    if (angle) {\r\n        for (let i=0; i<path.length; i++) {\r\n            let oldPos = path[i];\r\n            let newPos = {\r\n                x: oldPos.x*Math.cos(angle) - oldPos.y*Math.sin(angle),\r\n                y: oldPos.x*Math.sin(angle) + oldPos.y*Math.cos(angle)\r\n            }\r\n            path[i] = newPos;\r\n        }\r\n    }\r\n    let pos = calcHexCenter(startNode,s,xOffset,yOffset);\r\n    cx.fillStyle = 'black';\r\n    cx.beginPath();\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction drawTarget(targetNode,s,lineWidth,xOffset,yOffset,canvasRef) {\r\n    const sideLength = s;\r\n    let pos = calcHexCenter(targetNode,s,xOffset,yOffset);\r\n    // Outer Ring\r\n    fillHex(pos,sideLength,'#b22222',canvasRef);\r\n    // White Fill\r\n    fillHex(pos,sideLength*2/3 - lineWidth/2,'white',canvasRef);\r\n    // Inner Ring\r\n    fillHex(pos,sideLength/3,'#b22222',canvasRef);\r\n    // Remake Border\r\n    drawHex(pos,sideLength,lineWidth,canvasRef);\r\n};\r\n\r\nfunction drawNode(node,s,lineWidth,xOffset,yOffset,color,canvasRef) {\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    fillHex(pos,s,color,canvasRef);\r\n    drawHex(pos,s,lineWidth,canvasRef);\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Helper Functions //\r\n//=====================================================================================//\r\n\r\n// Helpers for Canvas Tools//\r\n//========================================//\r\nfunction drawHex(pos,s,lineWidth,canvasRef) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    let path = calcHexPath(pos,s);\r\n    cx.lineWidth = lineWidth;\r\n    cx.beginPath();\r\n    cx.moveTo(path[0].x,path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(path[i].x,path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.stroke();\r\n};\r\n\r\nfunction fillHex(pos,s,color,canvasRef) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    cx.fillStyle = color;\r\n    let path = calcHexPath(pos,s);\r\n    cx.beginPath();\r\n    cx.moveTo(path[0].x, path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(path[i].x,path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nfunction getPointerNode(event,domNode,s,xOffset,yOffset) {\r\n    let rect = domNode.getBoundingClientRect();\r\n    let x = event.clientX - rect.left;\r\n    let y = event.clientY - rect.top;\r\n    return nearestHex({x:x,y:y},s,xOffset,yOffset);\r\n};\r\n\r\n// Functions That Peform Grid Calculations//\r\n//========================================//\r\nfunction calcHexCenter(node,s,xOffset,yOffset) {\r\n    const x = xOffset + (node.j + 1 - ((node.i+1)%2)/2)*s*Math.sqrt(3);\r\n    const y = yOffset + (1.5*node.i + 1)*s\r\n    return {x:x, y:y};\r\n};\r\n\r\nfunction nodeDistance(node1,node2,s,xOffset,yOffset) {\r\n    let pos1 = calcHexCenter(node1,s,xOffset,yOffset);\r\n    let pos2 = calcHexCenter(node2,s,xOffset,yOffset);\r\n    return {x:(pos1.x - pos2.x) , y:(pos1.y - pos2.y)};\r\n};\r\n\r\nfunction nearestHex(pos,s,xOffset,yOffset) {\r\n    const J = Math.floor((pos.x - xOffset)/(s*Math.sqrt(3)));\r\n    const I = Math.floor((pos.y - yOffset)/(1.5*s));\r\n    const u = (pos.x - xOffset)/(s*Math.sqrt(3)) - J;\r\n    const v = 1 - ((pos.y - yOffset)/(1.5*s) - I);\r\n    let i, j;\r\n    if (I%2 === 0) {\r\n        if (u < .5) {\r\n            if (v > (2/3*u + 2/3)) {\r\n                [ i , j ] = [ I-1 , J-1 ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        } else {\r\n            if (v > (-2/3*u + 4/3)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        }\r\n    } else {\r\n        if (u < .5) {\r\n            if (v > (-2/3*u + 1)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J-1 ];\r\n            }\r\n        } else {\r\n            if (v > (2/3*u + 1/3)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        }\r\n    }\r\n    return {i:i,j:j};\r\n};\r\n\r\nfunction calcHexPath(pos, s) {\r\n    let path = [];\r\n    for (let theta = Math.PI/6; theta < 2*Math.PI; theta += Math.PI/3) {\r\n        const x = pos.x + s*Math.cos(theta);\r\n        const y = pos.y + s*Math.sin(theta);\r\n        path.push({x:x, y:y});\r\n    }\r\n    return path;\r\n};\r\n\r\nfunction calcUnits(canvasWidth, canvasHeight, s) {\r\n    const xUnits = Math.floor(canvasHeight/(1.5*s) - .5);\r\n    const yUnits = Math.floor(canvasWidth/(s*Math.sqrt(3)) - .5);\r\n    const xOffset = (canvasWidth - (yUnits + .5)*s*Math.sqrt(3))/2;\r\n    const yOffset = (canvasHeight - (xUnits*1.5 + .5)*s)/2;\r\n    return [xUnits,yUnits,xOffset,yOffset];\r\n};\r\n\r\nfunction initializeBoard(canvasWidth, canvasHeight, s) {   \r\n    let [xUnits,yUnits] = calcUnits(canvasWidth, canvasHeight, s);\r\n    let board = {};\r\n    for (let i = 0; i < xUnits; i++) {\r\n        for (let j = 0; j < yUnits; j++) {\r\n            Object.assign(board, {[[i,j]]: {node:{i:i,j:j}, type:'empty', fill:'white', object:null}})\r\n        }\r\n    }\r\n    let startNode, targetNode, offset;\r\n    if (xUnits > yUnits) {\r\n        offset = Math.floor(xUnits*.25);\r\n        startNode = {i: xUnits-1-offset, j: Math.floor(yUnits/2)};\r\n        targetNode = {i: offset, j: Math.floor(yUnits/2)};\r\n    } else {\r\n        offset = Math.floor(yUnits*.25);\r\n        startNode = {i: Math.floor(xUnits/2), j: offset};\r\n        targetNode = {i: Math.floor(xUnits/2), j: yUnits-1-offset};\r\n    }\r\n    let angle = 0;\r\n    if (xUnits > yUnits) angle = -Math.PI/2;\r\n    Object.assign(board[[startNode.i,startNode.j]], {type: 'start', object:'start', angle:angle});\r\n    Object.assign(board[[targetNode.i,targetNode.j]], {type: 'target', object:'target'});\r\n    return [board, startNode, targetNode];\r\n};\r\n\r\nfunction initializeCanvas(canvasWidth,canvasHeight,s) {\r\n    let [xUnits,yUnits,xOffset,yOffset] = calcUnits(canvasWidth, canvasHeight, s);\r\n    let [board, startNode, targetNode] = initializeBoard(canvasWidth, canvasHeight, s);\r\n    let lineWidth = s/10;\r\n    return {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset,lineWidth};\r\n}\r\n\r\nfunction parseKey(key) {\r\n    let [i,j] = key.split(',').map((item) => parseInt(item));\r\n    return {i:i,j:j};\r\n};\r\n\r\n//=====================================================================================//\r\n// Exports //\r\n//=====================================================================================//\r\nexport {getPointerNode, onMouseDown, onTouchStart}\r\nexport {drawSearch, drawLine, moveStart, moveTarget, clearBoard}\r\nexport {drawWeight, drawStart, drawTarget, drawNode, drawHex, fillHex};\r\nexport {sleep, calcHexCenter, nodeDistance, nearestHex, calcHexPath, calcUnits, initializeBoard, initializeCanvas, parseKey};","import React from 'react';\r\nimport {initializeBoard, drawWeight, drawStart, drawTarget, drawNode} from '../utils/canvas-tools';\r\n\r\n/*\r\n// To Do //\r\n//========================================================================================//\r\n-- Make new drawWeight function that takes node as imput instead of pos\r\n\r\n//========================================================================================//\r\n*/\r\n\r\n\r\nclass Canvas extends React.Component {\r\n    componentDidMount() {\r\n        let [board] = initializeBoard(this.props.width, this.props.height, this.props.s);\r\n        for (let key in board) {\r\n            let {node, fill, object, angle} = board[key];\r\n            this.updateNode(node, fill, object, angle);\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        if (nextProps.updateID === this.props.updateID) return false;\r\n        else return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.s !== prevProps.s) {\r\n            let canvas = this.props.canvasRef.current;\r\n            let cx = canvas.getContext('2d');\r\n            cx.clearRect(0,0,this.props.width,this.props.height);\r\n            this.componentDidMount();\r\n        } else {\r\n            for (let key in this.props.canvasUpdates) {\r\n                let {node, fill, object, angle} = this.props.canvasUpdates[key];\r\n                this.updateNode(node, fill, object, angle);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateNode(node,fill,object,angle) {\r\n        if (fill) {\r\n            // need to fill white first if color = '#b7ff4ae8' since it is transparent\r\n            drawNode(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, fill, this.props.canvasRef);\r\n        }\r\n        if (object) {\r\n            if (object === 'weight') {\r\n                drawWeight(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, this.props.canvasRef);\r\n            } else if (object === 'start') {\r\n                //console.log(angle);\r\n                drawStart(node, this.props.s, this.props.xOffset, this.props.yOffset, this.props.canvasRef,angle);\r\n            } else if (object === 'target') {\r\n                drawTarget(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, this.props.canvasRef);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas\r\n                ref = {this.props.canvasRef}\r\n                width = {this.props.width}\r\n                height = {this.props.height}\r\n                onMouseDown={this.props.running ? null : (downEvent) => this.props.onMouseDown(downEvent)}\r\n                onTouchStart={this.props.running ? null : (startEvent) => this.props.onTouchStart(startEvent)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;","import {isSameNode, isValidNode, findNeighbors, manhattanDistance, minHeap} from './utils';\r\n\r\n//=====================================================================================//\r\n// Unweighted Algorithms //\r\n//=====================================================================================//\r\nfunction depthFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.unshift(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction breadthFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.push(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction hillClimbing(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // sort nodes according to distance to target node (descending)\r\n        neighbors.sort((node1,node2) => manhattanDistance(node2,targetNode) - manhattanDistance(node1,targetNode));\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.unshift(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction beamSearch(startNode,targetNode,xUnits,yUnits,board, w = 2) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // sort nodes according to distance to target node (descending)\r\n        neighbors.sort((node1,node2) => manhattanDistance(node2,targetNode) - manhattanDistance(node1,targetNode));\r\n        // filter to valid nodes and keep only the first w number of them\r\n        neighbors = neighbors.filter(\r\n            (node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j))\r\n        ).slice(-w);\r\n        for (let newNode of neighbors) {\r\n            let newPath = currentPath.concat([newNode]);\r\n            // if we found target return the completed path and updates, else add path extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.push(newPath);\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction bestFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:manhattanDistance(startNode,targetNode) , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = path.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.insert({distance:manhattanDistance(newNode,targetNode) , path:newPath});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Weighted Algorithms //\r\n//=====================================================================================//\r\n// Dictionary below determines relative weight moving from one node to another.\r\n// Essentially moving through a weight is 10 times as difficult as an empty node.\r\nconst pathWeights = {'empty':1, 'weight':10, 'target':1};\r\n\r\nfunction branchNBound(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    let bestDistance = Infinity;\r\n    let bestPath = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if newDistance is not less than the bestDistance to the target so far, then drop the path from the queue\r\n            if (newDistance >= bestDistance) {\r\n                if (!isSameNode(newNode,targetNode)) {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                }\r\n                continue;\r\n            };\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                [bestPath, bestDistance] = [newPath, newDistance];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({distance:newDistance , path:newPath});\r\n            }\r\n        }\r\n    }\r\n    // Return best path (which could be empty if no path found) and searchUpdates for animation\r\n    return [bestPath, searchUpdates];\r\n};\r\n\r\nfunction aStarSearch(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.estimatedDistance < path2.estimatedDistance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({estimatedDistance:manhattanDistance(startNode,targetNode), distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                // extend other paths to be sure they aren't actually closer to the target (not sure about this part)\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({\r\n                    estimatedDistance: newDistance + manhattanDistance(newNode,targetNode), \r\n                    distance:newDistance, \r\n                    path:newPath\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\n\r\n\r\n// This is an old version of branch and bound algorithm. It doesn't have employ the check at the end\r\n// once the target node is found, but I'm keeping it around because it's structure is much simpler\r\n// and might be useful later.\r\n/*\r\nfunction branchNBound(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        // sort nodes according to weighted distance from currentNode (descending)\r\n        neighbors.sort((node1,node2) => pathWeights[board[[node2.i,node2.j]].type] - pathWeights[board[[node1.i,node1.j]].type]);\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                // extend other paths to be sure they aren't actually closer to the target (not sure about this part)\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({distance:newDistance , path:newPath});\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n*/\r\n\r\n// Similar to above, this is an old version of the A* search algorithm. However, this old method does in fact run\r\n// a check after finding the target, but I now realize that this check is uneccessary. The heuristic distance is\r\n// always a lower bound which means there is no possibility of finding a shorter path once we have reached the target.\r\n/*\r\nfunction aStarSearch(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.estimatedDistance < path2.estimatedDistance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({estimatedDistance:manhattanDistance(startNode,targetNode), distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    let bestDistance = Infinity;\r\n    let bestPath = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        // sort nodes according to weighted distance from currentNode (descending) (this actually might not be necessary)\r\n        //neighbors.sort((node1,node2) => pathWeights[board[[node2.i,node2.j]].type] - pathWeights[board[[node1.i,node1.j]].type]);\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            let estimatedDistance = newDistance + manhattanDistance(newNode,targetNode);\r\n            // if newDistance is not less than the bestDistance to the target so far, then drop the path from the queue\r\n            if (estimatedDistance >= bestDistance) {\r\n                if (!isSameNode(newNode,targetNode)) {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                }\r\n                continue;\r\n            };\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                [bestPath, bestDistance] = [newPath, newDistance];\r\n                console.log(`bestDistance:${bestDistance}`);\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({\r\n                    estimatedDistance: estimatedDistance, \r\n                    distance:newDistance, \r\n                    path:newPath\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [bestPath, searchUpdates];\r\n};\r\n*/\r\n\r\nexport {depthFirst, breadthFirst, hillClimbing, beamSearch, bestFirst, branchNBound, aStarSearch};","import {depthFirst, breadthFirst, hillClimbing, beamSearch, bestFirst, branchNBound, aStarSearch} from './algorithms';\r\n\r\nfunction pathFinderAnimation(state,canvasRef,setState,isRunning) {\r\n    // Set state to running so user can't interfere with pathFinder \r\n    setState((prevState) => ({\r\n        running: true, \r\n        updateID: prevState.updateID + 1\r\n    }));\r\n    let pathFinder;\r\n    switch (state.algorithm) {\r\n        case 0: pathFinder = depthFirst; break;\r\n        case 1: pathFinder = breadthFirst; break;\r\n        case 2: pathFinder = hillClimbing; break;\r\n        case 3: pathFinder = beamSearch; break;\r\n        case 4: pathFinder = bestFirst; break;\r\n        case 5: pathFinder = branchNBound; break;\r\n        case 6: pathFinder = aStarSearch; break;\r\n        default: pathFinder = breadthFirst;\r\n    };\r\n    //let startTime = performance.now();\r\n    let [path, searchUpdates] = pathFinder(state.startNode,state.targetNode,state.xUnits,state.yUnits,state.board);\r\n    //let endTime = performance.now();\r\n    //console.log(`Algorithm Time = ${endTime - startTime}`);\r\n    let hexsPerSecond;\r\n    switch (state.speed) {\r\n        case 0: hexsPerSecond = 10; break;\r\n        case 1: hexsPerSecond = 100; break;\r\n        case 2: hexsPerSecond = 1000; break;\r\n        case 3: hexsPerSecond = 10000; break;\r\n        case 4: hexsPerSecond = Infinity; break;\r\n        default: hexsPerSecond = 1000;\r\n    };\r\n    searchAnimation(path,searchUpdates,hexsPerSecond,state.board,setState,isRunning);\r\n};\r\n\r\nfunction searchAnimation(path,searchUpdates,hexsPerSecond,board,setState,isRunning) {\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = searchUpdates.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = searchUpdates.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                pathAnimation(path,Math.ceil(hexsPerSecond/6),board,setState,isRunning);\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction pathAnimation(path,hexsPerSecond,board,setState,isRunning) {\r\n    let pathUpdates = [];\r\n    for (let node of path.slice(1,-1)) {\r\n        pathUpdates.push(Object.assign({},board[[node.i,node.j]],{fill:'#b1fc40'}));\r\n    }\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = pathUpdates.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = pathUpdates.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                setState((prevState) => ({\r\n                    running: false,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: []\r\n                }));\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nexport {pathFinderAnimation};","import React from 'react';\r\nimport ControlPanel from './ControlPanel';\r\nimport Canvas from './Canvas';\r\nimport {onMouseDown, onTouchStart, clearBoard, initializeCanvas} from '../utils/canvas-tools';\r\nimport {pathFinderAnimation} from '../utils/animations';\r\n\r\nclass PathFinder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let { innerWidth: width, innerHeight: height } = window\r\n        // Setting Up Canvas\r\n        let canvasHeight = height*.9-4;\r\n        let canvasWidth = width;\r\n        this.canvasRef = React.createRef();\r\n        let s = 15;\r\n        let {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset,lineWidth} = initializeCanvas(canvasWidth,canvasHeight,s);\r\n        // Setting Initial State\r\n        this.state = {\r\n            algorithm: 5,\r\n            speed: 2,\r\n            tool: 0,\r\n            canvasWidth: canvasWidth,\r\n            canvasHeight: canvasHeight,\r\n            s: s,\r\n            lineWidth: lineWidth,\r\n            board: board,\r\n            startNode: startNode,\r\n            targetNode: targetNode,\r\n            xUnits: xUnits,\r\n            yUnits: yUnits,\r\n            xOffset: xOffset,\r\n            yOffset: yOffset,\r\n            running: false,\r\n            canvasUpdates: [],\r\n            updateID: 0\r\n        }\r\n    }\r\n\r\n    toggleSelected(key,id) {\r\n        if (key !== 'clear') {\r\n            this.setState({\r\n                [key]:id\r\n            })\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    startPathFinder() {\r\n        // Check to make sure not already running\r\n        if (this.state.running) return;\r\n        const setState = (stateUpdate) => this.setState(stateUpdate);\r\n        const isRunning = () => {return this.state.running;};\r\n        this.clearBoard(1);\r\n        pathFinderAnimation(this.state,this.canvasRef,setState,isRunning);\r\n    }\r\n\r\n    stopPathFinder() {\r\n        this.setState((prevState) => ({running:false, updateID:prevState.updateID+1}));\r\n    }\r\n\r\n    onMouseDown(downEvent) {\r\n        onMouseDown(downEvent,this.state,this.canvasRef,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    onTouchStart(startEvent) {\r\n        onTouchStart(startEvent,this.state,this.canvasRef,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    clearBoard(id) {\r\n        if (this.state.running) return;\r\n        clearBoard(id,this.canvasRef,this.state,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    changeHexSize(s) {\r\n        if (this.state.running) return;\r\n        this.setState((prevState) => {\r\n            return Object.assign(\r\n                {}, \r\n                initializeCanvas(prevState.canvasWidth,prevState.canvasHeight,s),\r\n                {updateID: prevState.updateID + 1, canvasUpdates: [], s:s}\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"PathFinder\">\r\n                <ControlPanel \r\n                    toggleSelected={(key,id) => this.toggleSelected(key,id)}\r\n                    clearBoard={(id) => this.clearBoard(id)}\r\n                    changeHexSize={(s) => this.changeHexSize(s)}\r\n                    startSearch={() => this.startPathFinder()}\r\n                    stopSearch={() => this.stopPathFinder()}\r\n                />\r\n                <Canvas\r\n                    className=\"canvas\"\r\n                    canvasRef={this.canvasRef}\r\n                    width={this.state.canvasWidth}\r\n                    height={this.state.canvasHeight}\r\n                    s={this.state.s}\r\n                    lineWidth={this.state.lineWidth}\r\n                    xOffset={this.state.xOffset}\r\n                    yOffset={this.state.yOffset}\r\n                    canvasUpdates={this.state.canvasUpdates}\r\n                    updateID={this.state.updateID}\r\n                    running={this.state.running}\r\n                    onMouseDown={(downEvent) => this.onMouseDown(downEvent)}\r\n                    onTouchStart={(startEvent) => this.onTouchStart(startEvent)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathFinder;","import React from 'react';\nimport PathFinder from './components/PathFinder';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}