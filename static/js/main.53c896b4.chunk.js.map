{"version":3,"sources":["components/Dropdown.js","components/SliderDropdown.js","components/ControlPanel.js","utils/utils.js","utils/canvas-tools.js","components/Canvas.js","utils/algorithms.js","utils/animations.js","components/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","state","listOpen","headerTitle","title","options","this","setState","prevState","event","key","toggleList","document","addEventListener","escapeList","backgroundColor","fontColor","windowState","className","onClick","style","color","icon","faAngleUp","size","transform","faAngleDown","map","item","id","callBack","selected","faCheck","React","Component","onClickOutside","SliderDropdown","value","hexSize","target","window","innerWidth","innerHeight","type","orient","min","max","onInput","changeValue","onMouseUp","submitValue","onKeyDown","onTouchEnd","ControlPanel","algorithm","speed","tool","mazes","clear","temp","slice","i","length","toggleSelected","showControls","disableOnClickOutside","s","changeHexSize","drawMaze","clearBoard","running","clickEvent","stopSearch","startSearch","faPause","faPlay","DIRECTIONS","j","isSameNode","node1","node2","nodeOnBoard","node","xUnits","yUnits","isValidNode","board","findNeighbors","directions","neighbors","change","neighbor","push","manhattanDistance","hexCoord1","hexCoordinates","hexCoord2","dx","x","dy","y","Math","sign","abs","ceil2","dotProduct","v1","v2","scalarProd","a","v","vectorDiff","vectorMag","sqrt","vectorOrthoMag","V","b","vectorAngle","angle","atan","PI","minHeap","lessThan","heap","floor","minValue","shift","unshift","pop","disjointSet","dictionary","hasOwnProperty","parent","xRoot","find","yRoot","shuffleArray","array","arrayCopy","random","drawLine","startNode","endNode","lineWidth","xOffset","yOffset","canvasRef","currentNode","nodeDistance","canvasUpdates","targetNode","Object","assign","fill","object","minDis","Infinity","tempNode","currentDis","updateID","moveStart","oldNode","newNode","oldState","moveTarget","drawWeight","pos","calcHexCenter","sideLength","h","w1","w2","rw","r1","cx","current","getContext","path","beginPath","fillStyle","moveTo","lineTo","closePath","ringCenter","arc","stroke","drawHex","calcHexPath","fillHex","getPointerNode","domNode","rect","getBoundingClientRect","J","I","u","nearestHex","clientX","left","clientY","top","pos1","pos2","theta","cos","sin","calcUnits","canvasWidth","canvasHeight","initializeBoard","offset","initializeCanvas","parseKey","split","parseInt","Canvas","width","height","updateNode","nextProps","prevProps","clearRect","componentDidMount","startPosition","c","oldPos","newPos","drawStartPos","drawNode","drawStart","drawTarget","ref","onMouseDown","downEvent","onTouchStart","startEvent","depthFirst","queue","visitedNodes","Set","searchUpdates","currentPath","has","add","newState","newPath","concat","breadthFirst","hillClimbing","sort","beamSearch","w","filter","bestFirst","path1","path2","distance","insert","pathWeights","branchNBound","bestDistance","bestPath","newDistance","aStarSearch","estimatedDistance","randomWalls","mazePath","randomWeights","depthFirstMaze","nodesToAdd","breadthFirstMaze","kruskalsMaze","unVisitedNodes","pathNodes","disjointPaths","roots","rootsSet","makeSet","union","primsMaze","startFound","targetFound","huntAndKill","newRandomWalk","searchSpeed","0","1","2","3","4","drawPathSpeed","moveDownPathSpeed","victorySpeed","drawMazeSpeed","pathFinderAnimation","isRunning","pathFinder","hexsPerSecond","lastTime","currentStart","steps","totalHexs","requestAnimationFrame","frame","time","start","boardUpdates","update","updateAnimation","pathUpdates","totalSteps","totalTime","startTime","prevStartNode","prevEndNode","startPos","endPos","prevNode","radiansPerSecond","targetPos","startAngle","victoryAnimation","moveDownPathAnimation","drawPathAnimation","searchAnimation","mazeAnimation","mazeID","mazeBuilder","PathFinder","getWindowState","createRef","handleResize","stateUpdate","button","onMove","onMoveType","canvas","origNode","move","moveEvent","buttons","removeEventListener","oldStart","newStart","oldTarget","newTarget","preventDefault","touches","end","endEvent","currentState","includes","doTheJohnWall","faBars","toggleControls","5","6","startPathFinder","stopPathFinder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53c896b4.chunk.js","sourcesContent":["import React from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleUp , faAngleDown, faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass Dropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            options: this.props.options\r\n        }\r\n    }\r\n\r\n    handleClickOutside() {\r\n        this.setState({listOpen: false});\r\n    }\r\n\r\n    toggleList() {\r\n        this.setState(prevState => ({\r\n            listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    escapeList(event) {\r\n        if (this.state.listOpen && event.key === 'Escape') this.toggleList();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown',(event) => this.escapeList(event));\r\n    }\r\n\r\n    render() {\r\n        const {listOpen, headerTitle, options} = this.state;\r\n        let backgroundColor, fontColor;\r\n        if (this.props.windowState === 1 || this.props.windowState === 2) {\r\n            if (listOpen) [ backgroundColor , fontColor ] = ['#27af62' , 'white' ];\r\n            else [ backgroundColor , fontColor ] = [ 'white' , 'black' ];\r\n        } else [ backgroundColor , fontColor ] = [ '#191414' , 'white' ];\r\n        return (\r\n            <div className=\"Dropdown\">\r\n                <div className=\"Dropdown-header-wrapper\">\r\n                    <div className=\"Dropdown-header\" onClick={() => this.toggleList()} style = {{backgroundColor: backgroundColor, color:fontColor}}>\r\n                        <div className=\"Dropdown-header-title\">{headerTitle}</div>\r\n                        {listOpen\r\n                            ? <FontAwesomeIcon className=\"angle-up\" icon={faAngleUp} size=\"lg\" transform=\"down-1\"/>\r\n                            : <FontAwesomeIcon className=\"angle-down\" icon={faAngleDown} size=\"lg\" transform=\"down-1\"/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {listOpen && <ul className={headerTitle+\"-Dropdown-list\"}>\r\n                    {options.map((item) => (\r\n                        <li key={item.id} className=\"Dropdown-list-item\" onClick={() => this.props.callBack(item.id,item.key,item.title)}>\r\n                            {item.title}\r\n                            {item.selected && <FontAwesomeIcon className=\"check\" icon={faCheck} size=\"1x\"/>}\r\n                        </li>\r\n                    ))}\r\n                </ul>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default onClickOutside(Dropdown);","import React from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleUp , faAngleDown} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass SliderDropdown extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listOpen: false,\r\n            headerTitle: this.props.title,\r\n            value: this.props.hexSize\r\n        }\r\n    }\r\n\r\n    handleClickOutside() {\r\n        this.setState({\r\n            listOpen: false\r\n        });\r\n    }\r\n\r\n    toggleList() {\r\n        this.setState(prevState => ({\r\n            listOpen: !prevState.listOpen\r\n        }));\r\n    }\r\n\r\n    changeValue(event) {\r\n        this.setState({value:event.target.value});\r\n    }\r\n\r\n    submitValue(event) {\r\n        this.props.callBack(event.target.value);\r\n    }\r\n\r\n    escapeList(event) {\r\n        if (this.state.listOpen && event.key === 'Escape') this.toggleList();\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keydown',(event) => this.escapeList(event));\r\n    }\r\n\r\n    render() {\r\n        let backgroundColor, fontColor;\r\n        if (window.innerWidth < 481 || window.innerHeight < 481) {\r\n            if (this.state.listOpen) [ backgroundColor , fontColor ] = ['#27af62' , 'white' ];\r\n            else [ backgroundColor , fontColor ] = [ 'white' , 'black' ];\r\n        } else [ backgroundColor , fontColor ] = [ '#191414' , 'white' ];\r\n        return (\r\n            <div className=\"Dropdown\">\r\n                <div className=\"Dropdown-header-wrapper\">\r\n                    <div className=\"Dropdown-header\" onClick={() => this.toggleList()} style = {{backgroundColor: backgroundColor, color:fontColor}}>\r\n                        <div className=\"Dropdown-header-title\">{this.state.headerTitle}</div>\r\n                        {this.state.listOpen\r\n                            ? <FontAwesomeIcon className=\"angle-up\" icon={faAngleUp} size=\"lg\" transform=\"down-1\"/>\r\n                            : <FontAwesomeIcon className=\"angle-down\" icon={faAngleDown} size=\"lg\" transform=\"down-1\"/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {this.state.listOpen && <div className={\"SliderDropdown-list\"}>\r\n                    <div className=\"slider-text\">{this.state.value}</div>\r\n                    <input className=\"slider\" type=\"range\" orient=\"vertical\" min=\"5\" max=\"100\"\r\n                        value={this.state.value}\r\n                        onInput={(event) => this.changeValue(event)}\r\n                        onMouseUp={(event) => this.submitValue(event)}\r\n                        onKeyDown={(event) => {if (event.key === \"Enter\") this.submitValue(event);}}\r\n                        onTouchEnd={(event) => this.submitValue(event)}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default onClickOutside(SliderDropdown);","import React from 'react';\r\nimport Dropdown from './Dropdown';\r\nimport SliderDropdown from './SliderDropdown';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay , faPause } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass ControlPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            algorithm: [\r\n                        {id:0, title:'Depth-First Search', selected:false, key:'algorithm'},\r\n                        {id:1, title:'Breadth-First Search', selected:false, key:'algorithm'},\r\n                        {id:2, title:'Hill Climbing', selected:false, key:'algorithm'},\r\n                        {id:3, title:'Beam Search (\\u03C9=2)', selected:false, key:'algorithm'},\r\n                        {id:4, title:'Best-First Search', selected:false, key:'algorithm'},\r\n                        {id:5, title:'Branch & Bound', selected:true, key:'algorithm'},\r\n                        {id:6, title:'A* Search', selected:false, key:'algorithm'}\r\n            ],\r\n            speed: [\r\n                        {id:0, title:'Slow', selected:false, key:'speed'},\r\n                        {id:1, title:'Medium', selected:false, key:'speed'},\r\n                        {id:2, title:'Fast', selected:true, key:'speed'},\r\n                        {id:3, title:'Ludicrous', selected:false, key:'speed'},\r\n                        {id:4, title:'Instant', selected:false, key:'speed'}\r\n            ],\r\n            tool: [\r\n                        {id:0, title:'Walls', selected:true, key:'tool'},\r\n                        {id:1, title:'Weights', selected:false, key:'tool'},\r\n                        {id:2, title:'Eraser', selected:false, key:'tool'}\r\n            ],\r\n            mazes: [\r\n                        {id:0, title:'Random Walls', selected:false, key:'mazes'},\r\n                        {id:1, title:'Random Weights', selected:false, key:'mazes'},\r\n                        {id:2, title:'Depth-First Maze', selected:false, key:'mazes'},\r\n                        {id:3, title:'Breadth-First Maze', selected:false, key:'mazes'},\r\n                        {id:4, title:\"Hunt & Kill Maze\", selected:false, key:'mazes'},\r\n                        {id:5, title:\"Prim's Maze\", selected:false, key:'mazes'},\r\n                        {id:6, title:\"Kruskal's Maze\", selected:false, key:'mazes'}\r\n            ],\r\n            clear: [\r\n                        {id:1, title:'Path', selected:false, key:'clear'},\r\n                        {id:2, title:'Walls', selected:false, key:'clear'},\r\n                        {id:3, title:'Weights', selected:false, key:'clear'},\r\n                        {id:0, title:'Board', selected:false, key:'clear'},\r\n                        {id:4, title:'Canvas', selected:false, key:'clear'}\r\n            ]\r\n        }\r\n    }\r\n\r\n    toggleSelected(id,key,title) {\r\n        if (key !== 'clear') {\r\n            let temp = this.state[key].slice();\r\n            for (let i = 0; i < temp.length; i++) {\r\n                temp[i].selected = (id === temp[i].id);\r\n            }\r\n            this.setState({\r\n                [key]:temp\r\n            });\r\n        }\r\n        this.props.toggleSelected(key,id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ControlPanel\">\r\n                {this.props.showControls &&\r\n                    <div className=\"Controls-Wrapper-Background\">\r\n                        <div className=\"Controls-Wrapper\">\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Algorithm-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Algorithm'} \r\n                                    options={this.state.algorithm}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\"> \r\n                                <Dropdown className=\"Speed-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Speed'} \r\n                                    options={this.state.speed}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Tool-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Tool'} \r\n                                    options={this.state.tool}\r\n                                    callBack = {(id,key,title) => this.toggleSelected(id,key,title)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <SliderDropdown className=\"Hex-Size-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Hex Size'}\r\n                                    hexSize={this.props.hexSize}\r\n                                    callBack = {(s) => this.props.changeHexSize(s)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Mazes-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Mazes'} \r\n                                    options={this.state.mazes}\r\n                                    callBack = {(id,key,title) => this.props.drawMaze(id)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                            <div className=\"ControlPanel-column\">\r\n                                <Dropdown className=\"Clear-Dropdown\"\r\n                                    windowState={this.props.windowState}\r\n                                    title={'Clear'} \r\n                                    options={this.state.clear}\r\n                                    callBack = {(id,key,title) => this.props.clearBoard(id)}\r\n                                    disableOnClickOutside={this.props.windowState === 1}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <div className=\"Play-Button-Wrapper\">\r\n                    <div className=\"Play-Button\" onClick={this.props.running\r\n                        ? (clickEvent) => this.props.stopSearch()\r\n                        : (clickEvent) => this.props.startSearch()\r\n                    }>\r\n                        {this.props.running\r\n                            ? <FontAwesomeIcon className=\"pause\" icon={faPause}/>\r\n                            : <FontAwesomeIcon className=\"play\" icon={faPlay}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;","//=====================================================================================//\r\n// Constants //\r\n//=====================================================================================//\r\nconst DIRECTIONS = {\r\n    even: [\r\n            { i:0  , j:1 },\r\n            { i:-1 , j:0 },\r\n            { i:-1 , j:-1 },\r\n            { i:0  , j:-1 },\r\n            { i:1  , j:-1 },\r\n            { i:1  , j:0 }\r\n    ],\r\n    odd: [\r\n            { i:0  , j:1 },\r\n            { i:-1 , j:1 },\r\n            { i:-1 , j:0 },\r\n            { i:0  , j:-1 },\r\n            { i:1  , j:0 },\r\n            { i:1  , j:1 }\r\n    ]\r\n};\r\n\r\n//=====================================================================================//\r\n// Helper Functions //\r\n//=====================================================================================//\r\n\r\n// Node Functions: node = {i:i,j:j}//\r\n//=================================//\r\nfunction isSameNode(node1,node2) {\r\n    return (node1.i === node2.i && node1.j === node2.j);\r\n};\r\n\r\nfunction nodeInPath(node,path) {\r\n    for (let pathNode of path) {\r\n        if (isSameNode(node,pathNode)) return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nfunction addNodes(node1,node2) {\r\n    return { i:(node1.i + node2.i) , j:(node1.j + node2.j) };\r\n};\r\n\r\nfunction nodeOnBoard(node,xUnits,yUnits) {\r\n    return (node.i>=0 && node.j>=0 && node.i<xUnits && node.j<yUnits);\r\n};\r\n\r\nfunction isValidNode(node,board,xUnits,yUnits) {\r\n    let state = board[[node.i,node.j]];\r\n    let onBoard = nodeOnBoard(node,xUnits,yUnits);\r\n    return (onBoard && state.type !== 'wall');\r\n};\r\n\r\nfunction findNeighbors(node) {\r\n    let neighbors = [];\r\n    let directions;\r\n    if (node.i%2 === 0) directions = DIRECTIONS.even;\r\n    else directions = DIRECTIONS.odd;\r\n    for (let change of directions) {\r\n        let neighbor = addNodes(node,change);\r\n        neighbors.push(neighbor);\r\n    }\r\n    return neighbors;\r\n};\r\n\r\nfunction manhattanDistance(node1,node2) {\r\n    const hexCoord1 = hexCoordinates(node1);\r\n    const hexCoord2 = hexCoordinates(node2);\r\n    const dx = hexCoord2.x - hexCoord1.x;\r\n    const dy = hexCoord2.y - hexCoord1.y;\r\n    if (Math.sign(dx) === Math.sign(dy)) {\r\n        return Math.max(Math.abs(dx), Math.abs(dy));\r\n    }\r\n    return Math.abs(dx) + Math.abs(dy);\r\n};\r\n\r\nfunction hexCoordinates(node) {\r\n    return { x: node.j - floor2(node.i) , y: node.j + ceil2(node.i) };\r\n};\r\n\r\nfunction floor2(x) {\r\n    return ((x >= 0) ? (x >> 1) : (x - 1) / 2);\r\n};\r\n\r\nfunction ceil2(x) {\r\n    return ((x >= 0) ? ((x + 1) >> 1) : x / 2);\r\n}\r\n\r\n// Vectors Functions: v = {x:x,y:y} //\r\n//==================================//\r\nfunction dotProduct(v1,v2) {\r\n    return v1.x*v2.x + v1.y*v2.y;\r\n};\r\n\r\nfunction scalarProd(a,v) {\r\n    return {x:a*v.x , y:a*v.y};\r\n};\r\n\r\nfunction vectorDiff(v1,v2) {\r\n    return {x: v1.x - v2.x, y: v1.y - v2.y};\r\n};\r\n\r\nfunction vectorSum(v1,v2) {\r\n    return {x: v1.x + v2.x, y: v1.y + v2.y};\r\n};\r\n\r\nfunction vectorMag(v) {\r\n    return Math.sqrt((v.x)**2 + (v.y)**2);\r\n};\r\n\r\nfunction vectorOrthoMag(v,V) {\r\n    let b = scalarProd(dotProduct(v,V)/(vectorMag(V))**2, V);\r\n    let d =  vectorDiff(v, b);\r\n    return vectorMag(d);\r\n};\r\n\r\nfunction vectorAngle(v) {\r\n    let angle = Math.atan( v.y / v.x );\r\n    if (v.x < 0) angle += Math.PI;\r\n    return angle;\r\n};\r\n\r\n// Data Structures for Algorithms //\r\n//==================================//\r\nclass minHeap {\r\n    constructor(lessThan) {\r\n        this.heap = [];\r\n        this.lessThan = lessThan\r\n    }\r\n\r\n    length() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    getMin() {\r\n        return this.heap[0];\r\n    }\r\n\r\n    insert(value) {\r\n        this.heap.push(value);\r\n        let i = this.heap.length-1;\r\n        while (i > 0) {\r\n            if (this.lessThan(this.heap[i] , this.heap[Math.floor((i-1)/2)])) {\r\n                [ this.heap[Math.floor((i-1)/2)] , this.heap[i] ] = [ this.heap[i] , this.heap[Math.floor((i-1)/2)] ];\r\n                i = Math.floor((i-1)/2);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    shift() {\r\n        const minValue = this.heap.shift();\r\n        if (this.heap.length === 0) return minValue;\r\n        this.heap.unshift(this.heap.pop());\r\n        let i = 0;\r\n        while (2*i+2 < this.heap.length) {\r\n            if (this.lessThan(this.heap[2*i+1], this.heap[i]) || this.lessThan(this.heap[2*i+2], this.heap[i])) {\r\n                if (this.lessThan(this.heap[2*i+1], this.heap[2*i+2])) {\r\n                    [ this.heap[2*i+1], this.heap[i] ] = [ this.heap[i] , this.heap[2*i+1] ];\r\n                    i = 2*i + 1;\r\n                } else {\r\n                    [ this.heap[2*i+2], this.heap[i] ] = [ this.heap[i] , this.heap[2*i+2] ];\r\n                    i = 2*i + 2;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return minValue;\r\n    }\r\n};\r\n\r\nclass disjointSet {\r\n    constructor() {\r\n        this.dictionary = {};\r\n    }\r\n\r\n    makeSet(x) {\r\n        if (this.dictionary.hasOwnProperty(x)) return;\r\n        else {\r\n            this.dictionary[x] = {\r\n                parent: x,\r\n                size: 1\r\n            }\r\n        }\r\n    }\r\n\r\n    find(y) {\r\n        // using path splitting to improve performance\r\n        let x = y;\r\n        while (this.dictionary[x].parent !== x) {\r\n            let parent = this.dictionary[x].parent;\r\n            let grandparent = this.dictionary[parent].parent;\r\n            [ x , this.dictionary[x].parent ] = [ parent , grandparent ];\r\n        }\r\n        return x;\r\n    }\r\n\r\n    union(x,y) {\r\n        // using size, again to improve performance\r\n        let xRoot = this.find(x);\r\n        let yRoot = this.find(y);\r\n        if (xRoot === yRoot) return;\r\n        if (this.dictionary[xRoot].size < this.dictionary[yRoot]) {\r\n            [ xRoot , yRoot ] = [ yRoot , xRoot ];\r\n        }\r\n        this.dictionary[yRoot].parent = xRoot;\r\n        this.dictionary[xRoot].size += this.dictionary[yRoot].size;\r\n    }\r\n};\r\n\r\nfunction shuffleArray(array) {\r\n    let arrayCopy = array.slice();\r\n    for (let i = arrayCopy.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [arrayCopy[i], arrayCopy[j]] = [arrayCopy[j], arrayCopy[i]];\r\n    }\r\n    return arrayCopy;\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Exports //\r\n//=====================================================================================//\r\nexport {isSameNode, nodeInPath, addNodes, nodeOnBoard, isValidNode, findNeighbors, manhattanDistance};      // node functions\r\nexport {dotProduct, scalarProd, vectorDiff, vectorSum, vectorMag, vectorOrthoMag, vectorAngle};             // vector functions\r\nexport {minHeap, disjointSet, shuffleArray};                                                                // algorithm data structures\r\n","import {isSameNode, nodeOnBoard, findNeighbors, dotProduct, vectorOrthoMag} from './utils';\r\n\r\n//=====================================================================================//\r\n// Canvas Mouse and Touch Trackers for Drawing and Manipulating Board //\r\n//=====================================================================================//\r\nfunction onMouseDown(downEvent,state,canvasRef,setState) {\r\n    if (downEvent.button !== 0) return;\r\n    let canvas = canvasRef.current;\r\n    let node = getPointerNode(downEvent,canvas,state.s,state.xOffset,state.yOffset);\r\n    let origNode = node;\r\n    let onMove, onMoveType;\r\n    if (isSameNode(node,state.startNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) =>\r\n        moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 1;\r\n    } else if (isSameNode(node,state.targetNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) => \r\n        moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 2;\r\n    } else {\r\n        drawLine(node,node,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        onMove = (startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) => \r\n        drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits);\r\n        onMoveType = 0;\r\n    }\r\n    let move = (moveEvent) => {\r\n        if (moveEvent.buttons === 0) {\r\n            canvas.removeEventListener(\"mousemove\", move);\r\n            let board = {};\r\n            if (onMoveType === 1) {\r\n                let oldStart = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n                let newStart = {[[node.i,node.j]]: {node:node,type:'start',fill:'white',object:'start'}};\r\n                Object.assign(board, state.board, oldStart, newStart);\r\n                setState({board:board});\r\n            } else if (onMoveType === 2) {\r\n                let oldTarget = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n                let newTarget = {[[node.i,node.j]]: {node:node,type:'target',fill:'white',object:'target'}};\r\n                Object.assign(board, state.board, oldTarget, newTarget);\r\n                setState({board:board});\r\n            }\r\n        } else {\r\n            let newNode = getPointerNode(moveEvent,canvas,state.s,state.xOffset,state.yOffset);\r\n            if (isSameNode(newNode,node)) return;\r\n            if ( \r\n                    (onMoveType !== 0 && !nodeOnBoard(newNode,state.xUnits,state.yUnits))\r\n                ||  (onMoveType === 1 && isSameNode(newNode,state.targetNode))\r\n                ||  (onMoveType === 2 && isSameNode(newNode,state.startNode))\r\n            ) return;\r\n            onMove(node,newNode,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n                (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n            node = newNode;\r\n        }\r\n    };\r\n    canvas.addEventListener(\"mousemove\", move);\r\n};\r\n\r\n\r\nfunction onTouchStart(startEvent,state,canvasRef,setState) {\r\n    // scrolling prevented using CSS instead because I could not find a way to make event listener active\r\n    // startEvent.preventDefault();\r\n    let canvas = canvasRef.current;\r\n    let node = getPointerNode(startEvent.touches[0],canvas,state.s,state.xOffset,state.yOffset);\r\n    let origNode = node;\r\n    let onMove, onMoveType;\r\n    if (isSameNode(node,state.startNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) =>\r\n        moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 1;\r\n    } else if (isSameNode(node,state.targetNode)) {\r\n        onMove = (oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) => \r\n        moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState);\r\n        onMoveType = 2;\r\n    } else {\r\n        drawLine(node,node,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        onMove = (startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) => \r\n        drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits);\r\n        onMoveType = 0;\r\n    }\r\n    let move = (moveEvent) => {\r\n        let newNode = getPointerNode(moveEvent.touches[0],canvas,state.s,state.xOffset,state.yOffset);\r\n        if (isSameNode(newNode,node)) return;\r\n        if ( \r\n                (onMoveType !== 0 && !nodeOnBoard(newNode,state.xUnits,state.yUnits))\r\n            ||  (onMoveType === 1 && isSameNode(newNode,state.targetNode))\r\n            ||  (onMoveType === 2 && isSameNode(newNode,state.startNode))\r\n        ) return;\r\n        onMove(node,newNode,state.s,state.lineWidth,state.xOffset,state.yOffset,canvasRef,state,\r\n            (stateUpdate) => setState(stateUpdate),state.xUnits,state.yUnits);\r\n        node = newNode;\r\n    };\r\n    let end = (endEvent) => {\r\n        canvas.removeEventListener(\"touchmove\", move);\r\n        canvas.removeEventListener(\"touchend\", end);\r\n        let board = {};\r\n        if (onMoveType === 1) {\r\n            let oldStart = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n            let newStart = {[[node.i,node.j]]: {node:node,type:'start',fill:'white',object:'start'}};\r\n            Object.assign(board, state.board, oldStart, newStart);\r\n            setState({board:board});\r\n        } else if (onMoveType === 2) {\r\n            let oldTarget = {[[origNode.i,origNode.j]]: {node:origNode,type:'empty',fill:'white',object:null}};\r\n            let newTarget = {[[node.i,node.j]]: {node:node,type:'target',fill:'white',object:'target'}};\r\n            Object.assign(board, state.board, oldTarget, newTarget);\r\n            setState({board:board});\r\n        }\r\n    }\r\n    canvas.addEventListener(\"touchmove\", move);\r\n    canvas.addEventListener(\"touchend\", end);\r\n};\r\n\r\n//=====================================================================================//\r\n// Canvas Tools //\r\n//=====================================================================================//\r\nfunction drawLine(startNode,endNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState,xUnits,yUnits) {\r\n    // Setting start of path\r\n    let currentNode = startNode;\r\n    let V = nodeDistance(endNode,startNode,s,xOffset,yOffset);\r\n    // Fill start if not off board and not start/target node\r\n    let canvasUpdates = {};\r\n    if (nodeOnBoard(currentNode,xUnits,yUnits) &&  !isSameNode(currentNode,state.startNode) &&  !isSameNode(currentNode,state.targetNode)\r\n    ) {\r\n        // might be a problem that currentNode changes over time\r\n        if (state.tool === 0) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'wall',fill:'#282c34',object:null}});\r\n        } else if (state.tool === 1) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'weight',fill:'white',object:'weight'}});\r\n        } else if (state.tool === 2) {\r\n            Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'empty',fill:'white',object:null}});\r\n        }\r\n    }\r\n    // Looping over path\r\n    while (!isSameNode(currentNode,endNode)) {\r\n        // Reset minDis\r\n        let minDis = Infinity;\r\n        // Find next hex to move to by looping over adjacent hexs\r\n        let neighbors = findNeighbors(currentNode);\r\n        let tempNode = Object.assign({},currentNode);\r\n        for (let neighbor of neighbors) {\r\n            let v = nodeDistance(neighbor,tempNode,s,xOffset,yOffset);\r\n            let dotProd = dotProduct(v,V);\r\n            if (dotProd >= 0) {\r\n                v = nodeDistance(neighbor,startNode,s,xOffset,yOffset);\r\n                let currentDis = vectorOrthoMag(v,V);\r\n                if (currentDis < minDis) {\r\n                    currentNode = neighbor;\r\n                    minDis = currentDis;\r\n                }\r\n            }\r\n        }\r\n        // If next hex off board then end path\r\n        if (!nodeOnBoard(currentNode,xUnits,yUnits)) break;\r\n        // Fill next hex unless it is start or target node\r\n        else if (!isSameNode(currentNode,state.startNode) && !isSameNode(currentNode,state.targetNode)) {\r\n            // might be a problem that currentNode changes over time\r\n            if (state.tool === 0) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'wall',fill:'#282c34',object:null}});\r\n            } else if (state.tool === 1) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'weight',fill:'white',object:'weight'}});\r\n            } else if (state.tool === 2) {\r\n                Object.assign(canvasUpdates, {[[currentNode.i,currentNode.j]]: {node:currentNode,type:'empty',fill:'white',object:null}});\r\n            }\r\n        }\r\n    }\r\n    // Update state\r\n    setState((prevState) => {\r\n        return {\r\n                    board: Object.assign({},prevState.board,canvasUpdates),\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction moveStart(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) {\r\n    let angle = 0;\r\n    if (state.xUnits > state.yUnits) angle = -Math.PI/2;\r\n    let canvasUpdates = {[[newNode.i,newNode.j]]: {node:newNode,type:'start',fill:'white',object:'start',angle:angle}};             \r\n    const oldState = Object.assign({}, state.board[[oldNode.i,oldNode.j]]);\r\n    if (oldState.type === 'start') {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: {node:oldNode,type:'empty',fill:'white',object:null}});\r\n    } else {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: oldState});\r\n    }\r\n    setState((prevState) => {\r\n        return {\r\n                    startNode: newNode,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction moveTarget(oldNode,newNode,s,lineWidth,xOffset,yOffset,canvasRef,state,setState) {\r\n    let canvasUpdates = {[[newNode.i,newNode.j]]: {node:newNode,type:'target',fill:'white',object:'target'}};             \r\n    const oldState = Object.assign({}, state.board[[oldNode.i,oldNode.j]]);\r\n    if (oldState.type === 'target') {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: {node:oldNode,type:'empty',fill:'white',object:null}});\r\n    } else {\r\n        Object.assign(canvasUpdates, {[[oldNode.i,oldNode.j]]: oldState});\r\n    }\r\n    setState((prevState) => {\r\n        return {\r\n                    targetNode: newNode,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: canvasUpdates\r\n        }\r\n    });\r\n};\r\n\r\nfunction clearBoard(id,canvasRef,state,setState) {\r\n    if (id === 0) {\r\n        let canvas = canvasRef.current;\r\n        let cx = canvas.getContext('2d');\r\n        cx.clearRect(0,0,canvas.width,canvas.height);\r\n        let [board, startNode, targetNode] = initializeBoard(canvas.width, canvas.height, state.s);\r\n        setState((prevState) => {\r\n            return {\r\n                        board: board, \r\n                        startNode: startNode, \r\n                        targetNode: targetNode, \r\n                        canvasUpdates: board,\r\n                        updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    } else if (id === 4) {\r\n        let canvas = canvasRef.current;\r\n        let cx = canvas.getContext('2d');\r\n        cx.clearRect(0,0,canvas.width,canvas.height);\r\n        let { innerWidth: width, innerHeight: height } = window\r\n        let canvasHeight;\r\n        if (width < 481 || height < 481)  {\r\n            if ( width > height) canvasHeight = height*.85;\r\n            else canvasHeight = height*.8;\r\n        }\r\n        else canvasHeight = height*.9-4;\r\n        let canvasWidth = width;\r\n        let {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset} = initializeCanvas(canvasWidth,canvasHeight,state.s);\r\n        // Setting Initial State\r\n        setState((prevState) => {\r\n            return {\r\n                canvasWidth: canvasWidth,\r\n                canvasHeight: canvasHeight,\r\n                board: board,\r\n                startNode: startNode,\r\n                targetNode: targetNode,\r\n                xUnits: xUnits,\r\n                yUnits: yUnits,\r\n                xOffset: xOffset,\r\n                yOffset: yOffset,\r\n                canvasUpdates: board,\r\n                updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    } else {\r\n        let canvasUpdates = {};\r\n        if (id === 1) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (!['white','#282c34'].includes(currentState.fill)) {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{fill:'white'});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n            Object.assign(canvasUpdates, {[[state.targetNode.i,state.targetNode.j]]: state.board[[state.targetNode.i,state.targetNode.j]]});\r\n        } else if (id === 2) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (currentState.type === 'wall') {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{type:'empty',fill:'white',object:null});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        } else if (id === 3) {\r\n            for (let key in state.board) {\r\n                let currentState = state.board[key];\r\n                if (currentState.type === 'weight') {\r\n                    let node = parseKey(key);\r\n                    let newState = Object.assign({},currentState,{type:'empty',fill:'white',object:null});\r\n                    Object.assign(canvasUpdates, {[[node.i,node.j]]: newState});\r\n                }\r\n            }\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        board: Object.assign({},prevState.board,canvasUpdates), \r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID + 1\r\n            };\r\n        });\r\n    }\r\n};\r\n\r\nfunction doTheJohnWall(state,setState) {\r\n    let canvasUpdates = {};\r\n    for (let key in state.board) {\r\n        Object.assign(canvasUpdates, {[key]: {node:parseKey(key), type:'wall', fill:'#282c34'}});\r\n    }\r\n    Object.assign(canvasUpdates, {[[state.startNode.i,state.startNode.j]]: state.board[[state.startNode.i,state.startNode.j]]});\r\n    Object.assign(canvasUpdates, {[[state.targetNode.i,state.targetNode.j]]: state.board[[state.targetNode.i,state.targetNode.j]]});\r\n    setState((prevState) => {\r\n        return {\r\n                    board: canvasUpdates, \r\n                    canvasUpdates: canvasUpdates,\r\n                    updateID: prevState.updateID + 1\r\n        };\r\n    });\r\n}\r\n\r\n//=====================================================================================//\r\n// Basic Drawing Functions //\r\n//=====================================================================================//\r\nfunction drawSearch(node,s,lineWidth,xOffset,yOffset,canvasRef,board,color) {\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    let state = board[[node.i,node.j]];\r\n    sleep(0).then(() => {\r\n        if (state === 'weight') {\r\n            drawWeight(pos,s,lineWidth,canvasRef,color);\r\n        } else {\r\n            fillHex(pos,s,color,canvasRef);\r\n            drawHex(pos,s,lineWidth,canvasRef)\r\n        }\r\n    });\r\n};\r\n\r\nfunction drawWeight(node,s,lineWidth,xOffset,yOffset,canvasRef){\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    let sideLength = s*.9;\r\n    let h = sideLength;\r\n    let w1 = sideLength;\r\n    let w2 = 1.5*sideLength;\r\n    let rw = sideLength*.18;\r\n    let r1 = sideLength*.33;\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    // draw trapezoid\r\n    let path = [\r\n                    {x:w1/2  , y:-h/2},\r\n                    {x:-w1/2 , y:-h/2},\r\n                    {x:-w2/2 , y:h/2},\r\n                    {x:w2/2  , y:h/2}\r\n    ]\r\n    cx.beginPath();\r\n    cx.fillStyle = 'black';\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i = 1; i < path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n    // draw ring\r\n    cx.beginPath();\r\n    let ringCenter = {x:pos.x, y:pos.y - h/2};\r\n    cx.lineWidth = rw;\r\n    cx.arc(ringCenter.x, ringCenter.y, r1, 0, 7);\r\n    cx.stroke();\r\n};\r\n\r\nfunction drawStart(startNode,s,xOffset,yOffset,canvasRef,angle) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    const r = .85;\r\n    const a = s*Math.sqrt(3)*r/2;\r\n    const b = a/1.3;\r\n    const c = a/2.6;\r\n    let path = [\r\n                { x:a    ,  y:0},\r\n                { x:-2*c ,  y:b},\r\n                { x:-c   ,  y:0},\r\n                { x:-2*c ,  y:-b}\r\n    ];\r\n    if (angle) {\r\n        for (let i=0; i<path.length; i++) {\r\n            let oldPos = path[i];\r\n            let newPos = {\r\n                x: oldPos.x*Math.cos(angle) - oldPos.y*Math.sin(angle),\r\n                y: oldPos.x*Math.sin(angle) + oldPos.y*Math.cos(angle)\r\n            }\r\n            path[i] = newPos;\r\n        }\r\n    }\r\n    let pos = calcHexCenter(startNode,s,xOffset,yOffset);\r\n    cx.fillStyle = 'black';\r\n    cx.beginPath();\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction drawStartPos(pos,s,canvasRef,angle) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    const r = .85;\r\n    const a = s*Math.sqrt(3)*r/2;\r\n    const b = a/1.3;\r\n    const c = a/2.6;\r\n    let path = [\r\n                { x:a    ,  y:0},\r\n                { x:-2*c ,  y:b},\r\n                { x:-c   ,  y:0},\r\n                { x:-2*c ,  y:-b}\r\n    ];\r\n    if (angle) {\r\n        for (let i=0; i<path.length; i++) {\r\n            let oldPos = path[i];\r\n            let newPos = {\r\n                x: oldPos.x*Math.cos(angle) - oldPos.y*Math.sin(angle),\r\n                y: oldPos.x*Math.sin(angle) + oldPos.y*Math.cos(angle)\r\n            }\r\n            path[i] = newPos;\r\n        }\r\n    }\r\n    cx.fillStyle = 'black';\r\n    cx.beginPath();\r\n    cx.moveTo(pos.x + path[0].x, pos.y + path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(pos.x + path[i].x, pos.y + path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction drawTarget(targetNode,s,lineWidth,xOffset,yOffset,canvasRef) {\r\n    const sideLength = s;\r\n    let pos = calcHexCenter(targetNode,s,xOffset,yOffset);\r\n    // Outer Ring\r\n    fillHex(pos,sideLength,'#b22222',canvasRef);\r\n    // White Fill\r\n    fillHex(pos,sideLength*2/3 - lineWidth/2,'white',canvasRef);\r\n    // Inner Ring\r\n    fillHex(pos,sideLength/3,'#b22222',canvasRef);\r\n    // Remake Border\r\n    drawHex(pos,sideLength,lineWidth,canvasRef);\r\n};\r\n\r\nfunction drawNode(node,s,lineWidth,xOffset,yOffset,color,canvasRef) {\r\n    let pos = calcHexCenter(node,s,xOffset,yOffset);\r\n    fillHex(pos,s,color,canvasRef);\r\n    drawHex(pos,s,lineWidth,canvasRef);\r\n};\r\n\r\n\r\n//=====================================================================================//\r\n// Helper Functions //\r\n//=====================================================================================//\r\n\r\n// Helpers for Canvas Tools//\r\n//========================================//\r\nfunction drawHex(pos,s,lineWidth,canvasRef) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    let path = calcHexPath(pos,s);\r\n    cx.lineWidth = lineWidth;\r\n    cx.beginPath();\r\n    cx.moveTo(path[0].x,path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(path[i].x,path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.stroke();\r\n};\r\n\r\nfunction fillHex(pos,s,color,canvasRef) {\r\n    let canvas = canvasRef.current;\r\n    let cx = canvas.getContext('2d');\r\n    cx.fillStyle = color;\r\n    let path = calcHexPath(pos,s);\r\n    cx.beginPath();\r\n    cx.moveTo(path[0].x, path[0].y);\r\n    for (let i=1; i<path.length; i++) {\r\n        cx.lineTo(path[i].x,path[i].y);\r\n    }\r\n    cx.closePath();\r\n    cx.fill();\r\n};\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nfunction getPointerNode(event,domNode,s,xOffset,yOffset) {\r\n    let rect = domNode.getBoundingClientRect();\r\n    let x = event.clientX - rect.left;\r\n    let y = event.clientY - rect.top;\r\n    return nearestHex({x:x,y:y},s,xOffset,yOffset);\r\n};\r\n\r\n// Functions That Peform Grid Calculations//\r\n//========================================//\r\nfunction calcHexCenter(node,s,xOffset,yOffset) {\r\n    const x = xOffset + (node.j + 1 - ((node.i+1)%2)/2)*s*Math.sqrt(3);\r\n    const y = yOffset + (1.5*node.i + 1)*s\r\n    return {x:x, y:y};\r\n};\r\n\r\nfunction nodeDistance(node1,node2,s,xOffset,yOffset) {\r\n    let pos1 = calcHexCenter(node1,s,xOffset,yOffset);\r\n    let pos2 = calcHexCenter(node2,s,xOffset,yOffset);\r\n    return {x:(pos1.x - pos2.x) , y:(pos1.y - pos2.y)};\r\n};\r\n\r\nfunction nearestHex(pos,s,xOffset,yOffset) {\r\n    const J = Math.floor((pos.x - xOffset)/(s*Math.sqrt(3)));\r\n    const I = Math.floor((pos.y - yOffset)/(1.5*s));\r\n    const u = (pos.x - xOffset)/(s*Math.sqrt(3)) - J;\r\n    const v = 1 - ((pos.y - yOffset)/(1.5*s) - I);\r\n    let i, j;\r\n    if (I%2 === 0) {\r\n        if (u < .5) {\r\n            if (v > (2/3*u + 2/3)) {\r\n                [ i , j ] = [ I-1 , J-1 ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        } else {\r\n            if (v > (-2/3*u + 4/3)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        }\r\n    } else {\r\n        if (u < .5) {\r\n            if (v > (-2/3*u + 1)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J-1 ];\r\n            }\r\n        } else {\r\n            if (v > (2/3*u + 1/3)) {\r\n                [ i , j ] = [ I-1 , J ];\r\n            } else {\r\n                [ i , j ] = [ I , J ];\r\n            }\r\n        }\r\n    }\r\n    return {i:i,j:j};\r\n};\r\n\r\nfunction calcHexPath(pos, s) {\r\n    let path = [];\r\n    for (let theta = Math.PI/6; theta < 2*Math.PI; theta += Math.PI/3) {\r\n        const x = pos.x + s*Math.cos(theta);\r\n        const y = pos.y + s*Math.sin(theta);\r\n        path.push({x:x, y:y});\r\n    }\r\n    return path;\r\n};\r\n\r\nfunction calcUnits(canvasWidth, canvasHeight, s) {\r\n    const xUnits = Math.floor(canvasHeight/(1.5*s) - .5);\r\n    const yUnits = Math.floor(canvasWidth/(s*Math.sqrt(3)) - .5);\r\n    const xOffset = (canvasWidth - (yUnits + .5)*s*Math.sqrt(3))/2;\r\n    const yOffset = (canvasHeight - (xUnits*1.5 + .5)*s)/2;\r\n    return [xUnits,yUnits,xOffset,yOffset];\r\n};\r\n\r\nfunction initializeBoard(canvasWidth, canvasHeight, s) {   \r\n    let [xUnits,yUnits] = calcUnits(canvasWidth, canvasHeight, s);\r\n    let board = {};\r\n    for (let i = 0; i < xUnits; i++) {\r\n        for (let j = 0; j < yUnits; j++) {\r\n            Object.assign(board, {[[i,j]]: {node:{i:i,j:j}, type:'empty', fill:'white', object:null}})\r\n        }\r\n    }\r\n    let startNode, targetNode, offset;\r\n    if (xUnits > yUnits) {\r\n        offset = Math.floor(xUnits*.25);\r\n        startNode = {i: xUnits-1-offset, j: Math.floor(yUnits/2)};\r\n        targetNode = {i: offset, j: Math.floor(yUnits/2)};\r\n    } else {\r\n        offset = Math.floor(yUnits*.25);\r\n        startNode = {i: Math.floor(xUnits/2), j: offset};\r\n        targetNode = {i: Math.floor(xUnits/2), j: yUnits-1-offset};\r\n    }\r\n    let angle = 0;\r\n    if (xUnits > yUnits) angle = -Math.PI/2;\r\n    Object.assign(board[[startNode.i,startNode.j]], {type: 'start', object:'start', angle:angle});\r\n    Object.assign(board[[targetNode.i,targetNode.j]], {type: 'target', object:'target'});\r\n    return [board, startNode, targetNode];\r\n};\r\n\r\nfunction initializeCanvas(canvasWidth,canvasHeight,s) {\r\n    let [xUnits,yUnits,xOffset,yOffset] = calcUnits(canvasWidth, canvasHeight, s);\r\n    let [board, startNode, targetNode] = initializeBoard(canvasWidth, canvasHeight, s);\r\n    let lineWidth = s/10;\r\n    return {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset,lineWidth};\r\n}\r\n\r\nfunction parseKey(key) {\r\n    let [i,j] = key.split(',').map((item) => parseInt(item));\r\n    return {i:i,j:j};\r\n};\r\n\r\n//=====================================================================================//\r\n// Exports //\r\n//=====================================================================================//\r\nexport {getPointerNode, onMouseDown, onTouchStart}\r\nexport {drawSearch, drawLine, moveStart, moveTarget, clearBoard, doTheJohnWall}\r\nexport {drawWeight, drawStart, drawStartPos, drawTarget, drawNode, drawHex, fillHex};\r\nexport {sleep, calcHexCenter, nodeDistance, nearestHex, calcHexPath, calcUnits, initializeBoard, initializeCanvas, parseKey};","import React from 'react';\r\nimport {initializeBoard, drawWeight, drawStart, drawStartPos, drawTarget, drawNode} from '../utils/canvas-tools';\r\n\r\n/*\r\n// To Do //\r\n//========================================================================================//\r\n-- Make new drawWeight function that takes node as imput instead of pos\r\n\r\n//========================================================================================//\r\n*/\r\n\r\n\r\nclass Canvas extends React.Component {\r\n    componentDidMount() {\r\n        let [board] = initializeBoard(this.props.width, this.props.height, this.props.s);\r\n        for (let key in board) {\r\n            let {node, fill, object, angle} = board[key];\r\n            this.updateNode(node, fill, object, angle);\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        if (nextProps.updateID === this.props.updateID) return false;\r\n        else return true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.s !== prevProps.s) {\r\n            let canvas = this.props.canvasRef.current;\r\n            let cx = canvas.getContext('2d');\r\n            cx.clearRect(0,0,this.props.width,this.props.height);\r\n            this.componentDidMount();\r\n        } else {\r\n            for (let key in this.props.canvasUpdates) {\r\n                let {node, fill, object, angle} = this.props.canvasUpdates[key];\r\n                this.updateNode(node, fill, object, angle);\r\n            }\r\n            if (this.props.startPosition) {\r\n                let {pos,angle} = this.props.startPosition;\r\n                drawStartPos(pos,this.props.s,this.props.canvasRef,angle);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateNode(node,fill,object,angle) {\r\n        if (fill) {\r\n            drawNode(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, fill, this.props.canvasRef);\r\n        }\r\n        if (object) {\r\n            if (object === 'weight') {\r\n                drawWeight(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, this.props.canvasRef);\r\n            } else if (object === 'start') {\r\n                drawStart(node, this.props.s, this.props.xOffset, this.props.yOffset, this.props.canvasRef,angle);\r\n            } else if (object === 'target') {\r\n                drawTarget(node, this.props.s, this.props.lineWidth, this.props.xOffset, this.props.yOffset, this.props.canvasRef);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <canvas\r\n                ref = {this.props.canvasRef}\r\n                width = {this.props.width}\r\n                height = {this.props.height}\r\n                onMouseDown={this.props.running ? null : (downEvent) => this.props.onMouseDown(downEvent)}\r\n                onTouchStart={this.props.running ? null : (startEvent) => this.props.onTouchStart(startEvent)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;","import {isSameNode, nodeOnBoard, isValidNode, findNeighbors, manhattanDistance, minHeap, shuffleArray, disjointSet} from './utils';\r\nimport { parseKey } from './canvas-tools';\r\n\r\n\r\n//=================================================================================================================================//\r\n// Path-Finding Algorithms //\r\n//=================================================================================================================================//\r\n\r\n\r\n// Unweighted Algorithms //\r\n//=======================//\r\nfunction depthFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.unshift(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction breadthFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.push(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction hillClimbing(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // sort nodes according to distance to target node (descending)\r\n        neighbors.sort((node1,node2) => manhattanDistance(node2,targetNode) - manhattanDistance(node1,targetNode));\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = currentPath.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add path extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.unshift(newPath);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction beamSearch(startNode,targetNode,xUnits,yUnits,board, w = 2) {\r\n    // initialize queue of paths and set of visited node\r\n    let queue = [[startNode]];\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length > 0) {\r\n        let currentPath = queue.shift();\r\n        let currentNode = currentPath[currentPath.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // sort nodes according to distance to target node (descending)\r\n        neighbors.sort((node1,node2) => manhattanDistance(node2,targetNode) - manhattanDistance(node1,targetNode));\r\n        // filter to valid nodes and keep only the first w number of them\r\n        neighbors = neighbors.filter(\r\n            (node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j))\r\n        ).slice(-w);\r\n        for (let newNode of neighbors) {\r\n            let newPath = currentPath.concat([newNode]);\r\n            // if we found target return the completed path and updates, else add path extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.push(newPath);\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\nfunction bestFirst(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:manhattanDistance(startNode,targetNode) , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        for (let newNode of neighbors) {\r\n            if (isValidNode(newNode,board,xUnits,yUnits) && !visitedNodes.has(newNode.i+','+newNode.j)) {\r\n                let newPath = path.concat([newNode]);\r\n                // if we found target return the completed path and updates, else add extended path to queue\r\n                if (isSameNode(newNode,targetNode)) {\r\n                    return [newPath, searchUpdates];\r\n                } else {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                    queue.insert({distance:manhattanDistance(newNode,targetNode) , path:newPath});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\n\r\n// Weighted Algorithms //\r\n//=====================//\r\n// Dictionary below determines relative weight moving from one node to another.\r\n// Essentially moving through a weight is 10 times as difficult as an empty node.\r\nconst pathWeights = {'empty':1, 'weight':10, 'target':1};\r\n\r\nfunction branchNBound(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.distance < path2.distance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    let bestDistance = Infinity;\r\n    let bestPath = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if newDistance is not less than the bestDistance to the target so far, then drop the path from the queue\r\n            if (newDistance >= bestDistance) {\r\n                if (!isSameNode(newNode,targetNode)) {\r\n                    let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                    searchUpdates.push(newState);\r\n                }\r\n                continue;\r\n            };\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                [bestPath, bestDistance] = [newPath, newDistance];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({distance:newDistance , path:newPath});\r\n            }\r\n        }\r\n    }\r\n    // Return best path (which could be empty if no path found) and searchUpdates for animation\r\n    return [bestPath, searchUpdates];\r\n};\r\n\r\nfunction aStarSearch(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize queue of paths as minHeap and set of visited node\r\n    let lessThan = (path1,path2) => {return path1.estimatedDistance < path2.estimatedDistance;};\r\n    let queue = new minHeap(lessThan);\r\n    queue.insert({estimatedDistance:manhattanDistance(startNode,targetNode), distance:0 , path:[startNode]});\r\n    let visitedNodes = new Set();\r\n    let searchUpdates = [];\r\n    // iteratively extend paths in queue until no possible paths left or target found\r\n    while (queue.length() > 0) {\r\n        let {distance, path} = queue.shift();\r\n        let currentNode = path[path.length - 1];\r\n        // check that node has not been extended already, if so drop path, else add to set of visited nodes and updates\r\n        if (visitedNodes.has(currentNode.i+','+currentNode.j)) continue;\r\n        visitedNodes.add(currentNode.i+','+currentNode.j);\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) {\r\n            let newState = Object.assign({},board[[currentNode.i,currentNode.j]],{fill:'#6495ed'});\r\n            searchUpdates.push(newState);\r\n        }\r\n        // extend path by iterating over neighboring nodes (that are not walls or already extended)\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to valid nodes\r\n        neighbors = neighbors.filter((node) => (isValidNode(node,board,xUnits,yUnits) && !visitedNodes.has(node.i+','+node.j)));\r\n        for (let newNode of neighbors) {\r\n            let newPath = path.concat([newNode]);\r\n            let newDistance = distance + pathWeights[board[[newNode.i,newNode.j]].type];\r\n            // if we found target return the completed path and updates, else add extended path to queue\r\n            if (isSameNode(newNode,targetNode)) {\r\n                // extend other paths to be sure they aren't actually closer to the target (not sure about this part)\r\n                return [newPath, searchUpdates];\r\n            } else {\r\n                let newState = Object.assign({},board[[newNode.i,newNode.j]],{fill:'#4b0082'});\r\n                searchUpdates.push(newState);\r\n                queue.insert({\r\n                    estimatedDistance: newDistance + manhattanDistance(newNode,targetNode), \r\n                    distance:newDistance, \r\n                    path:newPath\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // Return empty path and updates if no path to target was found\r\n    return [[], searchUpdates];\r\n};\r\n\r\n\r\n//=================================================================================================================================//\r\n// Maze Building Algorithms //\r\n//=================================================================================================================================//\r\nfunction randomWalls(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iterate over whole board and randomly generate walls (with P(wall) = .50)\r\n    for (let key in board) {\r\n        let node = parseKey(key);\r\n        if (isSameNode(node,startNode) || isSameNode(node,targetNode)) continue;\r\n        if (Math.random() < .45) {\r\n            mazePath.push({node:node, type:'wall', fill:'#282c34'})\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction randomWeights(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iterate over whole board and randomly generate walls (with P(wall) = .50)\r\n    for (let key in board) {\r\n        let node = parseKey(key);\r\n        if (isSameNode(node,startNode) || isSameNode(node,targetNode)) continue;\r\n        if (Math.random() < .45) {\r\n            mazePath.push({node:node, type:'weight', fill:'white', object:'weight'})\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction depthFirstMaze(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize dictionary of nodes that keeps track of how many times each one was visited\r\n    // each time we check the node, add 1, and if we extend the node set to Infinity\r\n    let visitedNodes = {};\r\n    for (let node in board) {\r\n        visitedNodes[node] = 0;\r\n    }\r\n    // pick starting point at random\r\n    let start = {i: Math.floor(Math.random()*xUnits) , j: Math.floor(Math.random()*yUnits)};\r\n    // initialize queue as array\r\n    let queue = [start];\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iteratively extend path until no more paths are left in the queue\r\n    while (queue.length > 0) {\r\n        // move to next node on the queue\r\n        const currentNode = queue.shift();\r\n        // if the node has already been extended or checked twice, then remove from queue and continue\r\n        // else we extend the node and update visitedNodes and mazePath\r\n        if (visitedNodes[[currentNode.i,currentNode.j]] >= 2) continue;\r\n        visitedNodes[[currentNode.i,currentNode.j]] = Infinity;\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) mazePath.push({node:currentNode, type:'empty', fill:'white'});\r\n        // find the node's neighbors\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to nodes on the board that have not already been extended or checked twice\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(node,xUnits,yUnits) && (visitedNodes[[node.i,node.j]] < 2)));\r\n        // shuffle array to randomize order\r\n        neighbors = shuffleArray(neighbors);\r\n        // initialize array for adding the new nodes to queue (this lets us control the order in case the start or target node are encountered\r\n        // since we want to immediately extend these nodes to ensure a perfect path)\r\n        let nodesToAdd = [];\r\n        for (let node of neighbors) {\r\n            visitedNodes[[node.i,node.j]]++\r\n            if (isSameNode(node,startNode) || isSameNode(node,targetNode)) nodesToAdd.unshift(node);\r\n            else nodesToAdd.push(node);\r\n        }\r\n        queue = nodesToAdd.concat(queue);\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction breadthFirstMaze(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize dictionary of nodes that keeps track of how many times each one was visited\r\n    // each time we check the node, add 1, and if we extend the node set to Infinity\r\n    let visitedNodes = {};\r\n    for (let node in board) {\r\n        visitedNodes[node] = 0;\r\n    }\r\n    // pick starting point at random\r\n    let start = {i: Math.floor(Math.random()*xUnits) , j: Math.floor(Math.random()*yUnits)};\r\n    // initialize queue as array\r\n    let queue = [start];\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iteratively extend path until no more paths are left in the queue\r\n    while (queue.length > 0) {\r\n        // move to next node on the queue\r\n        const currentNode = queue.shift();\r\n        // if the node has already been extended or checked twice, then remove from queue and continue\r\n        // else we extend the node and update visitedNodes and mazePath\r\n        if (visitedNodes[[currentNode.i,currentNode.j]] >= 2) continue;\r\n        visitedNodes[[currentNode.i,currentNode.j]] = Infinity;\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) mazePath.push({node:currentNode, type:'empty', fill:'white'});\r\n        // find the node's neighbors\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to nodes on the board that have not already been extended or checked twice\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(node,xUnits,yUnits) && (visitedNodes[[node.i,node.j]] < 2)));\r\n        // shuffle array to randomize order\r\n        neighbors = shuffleArray(neighbors);\r\n        // add new nodes to queue, putting them at the end unless they are the start or target node (this ensures the start and target always get\r\n        // extended immediately which preserves the perfect maze condition)\r\n        for (let node of neighbors) {\r\n            visitedNodes[[node.i,node.j]]++\r\n            if (isSameNode(node,startNode) || isSameNode(node,targetNode)) queue.unshift(node);\r\n            else queue.push(node);\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction kruskalsMaze(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize list of unvisited nodes which we will visit in a randomized order; however, start and target nodes will be placed at the front to ensure\r\n    // a perfect maze is generated\r\n    let unVisitedNodes = [];\r\n    for (let key in board) {\r\n        if (!isSameNode(parseKey(key),startNode) && !isSameNode(parseKey(key),targetNode)) unVisitedNodes.push(key);\r\n    }\r\n    unVisitedNodes = shuffleArray(unVisitedNodes);\r\n    unVisitedNodes.unshift(startNode.i+','+startNode.j);\r\n    unVisitedNodes.unshift(targetNode.i+','+targetNode.j);\r\n    // initialize set to keep track of nodes added to the path\r\n    let pathNodes = new Set();\r\n    // initialize disjoint set to keep track of the disjoint paths\r\n    let disjointPaths = new disjointSet();\r\n    // lastly initialize array for storing mazePath updates for animation\r\n    let mazePath = [];\r\n    // iteratively look at each node in unVisited nodes, checking to see if it can be added to the path\r\n    for (let currentNode of unVisitedNodes) {\r\n        // get neighboring nodes and convert node to string\r\n        let neighbors = findNeighbors(parseKey(currentNode)).map((node) => (node.i+','+node.j));\r\n        // filter to neighbors that are on the board and are part of a path\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(parseKey(node),xUnits,yUnits) && pathNodes.has(node)));\r\n        // get the roots of each of these neighbors\r\n        let roots = neighbors.map((node) => disjointPaths.find(node));\r\n        // get the unique roots\r\n        let rootsSet = new Set(roots);\r\n        // Condition below guarantees perfect maze, but would not guarantee all paths are joined (and thus not guarantee that there is a path from start to target)\r\n        //if (roots.length !== rootsSet.size) continue;\r\n        // Condition below guarantees all paths are joined, but does not guarantee a perfect maze\r\n        if (roots.length > 1 && rootsSet.size < 2) continue;\r\n        // else we make current node part of the pathNodes and union all the roots\r\n        pathNodes.add(currentNode);\r\n        if (!isSameNode(parseKey(currentNode),startNode) && !isSameNode(parseKey(currentNode),targetNode)) {\r\n            mazePath.push({node:parseKey(currentNode), type:'empty', fill:'white'});\r\n        }\r\n        disjointPaths.makeSet(currentNode);\r\n        for (let node of roots) {\r\n            disjointPaths.union(currentNode,node);\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n}\r\n\r\nfunction primsMaze(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize dictionary of nodes that keeps track of how many times each one was visited\r\n    // each time we check the node, add 1, and if we extend the node set to Infinity\r\n    let visitedNodes = {};\r\n    for (let node in board) {\r\n        visitedNodes[node] = 0;\r\n    }\r\n    // pick starting point at random\r\n    let start = {i: Math.floor(Math.random()*xUnits) , j: Math.floor(Math.random()*yUnits)};\r\n    // initialize queue as array and initialize values for keeping track of start and target nodes\r\n    let queue = [start];\r\n    let [ startFound , targetFound ] = [ false , false ];\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iteratively extend path until no more paths are left in the queue\r\n    while (queue.length > 0) {\r\n        // move to random node on the queue, unless we have encountered the start or target node, in which case move to this node\r\n        // doing so ensures a perfect maze\r\n        let currentNode;\r\n        if (startFound) {\r\n            currentNode = queue.shift();\r\n            startFound = false;\r\n        }\r\n        else if (targetFound) {\r\n            currentNode = queue.shift();\r\n            targetFound = false;\r\n        } else {\r\n            const i = Math.floor(Math.random() * queue.length);\r\n            currentNode = queue[i];\r\n            queue = queue.slice(0,i).concat(queue.slice(i+1));\r\n        }\r\n        // if the node has already been extended or checked twice, then remove from queue and continue\r\n        // else we extend the node and update visitedNodes and mazePath\r\n        if (visitedNodes[[currentNode.i,currentNode.j]] >= 2) continue;\r\n        visitedNodes[[currentNode.i,currentNode.j]] = Infinity;\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) mazePath.push({node:currentNode, type:'empty', fill:'white'});\r\n        // find the node's neighbors\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to nodes on the board that have not already been extended or checked twice\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(node,xUnits,yUnits) && (visitedNodes[[node.i,node.j]] < 2)));\r\n        // add new nodes to queue, putting them at the end unless they are the start or target node (this ensures the start and target always get\r\n        // extended immediately which preserves the perfect maze condition)\r\n        for (let node of neighbors) {\r\n            visitedNodes[[node.i,node.j]]++\r\n            if (isSameNode(node,startNode)) {\r\n                queue.unshift(node);\r\n                startFound = true;\r\n            } else if (isSameNode(node,targetNode)) {\r\n                queue.unshift(node);\r\n                targetFound = true;\r\n            }\r\n            else queue.push(node);\r\n        }\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\nfunction huntAndKill(startNode,targetNode,xUnits,yUnits,board) {\r\n    // initialize dictionary of nodes that keeps track of how many times each one was visited\r\n    // each time we check the node, add 1, and if we extend the node set to Infinity\r\n    let visitedNodes = {};\r\n    for (let node in board) {\r\n        visitedNodes[node] = 0;\r\n    }\r\n    // pick starting point at random\r\n    let start = {i: Math.floor(Math.random()*xUnits) , j: Math.floor(Math.random()*yUnits)};\r\n    // initialize queue as array and initialize variable to determine when to choose new random walk point\r\n    let queue = [start];\r\n    let newRandomWalk = false;\r\n    // initialize array to keep track of path for drawing maze\r\n    let mazePath = [];\r\n    // iteratively extend path until no more paths are left in the queue\r\n    while (queue.length > 0) {\r\n        // move to next node on the queue, unless we determined current path cannot be exteneded, in which case pick random node\r\n        let currentNode;\r\n        if (newRandomWalk) {\r\n            const i = Math.floor(Math.random() * queue.length);\r\n            currentNode = queue[i];\r\n            queue = queue.slice(0,i).concat(queue.slice(i+1));\r\n            newRandomWalk = false;\r\n        } else {\r\n            currentNode = queue.shift();\r\n        }\r\n        // if the node has already been extended or checked twice, then remove from queue and continue\r\n        // else we extend the node and update visitedNodes and mazePath\r\n        if (visitedNodes[[currentNode.i,currentNode.j]] >= 2) continue;\r\n        visitedNodes[[currentNode.i,currentNode.j]] = Infinity;\r\n        if (!isSameNode(currentNode,startNode) && !isSameNode(currentNode,targetNode)) mazePath.push({node:currentNode, type:'empty', fill:'white'});\r\n        // find the node's neighbors\r\n        let neighbors = findNeighbors(currentNode);\r\n        // filter to nodes on the board that have not already been extended or checked twice\r\n        neighbors = neighbors.filter((node) => (nodeOnBoard(node,xUnits,yUnits) && (visitedNodes[[node.i,node.j]] < 2)));\r\n        // shuffle array to randomize order\r\n        neighbors = shuffleArray(neighbors);\r\n        // initialize array for adding the new nodes to queue (this lets us control the order in case the start or target node are encountered\r\n        // since we want to immediately extend these nodes to ensure a perfect path)\r\n        let nodesToAdd = [];\r\n        for (let node of neighbors) {\r\n            visitedNodes[[node.i,node.j]]++\r\n            if (isSameNode(node,startNode) || isSameNode(node,targetNode)) nodesToAdd.unshift(node);\r\n            else nodesToAdd.push(node);\r\n        }\r\n        queue = nodesToAdd.concat(queue);\r\n        if (nodesToAdd.length === 0) newRandomWalk = true;\r\n    }\r\n    // return path used to build the maze for animations\r\n    return mazePath;\r\n};\r\n\r\n\r\nexport {depthFirst, breadthFirst, hillClimbing, beamSearch, bestFirst, branchNBound, aStarSearch};\r\nexport {randomWalls, randomWeights, depthFirstMaze, breadthFirstMaze, kruskalsMaze, primsMaze, huntAndKill}","import {\r\n    depthFirst, breadthFirst, hillClimbing, beamSearch, bestFirst, branchNBound, aStarSearch,\r\n    randomWalls, randomWeights, depthFirstMaze, breadthFirstMaze, kruskalsMaze, primsMaze, huntAndKill\r\n} from './algorithms';\r\nimport { calcHexCenter, nodeDistance } from './canvas-tools';\r\nimport { scalarProd, vectorSum, vectorDiff, vectorAngle } from './utils';\r\n\r\n\r\n\r\n//=================================================================================================================================//\r\n// Constants //\r\n//=================================================================================================================================//\r\n// mappings for speeds when animating search, drawPath, moveDownPath, victory, and drawMaze\r\nconst searchSpeed = {\r\n    0: 10,\r\n    1: 100,\r\n    2: 1000,\r\n    3: 10000,\r\n    4: Infinity\r\n};\r\nconst drawPathSpeed = {\r\n    0: 5,\r\n    1: 5**2,\r\n    2: 5**3,\r\n    3: 5**4,\r\n    4: Infinity\r\n};\r\nconst moveDownPathSpeed = {\r\n    0: 3,\r\n    1: 3**2,\r\n    2: 3**3,\r\n    3: 3**4,\r\n    4: Infinity\r\n};\r\nconst victorySpeed = {\r\n    0: 1.5*Math.PI,\r\n    1: 2*Math.PI,\r\n    2: 3*Math.PI,\r\n    3: 6*Math.PI,\r\n    4: Infinity\r\n};\r\nconst drawMazeSpeed = {\r\n    0: 6,\r\n    1: 6**2,\r\n    2: 6**3,\r\n    3: 6**4,\r\n    4: Infinity\r\n};\r\n\r\n\r\n//=================================================================================================================================//\r\n// Path-Finding Animations //\r\n//=================================================================================================================================//\r\nfunction pathFinderAnimation(state,canvasRef,setState,isRunning) {\r\n    // Set state to running so user can't interfere with pathFinder \r\n    setState((prevState) => ({\r\n        running: true, \r\n        updateID: prevState.updateID + 1\r\n    }));\r\n    let pathFinder;\r\n    switch (state.algorithm) {\r\n        case 0: pathFinder = depthFirst; break;\r\n        case 1: pathFinder = breadthFirst; break;\r\n        case 2: pathFinder = hillClimbing; break;\r\n        case 3: pathFinder = beamSearch; break;\r\n        case 4: pathFinder = bestFirst; break;\r\n        case 5: pathFinder = branchNBound; break;\r\n        case 6: pathFinder = aStarSearch; break;\r\n        default: pathFinder = breadthFirst;\r\n    };\r\n    let [path, searchUpdates] = pathFinder(state.startNode,state.targetNode,state.xUnits,state.yUnits,state.board);\r\n    searchAnimation(path,searchUpdates,state.s,state.xOffset,state.yOffset,state.speed,state.board,setState,isRunning);\r\n};\r\n\r\nfunction searchAnimation(path,searchUpdates,s,xOffset,yOffset,speed,board,setState,isRunning) {\r\n    let hexsPerSecond = searchSpeed[speed];\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = searchUpdates.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = searchUpdates.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                if (path.length > 0) drawPathAnimation(path,s,xOffset,yOffset,speed,board,setState,isRunning);\r\n                else {\r\n                    setState((prevState) => ({\r\n                        running: false,\r\n                        updateID: prevState.updateID + 1,\r\n                        canvasUpdates: [],\r\n                        startPosition: false\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction drawPathAnimation(path,s,xOffset,yOffset,speed,board,setState,isRunning) {\r\n    let hexsPerSecond = drawPathSpeed[speed];\r\n    let pathUpdates = [];\r\n    for (let node of path.slice(1,-1)) {\r\n        pathUpdates.push(Object.assign({},board[[node.i,node.j]],{fill:'#b1fc40'}));\r\n    }\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = pathUpdates.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = pathUpdates.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                moveDownPathAnimation(path,s,xOffset,yOffset,speed,setState,isRunning);\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction moveDownPathAnimation(path,s,xOffset,yOffset,speed,setState,isRunning) {\r\n    let hexsPerSecond = moveDownPathSpeed[speed];\r\n    const totalSteps = path.length - 1;\r\n    const totalTime = totalSteps / hexsPerSecond * 1000;\r\n    let startTime = null;\r\n    let i = 0;\r\n    function updateAnimation(time) {\r\n        let [ prevStartNode , prevEndNode ] = [ path[i] , path[i+1] ];\r\n        i = Math.floor((time - startTime) / totalTime * totalSteps);\r\n        let pos, angle;\r\n        if (i < totalSteps) {\r\n            let [ startNode , endNode ] = [ path[i] , path[i+1] ];\r\n            let [ startPos , endPos ] = [ calcHexCenter(startNode,s,xOffset,yOffset) , calcHexCenter(endNode,s,xOffset,yOffset) ]\r\n            let V = vectorDiff(endPos,startPos);\r\n            let v = scalarProd((time - startTime) / totalTime * totalSteps - i, V);\r\n            pos = vectorSum(startPos, v);\r\n            angle = vectorAngle(V);\r\n        } else {\r\n            let [ startNode , endNode ] = [ path[path.length-2] , path[path.length-1] ];\r\n            let [ startPos , endPos ] = [ calcHexCenter(startNode,s,xOffset,yOffset) , calcHexCenter(endNode,s,xOffset,yOffset) ]\r\n            let V = vectorDiff(endPos,startPos);\r\n            pos = calcHexCenter(endPos);\r\n            angle = vectorAngle(V);\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        canvasUpdates: [\r\n                            Object.assign({}, prevState.board[[prevStartNode.i,prevStartNode.j]]),\r\n                            Object.assign({},  prevState.board[[prevEndNode.i,prevEndNode.j]])\r\n                        ],\r\n                        startPosition: Object.assign({},{pos:pos,angle:angle}),\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (startTime != null) {\r\n                updateAnimation(time);\r\n            } else {\r\n                startTime = time;\r\n            }\r\n            if ((time - startTime) < totalTime) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                victoryAnimation(path[path.length-1],path[path.length-2],speed,s,xOffset,yOffset,setState,isRunning);\r\n            }\r\n        } else {\r\n            let [ prevStartNode , prevEndNode ] = [ path[i] , path[i+1] ];\r\n            setState((prevState) => {\r\n                return {\r\n                            canvasUpdates: [\r\n                                Object.assign({}, prevState.board[[prevStartNode.i,prevStartNode.j]]),\r\n                                Object.assign({},  prevState.board[[prevEndNode.i,prevEndNode.j]])\r\n                            ],\r\n                            startPosition: false,\r\n                            updateID: prevState.updateID +1\r\n                };\r\n            });\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nfunction victoryAnimation(targetNode,prevNode,speed,s,xOffset,yOffset,setState,isRunning) {\r\n    const radiansPerSecond = victorySpeed[speed];\r\n    const targetPos = calcHexCenter(targetNode,s,xOffset,yOffset);\r\n    const startAngle = vectorAngle(nodeDistance(targetNode,prevNode,s,xOffset,yOffset));\r\n    const totalTime = 6*Math.PI / radiansPerSecond * 1000;\r\n    let startTime = null;\r\n    function updateAnimation(time) {\r\n        let angle;\r\n        if ((time - startTime) < totalTime) {\r\n            angle = startAngle + (time - startTime)/totalTime*6*Math.PI;\r\n        } else {\r\n            angle = startAngle + 6*Math.PI;\r\n        }\r\n        setState((prevState) => {\r\n            return {\r\n                        canvasUpdates: [ Object.assign({}, prevState.board[[targetNode.i,targetNode.j]]) ],\r\n                        startPosition: Object.assign({},{pos:targetPos,angle:angle}),\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (startTime != null) {\r\n                updateAnimation(time);\r\n            } else {\r\n                startTime = time;\r\n            }\r\n            if ((time - startTime) < totalTime) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                setState((prevState) => ({\r\n                    running: false,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: [],\r\n                    startPosition: false\r\n                }));\r\n            }\r\n        } else {\r\n            setState((prevState) => {\r\n                return {\r\n                            canvasUpdates: [ Object.assign({}, prevState.board[[targetNode.i,targetNode.j]]) ],\r\n                            startPosition: false,\r\n                            updateID: prevState.updateID +1\r\n                };\r\n            });\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\n\r\n//=================================================================================================================================//\r\n// Maze-Drawing Animations //\r\n//=================================================================================================================================//\r\nfunction mazeAnimation(mazeID,state,setState,isRunning) {\r\n    // Set state to running so user can't interfere with pathFinder \r\n    setState((prevState) => ({\r\n        running: true, \r\n        updateID: prevState.updateID + 1\r\n    }));\r\n    // Get path array of nodes to fill in for maze\r\n    let mazeBuilder;\r\n    switch (mazeID) {\r\n        case 0: mazeBuilder = randomWalls; break;\r\n        case 1: mazeBuilder = randomWeights; break;\r\n        case 2: mazeBuilder = depthFirstMaze; break;\r\n        case 3: mazeBuilder = breadthFirstMaze; break;\r\n        case 4: mazeBuilder = huntAndKill; break;\r\n        case 5: mazeBuilder = primsMaze; break;\r\n        case 6: mazeBuilder = kruskalsMaze; break;\r\n        default: mazeBuilder = depthFirstMaze;\r\n    };\r\n    let mazePath = mazeBuilder(state.startNode,state.targetNode,state.xUnits,state.yUnits,state.board);\r\n    // Set up parameters for animation\r\n    let hexsPerSecond = drawMazeSpeed[state.speed];\r\n    let lastTime = null;\r\n    let currentStart = 0;\r\n    let steps = 0;\r\n    const totalHexs = mazePath.length;\r\n    function updateAnimation(start,steps) {\r\n        setState((prevState) => {\r\n            let canvasUpdates = mazePath.slice(start,start+steps);\r\n            let boardUpdates = {};\r\n            for (let update of canvasUpdates) {\r\n                Object.assign(boardUpdates,{[[update.node.i,update.node.j]]: update});\r\n            }\r\n            return {\r\n                        board: Object.assign({},prevState.board,boardUpdates),\r\n                        canvasUpdates: canvasUpdates,\r\n                        updateID: prevState.updateID +1\r\n            };\r\n        });\r\n    };\r\n    function frame(time) {\r\n        if (isRunning()) {\r\n            if (lastTime != null) {\r\n                steps = Math.floor(hexsPerSecond * (time - lastTime) / 1000);\r\n                if (steps > 0) {\r\n                    updateAnimation(currentStart,steps);\r\n                    currentStart += steps;\r\n                    lastTime = time;\r\n                }\r\n            } else {\r\n                lastTime = time;\r\n            }\r\n            if (currentStart < totalHexs) {\r\n                requestAnimationFrame(frame);\r\n            } else {\r\n                setState((prevState) => ({\r\n                    running: false,\r\n                    updateID: prevState.updateID + 1,\r\n                    canvasUpdates: [],\r\n                    startPosition: false\r\n                }));\r\n            }\r\n        }\r\n    };\r\n    requestAnimationFrame(frame);\r\n};\r\n\r\nexport {pathFinderAnimation, mazeAnimation};","import React from 'react';\r\nimport ControlPanel from './ControlPanel';\r\nimport Canvas from './Canvas';\r\nimport {onMouseDown, onTouchStart, clearBoard, doTheJohnWall, initializeCanvas} from '../utils/canvas-tools';\r\nimport {pathFinderAnimation, mazeAnimation} from '../utils/animations';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBars} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nclass PathFinder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let { innerWidth: width, innerHeight: height } = window\r\n        // Set Up Control Panel\r\n        let windowState = this.getWindowState();\r\n        let showControls = {1:false,2:false,3:true}[windowState]\r\n        // Setting Up Canvas\r\n        let canvasHeight;\r\n        if (windowState === 1) canvasHeight = height*.8;\r\n        else if (windowState === 2) canvasHeight = height*.85;\r\n        else canvasHeight = height*.9-4;\r\n        let canvasWidth = width;\r\n        this.canvasRef = React.createRef();\r\n        let s = 15;\r\n        let {board,startNode,targetNode,xUnits,yUnits,xOffset,yOffset,lineWidth} = initializeCanvas(canvasWidth,canvasHeight,s);\r\n        // Setting Initial State\r\n        this.state = {\r\n            windowState: this.getWindowState(),\r\n            showControls: showControls,\r\n            algorithm: 5,\r\n            speed: 2,\r\n            tool: 0,\r\n            canvasWidth: canvasWidth,\r\n            canvasHeight: canvasHeight,\r\n            s: s,\r\n            lineWidth: lineWidth,\r\n            board: board,\r\n            startNode: startNode,\r\n            targetNode: targetNode,\r\n            xUnits: xUnits,\r\n            yUnits: yUnits,\r\n            xOffset: xOffset,\r\n            yOffset: yOffset,\r\n            running: false,\r\n            canvasUpdates: [],\r\n            startPosition: false,\r\n            updateID: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', (event) => this.handleResize());\r\n    }\r\n\r\n    handleResize() {\r\n        let windowState = this.getWindowState();\r\n        if (windowState !== this.state.windowState) {\r\n            if ((windowState === 1 || windowState === 2) && (this.state.windowState === 3)) {\r\n                this.setState({windowState:windowState, showControls:false});\r\n            } else if ((windowState === 3) && (this.state.windowState === 1 || this.state.windowState === 2)) {\r\n                this.setState({windowState:windowState, showControls:true});\r\n            } else this.setState({windowState:windowState});\r\n        }\r\n    }\r\n\r\n    getWindowState() {\r\n        let { innerWidth: width, innerHeight: height } = window;\r\n        if (width < 481 || height < 481)  {\r\n            if ( width > height) return 2;\r\n            else return 1;\r\n        } else return 3;\r\n    }\r\n\r\n    toggleSelected(key,id) {\r\n        if (key !== 'clear') {\r\n            this.setState({\r\n                [key]:id\r\n            })\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    toggleControls() {\r\n        this.setState((prevState) => ({showControls: !prevState.showControls}));\r\n    }\r\n\r\n    startPathFinder() {\r\n        // Check to make sure not already running\r\n        if (this.state.running) return;\r\n        const setState = (stateUpdate) => this.setState(stateUpdate);\r\n        const isRunning = () => {return this.state.running;};\r\n        this.clearBoard(1);\r\n        pathFinderAnimation(this.state,this.canvasRef,setState,isRunning);\r\n    }\r\n\r\n    stopPathFinder() {\r\n        this.setState((prevState) => ({running:false, updateID:prevState.updateID+1}));\r\n    }\r\n\r\n    onMouseDown(downEvent) {\r\n        onMouseDown(downEvent,this.state,this.canvasRef,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    onTouchStart(startEvent) {\r\n        // This isn't working in Chrome. Chrome automatically sets scroll event to passive which dissallows preventDefault\r\n        // I could find a way to set event to active, so instead just disabling scroll for canvas in CSS.\r\n        // This however is leading to a bug where scroll gets re-enabled after user uses pinch zoom. No soultion found yet. \r\n        startEvent.preventDefault();\r\n        onTouchStart(startEvent,this.state,this.canvasRef,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    clearBoard(id) {\r\n        if (this.state.running) return;\r\n        clearBoard(id,this.canvasRef,this.state,(stateUpdate) => this.setState(stateUpdate));\r\n    }\r\n\r\n    changeHexSize(s) {\r\n        if (this.state.running || s === this.state.s) return;\r\n        this.setState((prevState) => {\r\n            return Object.assign(\r\n                {}, \r\n                initializeCanvas(prevState.canvasWidth,prevState.canvasHeight,s),\r\n                {updateID: prevState.updateID + 1, canvasUpdates: [], s:s}\r\n            );\r\n        });\r\n    }\r\n\r\n    drawMaze(id) {\r\n        if (this.state.running) return;\r\n        const setState = (stateUpdate) => this.setState(stateUpdate);\r\n        const isRunning = () => {return this.state.running;};\r\n        if (id === 0 || id === 1) this.clearBoard(0);\r\n        else doTheJohnWall(this.state,setState);\r\n        mazeAnimation(id,this.state,setState,isRunning);\r\n    }\r\n\r\n    render() {\r\n        const algorithmMap = {\r\n            0: \"Depth-First Search\",\r\n            1: \"Breadth-First Search\",\r\n            2: \"Hill Climbing\",\r\n            3: \"Beam Search (\\u03C9=2)\",\r\n            4: \"Best-First Search\",\r\n            5: \"Branch & Bound\",\r\n            6: \"A* Search\"\r\n        };\r\n        return (\r\n            <div className=\"PathFinder\">\r\n                <div className=\"Bars-Wrapper\">\r\n                    <FontAwesomeIcon className=\"bars\" icon={faBars} onClick={(event) => this.toggleControls()}/>\r\n                    <div className=\"Algorithm-Text\">{algorithmMap[this.state.algorithm]}</div>\r\n                </div>\r\n                <ControlPanel\r\n                    windowState={this.state.windowState}\r\n                    showControls={this.state.showControls}\r\n                    running={this.state.running}\r\n                    hexSize={this.state.s}\r\n                    toggleSelected={(key,id) => this.toggleSelected(key,id)}\r\n                    clearBoard={(id) => this.clearBoard(id)}\r\n                    changeHexSize={(s) => this.changeHexSize(s)}\r\n                    drawMaze={(id) => this.drawMaze(id)}\r\n                    startSearch={() => this.startPathFinder()}\r\n                    stopSearch={() => this.stopPathFinder()}\r\n                />\r\n                <Canvas\r\n                    className=\"canvas\"\r\n                    canvasRef={this.canvasRef}\r\n                    width={this.state.canvasWidth}\r\n                    height={this.state.canvasHeight}\r\n                    s={this.state.s}\r\n                    lineWidth={this.state.lineWidth}\r\n                    xOffset={this.state.xOffset}\r\n                    yOffset={this.state.yOffset}\r\n                    canvasUpdates={this.state.canvasUpdates}\r\n                    startPosition={this.state.startPosition}\r\n                    updateID={this.state.updateID}\r\n                    running={this.state.running}\r\n                    onMouseDown={(downEvent) => this.onMouseDown(downEvent)}\r\n                    onTouchStart={(startEvent) => this.onTouchStart(startEvent)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PathFinder;","import React from 'react';\nimport PathFinder from './components/PathFinder';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFinder />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}